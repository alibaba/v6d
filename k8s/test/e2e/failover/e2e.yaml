# Copyright 2020-2022 Alibaba Group Holding Limited.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

setup:
  env: kind
  file: ../kind.yaml
  steps:
    - name: setup the backup path
      command: worker=($(docker ps | grep kind-worker | awk -F ' ' '{print $1}')); for c in ${worker[@]}; do docker exec $c mkdir -p /var/vineyard/dump; done
    - name: install cert-manager
      command: |
        kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.9.1/cert-manager.yaml
      wait:
        - namespace: cert-manager
          resource: pod
          for: condition=Ready
    - name: install scheduler-plugin and operator
      command: |
        kind load docker-image docker.pkg.github.com/v6d-io/v6d/backup-job:latest
        kind load docker-image docker.pkg.github.com/v6d-io/v6d/recover-job:latest
        kind load docker-image docker.pkg.github.com/v6d-io/v6d/local-object:latest
        kind load docker-image docker.pkg.github.com/v6d-io/v6d/distributed-object-step1:latest
        kind load docker-image docker.pkg.github.com/v6d-io/v6d/distributed-object-step2:latest
        kind load docker-image docker.pkg.github.com/v6d-io/v6d/get-local-object:latest
        kind load docker-image docker.pkg.github.com/v6d-io/v6d/get-distributed-object
        kind load docker-image vineyardcloudnative/vineyard-operator:latest
        make -C k8s deploy
      wait:
        - namespace: vineyard-system
          resource: deployment/vineyard-controller-manager
          for: condition=Available
    - name: install vineyardd
      command: |
        sed 's/replicas: 2/replicas: 3/' k8s/test/e2e/vineyardd.yaml | kubectl apply -f -
      wait:
        - namespace: vineyard-system
          resource: vineyardd/vineyardd-sample
          for: condition=Available
    - name: install local-object
      command: |
        kubectl create namespace vineyard-job
        sed 's/$job/localObject/' k8s/test/e2e/failover-demo/failover-job.yaml | gomplate -d config=k8s/test/e2e/failover-demo/failover-job-config.yaml | kubectl apply -f -
        kubectl wait --for=condition=Ready pod -l app=local-object -n vineyard-job --timeout=5m
        while [ -z $(kubectl get pod -l app=local-object -n vineyard-job -oname | awk -F '/' '{print $2}' | xargs kubectl logs -n vineyard-job) ]; \
        do \
          sleep 0.1; \
        done
        export meta=$(kubectl get pod -l app=local-object -n vineyard-job -oname | awk -F '/' '{print $2}' | xargs kubectl logs -n vineyard-job)
        export localobjectid=$(echo $meta | awk 'END {print}' |awk -F "[\"]" '{print $2}')
        echo $localobjectid
      wait:
        - namespace: vineyard-job
          resource: deployment/local-object
          for: condition=Available
    - name: install distributed-object
      command: |
        sed 's/$job/distributedObject1/' k8s/test/e2e/failover-demo/failover-job.yaml | gomplate -d config=k8s/test/e2e/failover-demo/failover-job-config.yaml | kubectl apply -f -
        kubectl wait --for=condition=Ready pod -l app=distributed-object-step1 -n vineyard-job --timeout=5m
        while [ -z $(kubectl get pod -l app=distributed-object-step1 -n vineyard-job -oname | awk -F '/' '{print $2}' | xargs kubectl logs -n vineyard-job) ]; \
        do \
          sleep 0.1; \
        done
        export meta=$(kubectl get pod -l app=distributed-object-step1 -n vineyard-job -oname | awk -F '/' '{print $2}' | xargs kubectl logs -n vineyard-job)
        export step1objectid=$(echo $meta | awk 'END {print}' |awk -F "[\"]" '{print $2}')
        sed 's/objectid/'$step1objectid'/;s/$job/distributedObject2/' k8s/test/e2e/failover-demo/failover-job.yaml | gomplate -d config=k8s/test/e2e/failover-demo/failover-job-config.yaml | kubectl apply -f -
        kubectl wait --for=condition=Ready pod -l app=distributed-object-step2 -n vineyard-job --timeout=5m
        while [ -z $(kubectl get pod -l app=distributed-object-step2 -n vineyard-job -oname | awk -F '/' '{print $2}' | xargs kubectl logs -n vineyard-job) ]; \
        do \
          sleep 0.1; \
        done
        export meta=$(kubectl get pod -l app=distributed-object-step2 -n vineyard-job -oname | awk -F '/' '{print $2}' | xargs kubectl logs -n vineyard-job)
        export distributedobjectid=$(echo $meta | awk 'END {print}' |awk -F "[\"]" '{print $2}')
        echo $distributedobjectid
      wait:
        - namespace: vineyard-job
          resource: deployment/distributed-object-step2
          for: condition=Available
    - name: install backup
      command: |
        kubectl create ns backup
        kubectl apply -f k8s/test/e2e/backup.yaml
        while ! [ $(kubectl get backup backup-sample -n backup -o jsonpath='{.status.state}') = 'Succeed'  ]; \
        do \
          sleep 0.1; \
        done
    - name: simulate vineyard node fail
      command: |
        kubectl delete vineyardd vineyardd-sample -n vineyard-system
        kubectl wait --for delete pod --timeout=60s --selector=app.kubernetes.io/name=vineyardd-sample -n vineyard-system
    - name: reinstall vineyardd
      command: |
        sed 's/replicas: 2/replicas: 3/' k8s/test/e2e/vineyardd.yaml | kubectl apply -f -
      wait:
        - namespace: vineyard-system
          resource: vineyardd/vineyardd-sample
          for: condition=Available
    - name: install recover
      command: |
        kubectl apply -f k8s/test/e2e/recover.yaml
        while ! [ $(kubectl get recover recover-sample -n backup -o jsonpath='{.status.state}') = 'Succeed'  ]; \
        do \
          sleep 0.1; \
        done
    - name: install get-local-object job
      command: |
        export newlocalobject_id=$(kubectl get recover -A | grep $localobjectid | sed 's/,/\n/g'| grep \"$localobjectid\" | sed 's/:/\n/g' | tail -n 1 | sed 's/}/\n/g' | head -n 1 | sed 's/"//g')
        sed 's/objectid/'$newlocalobject_id'/;s/$job/getLocalObject/' k8s/test/e2e/failover-demo/failover-job.yaml | gomplate -d config=k8s/test/e2e/failover-demo/failover-job-config.yaml | kubectl apply -f -
      wait:
        - namespace: vineyard-job
          resource: deployment/get-local-object
          for: condition=Available
    - name: install get-distributed-object job
      command: |
        export newdistributed_id=$(kubectl get recover -A | grep $distributedobjectid | sed 's/,/\n/g'| grep \"$distributedobjectid\" | sed 's/:/\n/g' | tail -n 1 | sed 's/}/\n/g' | head -n 1 | sed 's/"//g')
        sed 's/objectid/'$newdistributed_id'/;s/$job/getDistributedObject/' k8s/test/e2e/failover-demo/failover-job.yaml | gomplate -d config=k8s/test/e2e/failover-demo/failover-job-config.yaml | kubectl apply -f -
      wait:
        - namespace: vineyard-job
          resource: deployment/get-distributed-object
          for: condition=Available
  timeout: 60m

cleanup:
  # always never success failure
  on: always

verify:
  # verify with retry strategy
  retry:
    # max retry count
    count: 10
    # the interval between two attempts, e.g. 10s, 1m.
    interval: 10s
  cases:
    - query: 'kubectl get pod -l app=get-local-object -n vineyard-job -oname | awk -F ''/'' ''{print $2}'' | head -n 1 | xargs kubectl logs -n vineyard-job | yq e ''{"sum": .}'' - | yq e ''to_entries'' -'
      expected: ../verify/values.yaml
    - query: |
        kubectl get pod -l app=get-distributed-object -n vineyard-job -oname | awk -F '/' '{print $2}' | \
        xargs kubectl logs -n vineyard-job | yq e '{"result": .}' - | yq e 'to_entries' -
      expected: ../verify/spill.yaml
