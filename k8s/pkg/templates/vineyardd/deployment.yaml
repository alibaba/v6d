# Copyright 2020-2023 Alibaba Group Holding Limited.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
{{- $l := getServiceLabelSelector }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Name }}
  namespace: {{ .Namespace }}
  labels:
    app.kubernetes.io/name: {{ .Name }}
    app.kubernetes.io/instance: {{ .Namespace -}} - {{- .Name }}
    app.kubernetes.io/component: deployment
spec:
  replicas: {{ .Spec.Replicas }}
  selector:
    matchLabels:
      {{- range $l }}
      {{.Key}}: "{{.Value}}"
      {{- end }}
      app.kubernetes.io/name: {{ .Name }}
      app.kubernetes.io/instance: {{ .Namespace -}} - {{- .Name }}
  template:
    metadata:
      labels:
        {{- range $l }}
        {{.Key}}: "{{.Value}}"
        {{- end }}
        app.kubernetes.io/name: {{ .Name }}
        app.kubernetes.io/instance: {{ .Namespace -}} - {{- .Name }}
        app.kubernetes.io/component: deployment
      annotations:
        kubectl.kubernetes.io/default-container: "vineyardd"
        kubectl.kubernetes.io/default-logs-container: "vineyardd"
    spec:
      {{- if .Spec.ServiceAccountName }}
      serviceAccountName: {{ .Spec.ServiceAccountName }}
      {{- end }}
      containers:
        - name: vineyardd
          image: {{ .Spec.VineyardConfig.Image }}
          imagePullPolicy: {{ .Spec.VineyardConfig.ImagePullPolicy }}
          command:
          - /bin/bash
          - -c
          - >
            /usr/bin/wait-for-it.sh -t 60 etcd-for-vineyard.{{ .Namespace }}.svc.cluster.local:2379;
            sleep 1;
            /usr/local/bin/vineyardd
            --sync_crds {{ .Spec.VineyardConfig.SyncCRDs }}
            --socket /var/run/vineyard.sock
            --size {{ .Spec.VineyardConfig.Size }}
            --stream_threshold {{ .Spec.VineyardConfig.StreamThreshold }}
            --etcd_cmd etcd
            --etcd_prefix {{ .Spec.VineyardConfig.EtcdPrefix }}
            --etcd_endpoint {{ .Spec.VineyardConfig.EtcdEndpoint }}
            {{- if .Spec.VineyardConfig.SpillConfig.Path }}
            --spill_path {{ .Spec.VineyardConfig.SpillConfig.Path }}
            --spill_lower_rate {{ .Spec.VineyardConfig.SpillConfig.SpillLowerRate }}
            --spill_upper_rate {{ .Spec.VineyardConfig.SpillConfig.SpillUpperRate }}
            {{- end }}
            {{- if .Spec.MetricConfig.Enable }}
            --metrics
            -log_dir /var/log/vineyard/
            {{- end }}
          env:
            - name: VINEYARDD_UID
              value: {{ .UID }}
            - name: VINEYARDD_NAME
              value: {{ .Name }}
            - name: VINEYARDD_NAMESPACE
              value: {{ .Namespace }}
            - name: MY_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: MY_UID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.uid
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_HOST_NAME
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: USER
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            {{range .Spec.VineyardConfig.Env}}
            - name: {{ .Name }}
              value: {{ .Value }}
            {{end}}
          ports:
            - name: rpc
              containerPort: 9600
              protocol: TCP
          livenessProbe:
            tcpSocket:
              port: 9600
            periodSeconds: 60
          readinessProbe:
            exec:
              command:
              - ls
              - /var/run/vineyard.sock
          volumeMounts:
            {{- if .Spec.Volume.MountPath }}
            - name: vineyard-socket
              mountPath: {{ .Spec.Volume.MountPath }}
            {{- else }}
            - name: vineyard-socket
              mountPath: /var/run
            {{- end }}
            {{- if .Spec.VineyardConfig.SpillConfig.Name }}
            - name: {{ .Spec.VineyardConfig.SpillConfig.Name }}
              mountPath: {{ .Spec.VineyardConfig.SpillConfig.Path }}
            {{- end }}
            - name: shm
              mountPath: /dev/shm
            - name: log
              mountPath: /var/log/vineyard
        {{- if .Spec.MetricConfig.Enable }}
        - name: metrics
          image : {{ .Spec.MetricConfig.Image }}
          imagePullPolicy: {{ .Spec.MetricConfig.ImagePullPolicy }}
          command: ["./grok_exporter"]
          args: ["-config", "grok_exporter.yml", "-disable-exporter-metrics", "&"]
          ports:
            - name: exporter
              containerPort: 9144
              protocol: TCP
          volumeMounts:
          - name: log
            mountPath: /var/log/vineyard
        {{- end }}
      volumes:
      {{- if .Spec.Volume.PvcName }}
      - name: vineyard-socket
        persistentVolumeClaim:
          claimName: {{ .Spec.Volume.PvcName }}
      {{- else }}
      - name: vineyard-socket
        hostPath:
          path: {{ .Spec.VineyardConfig.Socket }}
      {{- end }}
      {{- if .Spec.VineyardConfig.SpillConfig.Name }}
      - name: {{ .Spec.VineyardConfig.SpillConfig.Name }}
        persistentVolumeClaim:
          claimName: {{ .Spec.VineyardConfig.SpillConfig.Name }}
      {{- end }}
      - name: shm
        emptyDir:
          medium: Memory
      - name: log
        emptyDir: {}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app.kubernetes.io/instance
                    operator: In
                    values:
                     - {{ .Namespace -}} - {{- .Name }}
              topologyKey: "kubernetes.io/hostname"
