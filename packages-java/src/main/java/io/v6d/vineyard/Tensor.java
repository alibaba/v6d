// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.vineyard;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXReference;
import com.alibaba.fastffi.CXXValue;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFINameAlias;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import io.v6d.arrow.Buffer;
import io.v6d.std.CLongLong;
import io.v6d.std.shared_ptr;
import io.v6d.std.vector;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("vineyard::Tensor")
@FFIGen
@CXXHead("basic/ds/tensor.vineyard.h")
public interface Tensor<T> extends ITensor, BareRegistered<Tensor<T>>, FFIPointer {
    @FFINameAlias("Construct")
    void Construct_1(@CXXReference ObjectMeta meta);

    @CXXValue
    @FFITypeAlias("std::vector<long long>")
    vector<CLongLong> strides();

    @CXXReference
    @FFITypeAlias("const std::vector<long long>")
    vector<CLongLong> shape();

    @CXXReference
    @FFITypeAlias("const std::vector<long long>")
    vector<CLongLong> partition_index();

    @CXXValue
    @FFITypeAlias("vineyard::AnyType")
    AnyType value_type();

    T data();

    @CXXValue
    @FFITypeAlias("std::shared_ptr<arrow::Buffer>")
    shared_ptr<Buffer> buffer();

    static <T> Tensor<T> cast(Class<T> __t, final long __foreign_address) {
        try {
            Class<Tensor<T>> clz = (Class<Tensor<T>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(Tensor.class, __t), true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static <T> Tensor<T> cast(Class<T> __t, final FFIPointer __foreign_pointer) {
        return Tensor.cast(__t, __foreign_pointer.getAddress());
    }
}
