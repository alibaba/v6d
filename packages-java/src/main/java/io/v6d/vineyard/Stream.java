// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.vineyard;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXReference;
import com.alibaba.fastffi.CXXValue;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFINameAlias;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import io.v6d.std.CUnsignedLongLong;
import io.v6d.std.shared_ptr;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("vineyard::Stream")
@FFIGen
@CXXHead("client/ds/stream.h")
public interface Stream<T> extends Object, FFIPointer {
    @CXXValue
    Status Next(@CXXReference shared_ptr<T> chunk);

    @CXXValue
    Status Push(@CXXReference shared_ptr<T> chunk);

    @CXXValue
    @FFINameAlias("Push")
    Status Push_1(
            @CXXReference @FFITypeAlias("const std::shared_ptr<vineyard::Object>") shared_ptr<Object> chunk);

    @CXXValue
    Status Push(@CXXReference ObjectMeta chunk);

    @CXXValue
    Status Push(@CXXReference CUnsignedLongLong chunk);

    @CXXValue
    Status Abort();

    @CXXValue
    Status Finish();

    @FFINameAlias("Construct")
    void Construct_1(@CXXReference ObjectMeta meta);

    @CXXValue
    Status OpenReader(Client client);

    @CXXValue
    Status OpenWriter(Client client);

    static <T> Stream<T> cast(Class<T> __t, final long __foreign_address) {
        try {
            Class<Stream<T>> clz = (Class<Stream<T>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(Stream.class, __t), true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static <T> Stream<T> cast(Class<T> __t, final FFIPointer __foreign_pointer) {
        return Stream.cast(__t, __foreign_pointer.getAddress());
    }
}
