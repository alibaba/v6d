// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.vineyard;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXPointer;
import com.alibaba.fastffi.CXXReference;
import com.alibaba.fastffi.CXXValue;
import com.alibaba.fastffi.FFIExpr;
import com.alibaba.fastffi.FFIFactory;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import io.v6d.arrow.ArrayData;
import io.v6d.std.shared_ptr;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("vineyard::NullArrayBaseBuilder")
@FFIGen
@CXXHead("basic/ds/arrow.vineyard.h")
public interface NullArrayBaseBuilder extends ObjectBuilder, FFIPointer {
    @CXXValue
    @FFITypeAlias("std::shared_ptr<vineyard::Object>")
    shared_ptr<Object> _Seal(@CXXReference Client client);

    @CXXValue
    Status Build(@CXXReference Client client);

    static NullArrayBaseBuilder cast(final long __foreign_address) {
        try {
            Class<NullArrayBaseBuilder> clz = (Class<NullArrayBaseBuilder>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(NullArrayBaseBuilder.class, true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static NullArrayBaseBuilder cast(final FFIPointer __foreign_pointer) {
        return NullArrayBaseBuilder.cast(__foreign_pointer.getAddress());
    }

    static Factory getFactory() {
        return FFITypeFactory.getFactory(FFITypeFactory.getFFITypeName(NullArrayBaseBuilder.class, true));
    }

    static NullArrayBaseBuilder create(@CXXReference Client client) {
        return NullArrayBaseBuilder.getFactory().create(client);
    }

    static NullArrayBaseBuilder create(@CXXReference NullArray __value) {
        return NullArrayBaseBuilder.getFactory().create(__value);
    }

    static NullArrayBaseBuilder create(
            @CXXReference @FFITypeAlias("const std::shared_ptr<vineyard::NullArray>") shared_ptr<NullArray> __value) {
        return NullArrayBaseBuilder.getFactory().create(__value);
    }

    @FFIFactory
    @CXXHead("basic/ds/arrow.vineyard.h")
    interface Factory {
        NullArrayBaseBuilder create(@CXXReference Client client);

        NullArrayBaseBuilder create(@CXXReference NullArray __value);

        NullArrayBaseBuilder create(
                @CXXReference @FFITypeAlias("const std::shared_ptr<vineyard::NullArray>") shared_ptr<NullArray> __value);
    }

    @FFITypeAlias("vineyard::NullArrayBaseBuilder::ArrayType")
    @FFIGen
    @CXXHead("basic/ds/arrow.vineyard.h")
    interface ArrayType extends CXXPointer {
        @FFIExpr("{0}")
        io.v6d.arrow.NullArray get();

        static ArrayType cast(final long __foreign_address) {
            try {
                Class<ArrayType> clz = (Class<ArrayType>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(ArrayType.class, true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static ArrayType cast(final FFIPointer __foreign_pointer) {
            return ArrayType.cast(__foreign_pointer.getAddress());
        }

        static Factory getFactory() {
            return FFITypeFactory.getFactory(FFITypeFactory.getFFITypeName(ArrayType.class, true));
        }

        static ArrayType create(
                @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::ArrayData>") shared_ptr<ArrayData> data) {
            return ArrayType.getFactory().create(data);
        }

        static ArrayType create(long length) {
            return ArrayType.getFactory().create(length);
        }

        @FFIFactory
        @CXXHead("basic/ds/arrow.vineyard.h")
        interface Factory {
            ArrayType create(
                    @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::ArrayData>") shared_ptr<ArrayData> data);

            ArrayType create(long length);
        }
    }
}
