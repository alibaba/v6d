// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.vineyard;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("vineyard::AnyTypeEnum")
@FFIGen
@CXXHead("basic/ds/types.h")
public interface AnyTypeEnum<T> extends FFIPointer {
    static <T> AnyTypeEnum<T> cast(Class<T> __t, final long __foreign_address) {
        try {
            Class<AnyTypeEnum<T>> clz = (Class<AnyTypeEnum<T>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(AnyTypeEnum.class, __t), true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static <T> AnyTypeEnum<T> cast(Class<T> __t, final FFIPointer __foreign_pointer) {
        return AnyTypeEnum.cast(__t, __foreign_pointer.getAddress());
    }
}
