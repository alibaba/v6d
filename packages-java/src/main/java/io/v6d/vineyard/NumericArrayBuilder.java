// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.vineyard;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXPointer;
import com.alibaba.fastffi.CXXReference;
import com.alibaba.fastffi.CXXValue;
import com.alibaba.fastffi.FFIFactory;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFINameAlias;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import io.v6d.std.shared_ptr;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("vineyard::NumericArrayBuilder")
@FFIGen
@CXXHead("basic/ds/arrow.h")
public interface NumericArrayBuilder<T> extends NumericArrayBaseBuilder<T>, FFIPointer {
    @CXXValue
    shared_ptr<ArrayType<T>> GetArray();

    @CXXValue
    @FFINameAlias("Build")
    Status Build_1(@CXXReference Client client);

    static <T> NumericArrayBuilder<T> cast(Class<T> __t, final long __foreign_address) {
        try {
            Class<NumericArrayBuilder<T>> clz = (Class<NumericArrayBuilder<T>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(NumericArrayBuilder.class, __t), true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static <T> NumericArrayBuilder<T> cast(Class<T> __t, final FFIPointer __foreign_pointer) {
        return NumericArrayBuilder.cast(__t, __foreign_pointer.getAddress());
    }

    static <T> Factory<T> getFactory(Class<T> __t) {
        return FFITypeFactory.getFactory(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(NumericArrayBuilder.class, __t), true));
    }

    static <T> NumericArrayBuilder<T> create(Class<T> __t, @CXXReference Client client,
            @CXXValue shared_ptr<ArrayType<T>> array) {
        return NumericArrayBuilder.getFactory(__t).create(client, array);
    }

    @FFIFactory
    @CXXHead("basic/ds/arrow.h")
    interface Factory<T> {
        NumericArrayBuilder<T> create(@CXXReference Client client,
                @CXXValue shared_ptr<ArrayType<T>> array);
    }

    @FFITypeAlias("vineyard::NumericArrayBuilder<%s>::ArrayType")
    @FFIGen
    @CXXHead("basic/ds/arrow.h")
    interface ArrayType<T> extends CXXPointer {
        static <T> ArrayType<T> cast(Class<T> __t, final long __foreign_address) {
            try {
                Class<ArrayType<T>> clz = (Class<ArrayType<T>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(ArrayType.class, __t), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <T> ArrayType<T> cast(Class<T> __t, final FFIPointer __foreign_pointer) {
            return ArrayType.cast(__t, __foreign_pointer.getAddress());
        }
    }
}
