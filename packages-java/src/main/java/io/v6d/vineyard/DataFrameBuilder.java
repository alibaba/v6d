// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.vineyard;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXReference;
import com.alibaba.fastffi.CXXValue;
import com.alibaba.fastffi.FFIFactory;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFINameAlias;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import io.v6d.std.CUnsignedLong;
import io.v6d.std.pair;
import io.v6d.std.shared_ptr;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("vineyard::DataFrameBuilder")
@FFIGen
@CXXHead("basic/ds/dataframe.h")
public interface DataFrameBuilder extends DataFrameBaseBuilder, FFIPointer {
    @CXXValue
    @FFITypeAlias("std::pair<unsigned long,unsigned long>")
    pair<CUnsignedLong, CUnsignedLong> partition_index();

    void set_partition_index(long partition_index_row, long partition_index_column);

    void set_row_batch_index(long row_batch_index);

    void set_index(
            @CXXValue @FFITypeAlias("std::shared_ptr<vineyard::ITensorBuilder>") shared_ptr<ITensorBuilder> builder);

    @CXXValue
    @FFINameAlias("Build")
    Status Build_1(@CXXReference Client client);

    static DataFrameBuilder cast(final long __foreign_address) {
        try {
            Class<DataFrameBuilder> clz = (Class<DataFrameBuilder>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(DataFrameBuilder.class, true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static DataFrameBuilder cast(final FFIPointer __foreign_pointer) {
        return DataFrameBuilder.cast(__foreign_pointer.getAddress());
    }

    static Factory getFactory() {
        return FFITypeFactory.getFactory(FFITypeFactory.getFFITypeName(DataFrameBuilder.class, true));
    }

    static DataFrameBuilder create(@CXXReference Client client) {
        return DataFrameBuilder.getFactory().create(client);
    }

    @FFIFactory
    @CXXHead("basic/ds/dataframe.h")
    interface Factory {
        DataFrameBuilder create(@CXXReference Client client);
    }
}
