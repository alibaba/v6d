// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.vineyard;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXPointer;
import com.alibaba.fastffi.CXXReference;
import com.alibaba.fastffi.CXXValue;
import com.alibaba.fastffi.FFIFactory;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFILibrary;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import io.v6d.std.string;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("vineyard::Status")
@FFIGen
@CXXHead("common/util/status.h")
public interface Status extends CXXPointer {
    boolean ok();

    boolean IsInvalid();

    boolean IsKeyError();

    boolean IsTypeError();

    boolean IsIOError();

    boolean IsEndOfFile();

    boolean IsNotImplemented();

    boolean IsAssertionFailed();

    boolean IsUserInputError();

    boolean IsObjectExists();

    boolean IsObjectNotExists();

    boolean IsObjectSealed();

    boolean IsObjectNotSealed();

    boolean IsObjectIsBlob();

    boolean IsMetaTreeSubtreeNotExists();

    boolean IsMetaTreeInvalid();

    boolean IsMetaTreeElementNotExists();

    boolean IsVineyardServerNotReady();

    boolean IsArrowError();

    boolean IsConnectionFailed();

    boolean IsConnectionError();

    boolean IsEtcdError();

    boolean IsNotEnoughMemory();

    boolean IsStreamDrained();

    boolean IsStreamFailed();

    boolean IsInvalidStreamState();

    boolean IsStreamOpened();

    boolean IsGlobalObjectInvalid();

    boolean IsUnknownError();

    @CXXValue
    string ToString();

    @CXXValue
    string CodeAsString();

    @CXXValue
    @FFITypeAlias("vineyard::StatusCode")
    StatusCode code();

    @CXXValue
    string message();

    void Abort();

    void Abort(@CXXReference string message);

    @CXXValue
    string Backtrace();

    static Status cast(final long __foreign_address) {
        try {
            Class<Status> clz = (Class<Status>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(Status.class, true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static Status cast(final FFIPointer __foreign_pointer) {
        return Status.cast(__foreign_pointer.getAddress());
    }

    static Factory getFactory() {
        return FFITypeFactory.getFactory(FFITypeFactory.getFFITypeName(Status.class, true));
    }

    static Status create() {
        return Status.getFactory().create();
    }

    static Status create(@CXXValue @FFITypeAlias("vineyard::StatusCode") StatusCode arg0,
            @CXXReference string msg) {
        return Status.getFactory().create(arg0, msg);
    }

    static Status create(@CXXReference Status s) {
        return Status.getFactory().create(s);
    }

    @FFIFactory
    @CXXHead("common/util/status.h")
    interface Factory {
        Status create();

        Status create(@CXXValue @FFITypeAlias("vineyard::StatusCode") StatusCode arg0,
                @CXXReference string msg);

        Status create(@CXXReference Status s);
    }

    @FFIGen
    @FFILibrary(
            value = "vineyard::Status",
            namespace = "vineyard::Status"
    )
    @CXXHead("common/util/status.h")
    interface Library {
        Library INSTANCE = FFITypeFactory.getLibrary(Library.class);

        @CXXValue
        Status OK();

        @CXXValue
        Status Invalid();

        @CXXValue
        Status Invalid(@CXXReference string message);

        @CXXValue
        Status KeyError();

        @CXXValue
        Status TypeError();

        @CXXValue
        Status IOError(@CXXReference string msg);

        @CXXValue
        Status EndOfFile();

        @CXXValue
        Status NotImplemented(@CXXReference string message);

        @CXXValue
        Status AssertionFailed(@CXXReference string condition);

        @CXXValue
        Status UserInputError(@CXXReference string message);

        @CXXValue
        Status ObjectExists();

        @CXXValue
        Status ObjectNotExists(@CXXReference string message);

        @CXXValue
        Status ObjectSealed(@CXXReference string message);

        @CXXValue
        Status ObjectNotSealed();

        @CXXValue
        Status ObjectIsBlob(@CXXReference string message);

        @CXXValue
        Status MetaTreeInvalid(@CXXReference string message);

        @CXXValue
        Status MetaTreeTypeInvalid();

        @CXXValue
        Status MetaTreeTypeInvalid(@CXXReference string message);

        @CXXValue
        Status MetaTreeTypeNotExists();

        @CXXValue
        Status MetaTreeNameInvalid();

        @CXXValue
        Status MetaTreeNameInvalid(@CXXReference string message);

        @CXXValue
        Status MetaTreeNameNotExists();

        @CXXValue
        Status MetaTreeNameNotExists(@CXXReference string message);

        @CXXValue
        Status MetaTreeLinkInvalid();

        @CXXValue
        Status MetaTreeLinkInvalid(@CXXReference string message);

        @CXXValue
        Status MetaTreeSubtreeNotExists();

        @CXXValue
        Status MetaTreeSubtreeNotExists(@CXXReference string key);

        @CXXValue
        Status VineyardServerNotReady(@CXXReference string message);

        @CXXValue
        Status ArrowError(@CXXReference io.v6d.arrow.Status status);

        @CXXValue
        Status ConnectionFailed(@CXXReference string message);

        @CXXValue
        Status ConnectionError(@CXXReference string message);

        @CXXValue
        Status EtcdError(@CXXReference string error_message);

        @CXXValue
        Status EtcdError(int error_code, @CXXReference string error_message);

        @CXXValue
        Status NotEnoughMemory(@CXXReference string error_message);

        @CXXValue
        Status StreamDrained();

        @CXXValue
        Status StreamFailed();

        @CXXValue
        Status InvalidStreamState(@CXXReference string error_message);

        @CXXValue
        Status StreamOpened();

        @CXXValue
        Status GlobalObjectInvalid(@CXXReference string message);

        @CXXValue
        Status UnknownError(@CXXReference string message);
    }
}
