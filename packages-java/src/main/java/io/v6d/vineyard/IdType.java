// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.vineyard;

import com.alibaba.fastffi.CXXEnum;
import com.alibaba.fastffi.CXXEnumMap;
import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFIGetter;
import com.alibaba.fastffi.FFILibrary;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import com.alibaba.fastffi.FFITypeRefiner;
import io.v6d.std.CInt;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("vineyard::IdType")
@FFITypeRefiner("io.v6d.vineyard.IdType.get")
@CXXHead("basic/ds/types.h")
public enum IdType implements CXXEnum {
    Undefined(Library.INSTANCE.Undefined()),

    Int32(Library.INSTANCE.Int32()),

    Int64(Library.INSTANCE.Int64()),

    UInt32(Library.INSTANCE.UInt32()),

    UInt64(Library.INSTANCE.UInt64()),

    String(Library.INSTANCE.String()),

    Date32(Library.INSTANCE.Date32()),

    Date64(Library.INSTANCE.Date64());

    private static final CXXEnumMap<IdType> $map = new CXXEnumMap<>(values());

    int $value;

    IdType(int value) {
        $value = value;
    }

    IdType(CInt value) {
        $value = value.get();
    }

    public static IdType get(int value) {
        return $map.get(value);
    }

    public static IdType get(CInt value) {
        return $map.get(value.get());
    }

    public int getValue() {
        return $value;
    }

    public static IdType cast(final long __foreign_address) {
        try {
            Class<IdType> clz = (Class<IdType>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(IdType.class, true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    public static IdType cast(final FFIPointer __foreign_pointer) {
        return IdType.cast(__foreign_pointer.getAddress());
    }

    @FFIGen
    @FFILibrary(
            value = "vineyard::IdType",
            namespace = "vineyard::IdType"
    )
    @CXXHead("basic/ds/types.h")
    public interface Library {
        Library INSTANCE = FFITypeFactory.getLibrary(Library.class);

        @FFIGetter
        int Undefined();

        @FFIGetter
        int Int32();

        @FFIGetter
        int Int64();

        @FFIGetter
        int UInt32();

        @FFIGetter
        int UInt64();

        @FFIGetter
        int String();

        @FFIGetter
        int Date32();

        @FFIGetter
        int Date64();
    }
}
