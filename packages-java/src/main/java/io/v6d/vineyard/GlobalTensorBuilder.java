// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.vineyard;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXReference;
import com.alibaba.fastffi.CXXValue;
import com.alibaba.fastffi.FFIFactory;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFINameAlias;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import io.v6d.std.CLongLong;
import io.v6d.std.CUnsignedLongLong;
import io.v6d.std.shared_ptr;
import io.v6d.std.vector;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("vineyard::GlobalTensorBuilder")
@FFIGen
@CXXHead("basic/ds/tensor.h")
public interface GlobalTensorBuilder extends GlobalTensorBaseBuilder, FFIPointer {
    @CXXReference
    @FFITypeAlias("const std::vector<long long>")
    vector<CLongLong> partition_shape();

    void set_partition_shape(
            @CXXReference @FFITypeAlias("const std::vector<long long>") vector<CLongLong> partition_shape);

    @CXXReference
    @FFITypeAlias("const std::vector<long long>")
    vector<CLongLong> shape();

    void set_shape(
            @CXXReference @FFITypeAlias("const std::vector<long long>") vector<CLongLong> shape);

    void AddPartition(long partition_id);

    void AddPartitions(
            @CXXReference @FFITypeAlias("const std::vector<unsigned long long>") vector<CUnsignedLongLong> partition_ids);

    @CXXValue
    @FFITypeAlias("std::shared_ptr<vineyard::Object>")
    @FFINameAlias("_Seal")
    shared_ptr<Object> _Seal_1(@CXXReference Client client);

    @CXXValue
    @FFINameAlias("Build")
    Status Build_1(@CXXReference Client client);

    static GlobalTensorBuilder cast(final long __foreign_address) {
        try {
            Class<GlobalTensorBuilder> clz = (Class<GlobalTensorBuilder>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(GlobalTensorBuilder.class, true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static GlobalTensorBuilder cast(final FFIPointer __foreign_pointer) {
        return GlobalTensorBuilder.cast(__foreign_pointer.getAddress());
    }

    static Factory getFactory() {
        return FFITypeFactory.getFactory(FFITypeFactory.getFFITypeName(GlobalTensorBuilder.class, true));
    }

    static GlobalTensorBuilder create(@CXXReference Client client) {
        return GlobalTensorBuilder.getFactory().create(client);
    }

    @FFIFactory
    @CXXHead("basic/ds/tensor.h")
    interface Factory {
        GlobalTensorBuilder create(@CXXReference Client client);
    }
}
