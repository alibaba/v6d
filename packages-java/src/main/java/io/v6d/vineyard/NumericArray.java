// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.vineyard;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXPointer;
import com.alibaba.fastffi.CXXReference;
import com.alibaba.fastffi.CXXValue;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFINameAlias;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import io.v6d.arrow.Array;
import io.v6d.std.CUnsignedChar;
import io.v6d.std.shared_ptr;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("vineyard::NumericArray")
@FFIGen
@CXXHead("basic/ds/arrow.vineyard.h")
public interface NumericArray<T> extends PrimitiveArray, Registered<NumericArray<T>>, FFIPointer {
    @FFINameAlias("Construct")
    void Construct_1(@CXXReference ObjectMeta meta);

    @FFINameAlias("PostConstruct")
    void PostConstruct_1(@CXXReference ObjectMeta meta);

    @CXXValue
    shared_ptr<ArrayType<T>> GetArray();

    @CXXValue
    @FFITypeAlias("std::shared_ptr<arrow::Array>")
    shared_ptr<Array> ToArray();

    CUnsignedChar GetBase();

    static <T> NumericArray<T> cast(Class<T> __t, final long __foreign_address) {
        try {
            Class<NumericArray<T>> clz = (Class<NumericArray<T>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(NumericArray.class, __t), true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static <T> NumericArray<T> cast(Class<T> __t, final FFIPointer __foreign_pointer) {
        return NumericArray.cast(__t, __foreign_pointer.getAddress());
    }

    @FFITypeAlias("vineyard::NumericArray<%s>::ArrayType")
    @FFIGen
    @CXXHead("basic/ds/arrow.vineyard.h")
    interface ArrayType<T> extends CXXPointer {
        static <T> ArrayType<T> cast(Class<T> __t, final long __foreign_address) {
            try {
                Class<ArrayType<T>> clz = (Class<ArrayType<T>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(ArrayType.class, __t), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <T> ArrayType<T> cast(Class<T> __t, final FFIPointer __foreign_pointer) {
            return ArrayType.cast(__t, __foreign_pointer.getAddress());
        }
    }
}
