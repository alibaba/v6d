// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.vineyard;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXPointer;
import com.alibaba.fastffi.CXXReference;
import com.alibaba.fastffi.CXXValue;
import com.alibaba.fastffi.FFIConst;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import io.v6d.std.CBool;
import io.v6d.std.CUnsignedLongLong;
import io.v6d.std.shared_ptr;
import io.v6d.std.string;
import io.v6d.std.vector;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("vineyard::ClientBase")
@FFIGen
@CXXHead("client/client_base.h")
public interface ClientBase extends CXXPointer {
    @CXXValue
    Status CreateMetaData(@CXXReference ObjectMeta meta_data, @CXXReference CUnsignedLongLong id);

    @CXXValue
    Status SyncMetaData();

    @CXXValue
    Status DelData(long id, @FFIConst boolean force, @FFIConst boolean deep);

    @CXXValue
    Status DelData(
            @CXXReference @FFITypeAlias("const std::vector<unsigned long long>") vector<CUnsignedLongLong> ids,
            @FFIConst boolean force, @FFIConst boolean deep);

    @CXXValue
    Status CreateStream(@CXXReference CUnsignedLongLong id);

    @CXXValue
    Status OpenStream(@CXXReference CUnsignedLongLong id,
            @CXXValue @FFITypeAlias("vineyard::StreamOpenMode") StreamOpenMode mode);

    @CXXValue
    Status PushNextStreamChunk(long id, long chunk);

    @CXXValue
    Status PullNextStreamChunk(long id, @CXXReference CUnsignedLongLong chunk);

    @CXXValue
    Status PullNextStreamChunk(long id, @CXXReference ObjectMeta chunk);

    @CXXValue
    Status PullNextStreamChunk(long id,
            @CXXReference @FFITypeAlias("std::shared_ptr<vineyard::Object>") shared_ptr<Object> chunk);

    @CXXValue
    Status StopStream(long id, boolean failed);

    @CXXValue
    Status Persist(long id);

    @CXXValue
    Status IfPersist(long id, @CXXReference CBool persist);

    @CXXValue
    Status Exists(long id, @CXXReference CBool exists);

    @CXXValue
    Status ShallowCopy(long id, @CXXReference CUnsignedLongLong target_id);

    @CXXValue
    Status DeepCopy(long id, @CXXReference CUnsignedLongLong target_id);

    @CXXValue
    Status PutName(long id, @CXXReference string name);

    @CXXValue
    Status GetName(@CXXReference string name, @CXXReference CUnsignedLongLong id,
            @FFIConst boolean wait);

    @CXXValue
    Status DropName(@CXXReference string name);

    @CXXValue
    Status MigrateObject(long object_id, @CXXReference CUnsignedLongLong result_id,
            boolean is_stream);

    @CXXValue
    Status MigrateStream(long object_id, @CXXReference CUnsignedLongLong result_id);

    @CXXValue
    Status Clear();

    boolean Connected();

    void Disconnect();

    @CXXReference
    string IPCSocket();

    @CXXReference
    string RPCEndpoint();

    long instance_id();

    @CXXValue
    Status InstanceStatus(
            @CXXReference @FFITypeAlias("std::shared_ptr<vineyard::InstanceStatus>") shared_ptr<InstanceStatus> status);

    @CXXValue
    Status Instances(
            @CXXReference @FFITypeAlias("std::vector<unsigned long long>") vector<CUnsignedLongLong> instances);

    @CXXReference
    string Version();

    static ClientBase cast(final long __foreign_address) {
        try {
            Class<ClientBase> clz = (Class<ClientBase>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(ClientBase.class, true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static ClientBase cast(final FFIPointer __foreign_pointer) {
        return ClientBase.cast(__foreign_pointer.getAddress());
    }
}
