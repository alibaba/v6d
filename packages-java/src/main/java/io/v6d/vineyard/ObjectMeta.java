// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.vineyard;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXPointer;
import com.alibaba.fastffi.CXXReference;
import com.alibaba.fastffi.CXXValue;
import com.alibaba.fastffi.FFIFactory;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFILibrary;
import com.alibaba.fastffi.FFINameAlias;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import io.v6d.arrow.Buffer;
import io.v6d.std.CUnsignedLong;
import io.v6d.std.CUnsignedLongLong;
import io.v6d.std.shared_ptr;
import io.v6d.std.string;
import io.v6d.std.unique_ptr;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("vineyard::ObjectMeta")
@FFIGen
@CXXHead("client/ds/object_meta.h")
public interface ObjectMeta extends CXXPointer {
    void SetClient(ClientBase client);

    ClientBase GetClient();

    void SetId(@CXXReference CUnsignedLongLong id);

    long GetId();

    long GetSignature();

    void ResetSignature();

    void SetGlobal(boolean global);

    boolean IsGlobal();

    void SetTypeName(@CXXReference string type_name);

    @CXXReference
    string GetTypeName();

    void SetNBytes(long nbytes);

    long GetNBytes();

    long GetInstanceId();

    boolean IsLocal();

    void ForceLocal();

    boolean Haskey(@CXXReference string key);

    void ResetKey(@CXXReference string key);

    void AddKeyValue(@CXXReference string key, @CXXReference string value);

    @CXXValue
    string GetKeyValue(@CXXReference string key);

    void AddMember(@CXXReference string name, @CXXReference ObjectMeta member);

    void AddMember(@CXXReference string name, @CXXReference Object member);

    @FFINameAlias("AddMember")
    void AddMember_1(@CXXReference string name, Object member);

    void AddMember(@CXXReference string name,
            @CXXReference @FFITypeAlias("const std::shared_ptr<vineyard::Object>") shared_ptr<Object> member);

    void AddMember(@CXXReference string name, long member_id);

    @CXXValue
    @FFITypeAlias("std::shared_ptr<vineyard::Object>")
    shared_ptr<Object> GetMember(@CXXReference string name);

    @CXXValue
    ObjectMeta GetMemberMeta(@CXXReference string name);

    @CXXValue
    Status GetBuffer(long blob_id,
            @CXXReference @FFITypeAlias("std::shared_ptr<arrow::Buffer>") shared_ptr<Buffer> buffer);

    void SetBuffer(@CXXReference CUnsignedLongLong id,
            @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::Buffer>") shared_ptr<Buffer> buffer);

    void Reset();

    long MemoryUsage();

    @CXXValue
    string ToString();

    void PrintMeta();

    boolean incomplete();

    @CXXReference
    @FFITypeAlias("const std::shared_ptr<vineyard::BufferSet>")
    shared_ptr<BufferSet> GetBufferSet();

    static ObjectMeta cast(final long __foreign_address) {
        try {
            Class<ObjectMeta> clz = (Class<ObjectMeta>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(ObjectMeta.class, true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static ObjectMeta cast(final FFIPointer __foreign_pointer) {
        return ObjectMeta.cast(__foreign_pointer.getAddress());
    }

    static Factory getFactory() {
        return FFITypeFactory.getFactory(FFITypeFactory.getFFITypeName(ObjectMeta.class, true));
    }

    static ObjectMeta create() {
        return ObjectMeta.getFactory().create();
    }

    static ObjectMeta create(@CXXReference ObjectMeta arg0) {
        return ObjectMeta.getFactory().create(arg0);
    }

    @FFIFactory
    @CXXHead("client/ds/object_meta.h")
    interface Factory {
        ObjectMeta create();

        ObjectMeta create(@CXXReference ObjectMeta arg0);
    }

    @FFIGen
    @FFILibrary(
            value = "vineyard::ObjectMeta",
            namespace = "vineyard::ObjectMeta"
    )
    @CXXHead("client/ds/object_meta.h")
    interface Library {
        Library INSTANCE = FFITypeFactory.getLibrary(Library.class);

        @CXXValue
        @FFITypeAlias("std::unique_ptr<vineyard::ObjectMeta>")
        unique_ptr<ObjectMeta> Unsafe(@CXXValue string meta, long nobjects,
                CUnsignedLongLong objects, CUnsignedLong pointers, CUnsignedLong sizes);
    }
}
