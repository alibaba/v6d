// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.vineyard;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXReference;
import com.alibaba.fastffi.CXXValue;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFILibrary;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import io.v6d.arrow.Schema;
import io.v6d.arrow.Table;
import io.v6d.std.shared_ptr;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("vineyard::EmptyTableBuilder")
@FFIGen
@CXXHead("basic/ds/arrow_utils.h")
public interface EmptyTableBuilder extends FFIPointer {
    static EmptyTableBuilder cast(final long __foreign_address) {
        try {
            Class<EmptyTableBuilder> clz = (Class<EmptyTableBuilder>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(EmptyTableBuilder.class, true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static EmptyTableBuilder cast(final FFIPointer __foreign_pointer) {
        return EmptyTableBuilder.cast(__foreign_pointer.getAddress());
    }

    @FFIGen
    @FFILibrary(
            value = "vineyard::EmptyTableBuilder",
            namespace = "vineyard::EmptyTableBuilder"
    )
    @CXXHead("basic/ds/arrow_utils.h")
    interface Library {
        Library INSTANCE = FFITypeFactory.getLibrary(Library.class);

        @CXXValue
        Status Build(
                @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::Schema>") shared_ptr<Schema> schema,
                @CXXReference @FFITypeAlias("std::shared_ptr<arrow::Table>") shared_ptr<Table> table);

        @CXXValue
        @FFITypeAlias("std::shared_ptr<arrow::Schema>")
        shared_ptr<Schema> EmptySchema();
    }
}
