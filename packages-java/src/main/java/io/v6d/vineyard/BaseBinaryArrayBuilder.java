// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.vineyard;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXReference;
import com.alibaba.fastffi.CXXValue;
import com.alibaba.fastffi.FFIFactory;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFINameAlias;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import io.v6d.std.shared_ptr;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("vineyard::BaseBinaryArrayBuilder")
@FFIGen
@CXXHead("basic/ds/arrow.h")
public interface BaseBinaryArrayBuilder<ArrayType> extends BaseBinaryArrayBaseBuilder<ArrayType>, FFIPointer {
    @CXXValue
    shared_ptr<ArrayType> GetArray();

    @CXXValue
    @FFINameAlias("Build")
    Status Build_1(@CXXReference Client client);

    static <ArrayType> BaseBinaryArrayBuilder<ArrayType> cast(Class<ArrayType> __arraytype,
            final long __foreign_address) {
        try {
            Class<BaseBinaryArrayBuilder<ArrayType>> clz = (Class<BaseBinaryArrayBuilder<ArrayType>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(BaseBinaryArrayBuilder.class, __arraytype), true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static <ArrayType> BaseBinaryArrayBuilder<ArrayType> cast(Class<ArrayType> __arraytype,
            final FFIPointer __foreign_pointer) {
        return BaseBinaryArrayBuilder.cast(__arraytype, __foreign_pointer.getAddress());
    }

    static <ArrayType> Factory<ArrayType> getFactory(Class<ArrayType> __arraytype) {
        return FFITypeFactory.getFactory(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(BaseBinaryArrayBuilder.class, __arraytype), true));
    }

    static <ArrayType> BaseBinaryArrayBuilder<ArrayType> create(Class<ArrayType> __arraytype,
            @CXXReference Client client, @CXXValue shared_ptr<ArrayType> array) {
        return BaseBinaryArrayBuilder.getFactory(__arraytype).create(client, array);
    }

    @FFIFactory
    @CXXHead("basic/ds/arrow.h")
    interface Factory<ArrayType> {
        BaseBinaryArrayBuilder<ArrayType> create(@CXXReference Client client,
                @CXXValue shared_ptr<ArrayType> array);
    }
}
