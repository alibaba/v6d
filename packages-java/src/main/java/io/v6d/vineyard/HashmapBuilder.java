// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.vineyard;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXReference;
import com.alibaba.fastffi.CXXValue;
import com.alibaba.fastffi.FFIFactory;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFINameAlias;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("vineyard::HashmapBuilder")
@FFIGen
@CXXHead("basic/ds/hashmap.h")
public interface HashmapBuilder<K, V> extends FFIPointer {
    @CXXReference
    V at(@CXXReference K key);

    @CXXReference
    @FFINameAlias("at")
    V at_1(@CXXReference K key);

    long size();

    void reserve(long size);

    boolean empty();

    @CXXValue
    Status Build(@CXXReference Client client);

    static <K, V> HashmapBuilder<K, V> cast(Class<K> __k, Class<V> __v,
            final long __foreign_address) {
        try {
            Class<HashmapBuilder<K, V>> clz = (Class<HashmapBuilder<K, V>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(HashmapBuilder.class, __k, __v), true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static <K, V> HashmapBuilder<K, V> cast(Class<K> __k, Class<V> __v,
            final FFIPointer __foreign_pointer) {
        return HashmapBuilder.cast(__k, __v, __foreign_pointer.getAddress());
    }

    static <K, V> Factory<K, V> getFactory(Class<K> __k, Class<V> __v) {
        return FFITypeFactory.getFactory(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(HashmapBuilder.class, __k, __v), true));
    }

    static <K, V> HashmapBuilder<K, V> create(Class<K> __k, Class<V> __v,
            @CXXReference Client client) {
        return HashmapBuilder.getFactory(__k, __v).create(client);
    }

    @FFIFactory
    @CXXHead("basic/ds/hashmap.h")
    interface Factory<K, V> {
        HashmapBuilder<K, V> create(@CXXReference Client client);
    }
}
