// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.vineyard;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXReference;
import com.alibaba.fastffi.CXXValue;
import com.alibaba.fastffi.FFIFactory;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFINameAlias;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import io.v6d.arrow.Array;
import io.v6d.arrow.ChunkedArray;
import io.v6d.std.shared_ptr;
import io.v6d.std.string;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("vineyard::TableExtender")
@FFIGen
@CXXHead("basic/ds/arrow.h")
public interface TableExtender extends TableBaseBuilder, FFIPointer {
    @CXXValue
    Status AddColumn(@CXXReference Client client, @CXXReference string field_name,
            @CXXValue @FFITypeAlias("std::shared_ptr<arrow::Array>") shared_ptr<Array> column);

    @CXXValue
    @FFINameAlias("AddColumn")
    Status AddColumn_1(@CXXReference Client client, @CXXReference string field_name,
            @CXXValue @FFITypeAlias("std::shared_ptr<arrow::ChunkedArray>") shared_ptr<ChunkedArray> column);

    @CXXValue
    @FFINameAlias("Build")
    Status Build_1(@CXXReference Client client);

    static TableExtender cast(final long __foreign_address) {
        try {
            Class<TableExtender> clz = (Class<TableExtender>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(TableExtender.class, true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static TableExtender cast(final FFIPointer __foreign_pointer) {
        return TableExtender.cast(__foreign_pointer.getAddress());
    }

    static Factory getFactory() {
        return FFITypeFactory.getFactory(FFITypeFactory.getFFITypeName(TableExtender.class, true));
    }

    static TableExtender create(@CXXReference Client client,
            @CXXValue @FFITypeAlias("std::shared_ptr<vineyard::Table>") shared_ptr<Table> table) {
        return TableExtender.getFactory().create(client, table);
    }

    @FFIFactory
    @CXXHead("basic/ds/arrow.h")
    interface Factory {
        TableExtender create(@CXXReference Client client,
                @CXXValue @FFITypeAlias("std::shared_ptr<vineyard::Table>") shared_ptr<Table> table);
    }
}
