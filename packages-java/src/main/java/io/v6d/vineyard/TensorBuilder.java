// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.vineyard;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXReference;
import com.alibaba.fastffi.CXXValue;
import com.alibaba.fastffi.FFIFactory;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFINameAlias;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import io.v6d.std.CLongLong;
import io.v6d.std.vector;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("vineyard::TensorBuilder")
@FFIGen
@CXXHead("basic/ds/tensor.h")
public interface TensorBuilder<T> extends ITensorBuilder, TensorBaseBuilder<T>, FFIPointer {
    @CXXReference
    @FFITypeAlias("const std::vector<long long>")
    vector<CLongLong> shape();

    @CXXReference
    @FFITypeAlias("const std::vector<long long>")
    vector<CLongLong> partition_index();

    void set_shape(
            @CXXReference @FFITypeAlias("const std::vector<long long>") vector<CLongLong> shape);

    void set_partition_index(
            @CXXReference @FFITypeAlias("const std::vector<long long>") vector<CLongLong> partition_index);

    @CXXValue
    @FFITypeAlias("std::vector<long long>")
    vector<CLongLong> strides();

    T data();

    @CXXValue
    @FFINameAlias("Build")
    Status Build_1(@CXXReference Client client);

    static <T> TensorBuilder<T> cast(Class<T> __t, final long __foreign_address) {
        try {
            Class<TensorBuilder<T>> clz = (Class<TensorBuilder<T>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(TensorBuilder.class, __t), true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static <T> TensorBuilder<T> cast(Class<T> __t, final FFIPointer __foreign_pointer) {
        return TensorBuilder.cast(__t, __foreign_pointer.getAddress());
    }

    static <T> Factory<T> getFactory(Class<T> __t) {
        return FFITypeFactory.getFactory(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(TensorBuilder.class, __t), true));
    }

    static <T> TensorBuilder<T> create(Class<T> __t, @CXXReference Client client,
            @CXXReference @FFITypeAlias("const std::vector<long long>") vector<CLongLong> shape) {
        return TensorBuilder.getFactory(__t).create(client, shape);
    }

    static <T> TensorBuilder<T> create(Class<T> __t, @CXXReference Client client,
            @CXXReference @FFITypeAlias("const std::vector<long long>") vector<CLongLong> shape,
            @CXXReference @FFITypeAlias("const std::vector<long long>") vector<CLongLong> partition_index) {
        return TensorBuilder.getFactory(__t).create(client, shape, partition_index);
    }

    @FFIFactory
    @CXXHead("basic/ds/tensor.h")
    interface Factory<T> {
        TensorBuilder<T> create(@CXXReference Client client,
                @CXXReference @FFITypeAlias("const std::vector<long long>") vector<CLongLong> shape);

        TensorBuilder<T> create(@CXXReference Client client,
                @CXXReference @FFITypeAlias("const std::vector<long long>") vector<CLongLong> shape,
                @CXXReference @FFITypeAlias("const std::vector<long long>") vector<CLongLong> partition_index);
    }
}
