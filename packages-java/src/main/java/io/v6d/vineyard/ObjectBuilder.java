// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.vineyard;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXPointer;
import com.alibaba.fastffi.CXXReference;
import com.alibaba.fastffi.CXXValue;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import io.v6d.std.shared_ptr;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("vineyard::ObjectBuilder")
@FFIGen
@CXXHead("client/ds/i_object.h")
public interface ObjectBuilder extends ObjectBase, CXXPointer {
    @CXXValue
    @FFITypeAlias("std::shared_ptr<vineyard::Object>")
    shared_ptr<Object> Seal(@CXXReference Client client);

    boolean sealed();

    static ObjectBuilder cast(final long __foreign_address) {
        try {
            Class<ObjectBuilder> clz = (Class<ObjectBuilder>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(ObjectBuilder.class, true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static ObjectBuilder cast(final FFIPointer __foreign_pointer) {
        return ObjectBuilder.cast(__foreign_pointer.getAddress());
    }
}
