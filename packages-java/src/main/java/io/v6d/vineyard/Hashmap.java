// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.vineyard;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXPointer;
import com.alibaba.fastffi.CXXReference;
import com.alibaba.fastffi.CXXValue;
import com.alibaba.fastffi.FFIExpr;
import com.alibaba.fastffi.FFIFactory;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFIGetter;
import com.alibaba.fastffi.FFINameAlias;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import io.v6d.ska.detailv3.sherwood_v3_entry;
import io.v6d.std.pair;
import io.v6d.std.ptrdiff_t;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("vineyard::Hashmap")
@FFIGen
@CXXHead("basic/ds/hashmap.vineyard.h")
public interface Hashmap<K, V> extends FFIPointer {
    void Construct(@CXXReference ObjectMeta meta);

    void PostConstruct(@CXXReference ObjectMeta meta);

    @CXXValue
    iterator begin();

    @CXXValue
    iterator end();

    @CXXValue
    iterator find(@CXXReference K key);

    @CXXValue
    @FFINameAlias("find")
    iterator find_1(@CXXReference K key);

    long count(@CXXReference K key);

    long size();

    boolean empty();

    @CXXReference
    V at(@CXXReference K key);

    static <K, V> Hashmap<K, V> cast(Class<K> __k, Class<V> __v, final long __foreign_address) {
        try {
            Class<Hashmap<K, V>> clz = (Class<Hashmap<K, V>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(Hashmap.class, __k, __v), true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static <K, V> Hashmap<K, V> cast(Class<K> __k, Class<V> __v,
            final FFIPointer __foreign_pointer) {
        return Hashmap.cast(__k, __v, __foreign_pointer.getAddress());
    }

    @FFITypeAlias("vineyard::Hashmap<%s,%s>::const_pointer")
    @FFIGen
    @CXXHead("basic/ds/hashmap.vineyard.h")
    interface const_pointer<K, V> extends CXXPointer {
        @FFIExpr("(*{0})")
        value_type<K, V> get();

        @FFIExpr("*{0} = (vineyard::Hashmap<%s,%s>::const_pointer){1}")
        void set(value_type<K, V> __value);

        static <K, V> const_pointer<K, V> cast(Class<K> __k, Class<V> __v,
                final long __foreign_address) {
            try {
                Class<const_pointer<K, V>> clz = (Class<const_pointer<K, V>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(const_pointer.class, __k, __v), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <K, V> const_pointer<K, V> cast(Class<K> __k, Class<V> __v,
                final FFIPointer __foreign_pointer) {
            return const_pointer.cast(__k, __v, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("vineyard::Hashmap<%s,%s>::pointer")
    @FFIGen
    @CXXHead("basic/ds/hashmap.vineyard.h")
    interface pointer<K, V> extends CXXPointer {
        @FFIExpr("(*{0})")
        value_type<K, V> get();

        @FFIExpr("*{0} = (vineyard::Hashmap<%s,%s>::pointer){1}")
        void set(value_type<K, V> __value);

        static <K, V> pointer<K, V> cast(Class<K> __k, Class<V> __v, final long __foreign_address) {
            try {
                Class<pointer<K, V>> clz = (Class<pointer<K, V>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(pointer.class, __k, __v), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <K, V> pointer<K, V> cast(Class<K> __k, Class<V> __v,
                final FFIPointer __foreign_pointer) {
            return pointer.cast(__k, __v, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("vineyard::Hashmap<%s,%s>::iterator")
    @FFIGen
    @CXXHead("basic/ds/hashmap.vineyard.h")
    interface iterator<K, V> extends FFIPointer {
        @FFIGetter
        @CXXReference
        EntryPointer<K, V> current();

        static <K, V> iterator<K, V> cast(Class<K> __k, Class<V> __v,
                final long __foreign_address) {
            try {
                Class<iterator<K, V>> clz = (Class<iterator<K, V>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(iterator.class, __k, __v), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <K, V> iterator<K, V> cast(Class<K> __k, Class<V> __v,
                final FFIPointer __foreign_pointer) {
            return iterator.cast(__k, __v, __foreign_pointer.getAddress());
        }

        static <K, V> Factory<K, V> getFactory(Class<K> __k, Class<V> __v) {
            return FFITypeFactory.getFactory(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(iterator.class, __k, __v), true));
        }

        static <K, V> iterator<K, V> create(Class<K> __k, Class<V> __v,
                @CXXValue EntryPointer<K, V> current) {
            return iterator.getFactory(__k, __v).create(current);
        }

        @FFIFactory
        @CXXHead("basic/ds/hashmap.vineyard.h")
        interface Factory<K, V> {
            iterator<K, V> create(@CXXValue EntryPointer<K, V> current);
        }
    }

    @FFITypeAlias("vineyard::Hashmap<%s,%s>::EntryPointer")
    @FFIGen
    @CXXHead("basic/ds/hashmap.vineyard.h")
    interface EntryPointer<K, V> extends CXXPointer {
        @FFIExpr("(*{0})")
        Entry<K, V> get();

        @FFIExpr("*{0} = (vineyard::Hashmap<%s,%s>::EntryPointer){1}")
        void set(Entry<K, V> __value);

        static <K, V> EntryPointer<K, V> cast(Class<K> __k, Class<V> __v,
                final long __foreign_address) {
            try {
                Class<EntryPointer<K, V>> clz = (Class<EntryPointer<K, V>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(EntryPointer.class, __k, __v), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <K, V> EntryPointer<K, V> cast(Class<K> __k, Class<V> __v,
                final FFIPointer __foreign_pointer) {
            return EntryPointer.cast(__k, __v, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("vineyard::Hashmap<%s,%s>::Hasher")
    @FFIGen
    @CXXHead("basic/ds/hashmap.vineyard.h")
    interface Hasher<K, V> extends CXXPointer {
        static <K, V> Hasher<K, V> cast(Class<K> __k, Class<V> __v, final long __foreign_address) {
            try {
                Class<Hasher<K, V>> clz = (Class<Hasher<K, V>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(Hasher.class, __k, __v), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <K, V> Hasher<K, V> cast(Class<K> __k, Class<V> __v,
                final FFIPointer __foreign_pointer) {
            return Hasher.cast(__k, __v, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("vineyard::Hashmap<%s,%s>::difference_type")
    @FFIGen
    @CXXHead("basic/ds/hashmap.vineyard.h")
    interface difference_type<K, V> extends CXXPointer {
        @FFIExpr("{0}")
        ptrdiff_t get();

        static <K, V> difference_type<K, V> cast(Class<K> __k, Class<V> __v,
                final long __foreign_address) {
            try {
                Class<difference_type<K, V>> clz = (Class<difference_type<K, V>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(difference_type.class, __k, __v), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <K, V> difference_type<K, V> cast(Class<K> __k, Class<V> __v,
                final FFIPointer __foreign_pointer) {
            return difference_type.cast(__k, __v, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("vineyard::Hashmap<%s,%s>::size_type")
    @FFIGen
    @CXXHead("basic/ds/hashmap.vineyard.h")
    interface size_type<K, V> extends CXXPointer {
        @FFIExpr("(*{0})")
        long get();

        @FFIExpr("*{0} = (vineyard::Hashmap<%s,%s>::size_type){1}")
        void set(long __value);

        static <K, V> size_type<K, V> cast(Class<K> __k, Class<V> __v,
                final long __foreign_address) {
            try {
                Class<size_type<K, V>> clz = (Class<size_type<K, V>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(size_type.class, __k, __v), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <K, V> size_type<K, V> cast(Class<K> __k, Class<V> __v,
                final FFIPointer __foreign_pointer) {
            return size_type.cast(__k, __v, __foreign_pointer.getAddress());
        }

        static <K, V> Factory<K, V> getFactory(Class<K> __k, Class<V> __v) {
            return FFITypeFactory.getFactory(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(size_type.class, __k, __v), true));
        }

        static <K, V> size_type<K, V> create(Class<K> __k, Class<V> __v) {
            return size_type.getFactory(__k, __v).create();
        }

        static <K, V> size_type<K, V> create(Class<K> __k, Class<V> __v, long __value) {
            return size_type.getFactory(__k, __v).create(__value);
        }

        @FFIFactory
        @CXXHead("basic/ds/hashmap.vineyard.h")
        interface Factory<K, V> {
            size_type<K, V> create();

            size_type<K, V> create(long __value);
        }
    }

    @FFITypeAlias("vineyard::Hashmap<%s,%s>::flat_hash_table_type")
    @FFIGen
    @CXXHead("basic/ds/hashmap.vineyard.h")
    interface flat_hash_table_type<K, V> extends CXXPointer {
        static <K, V> flat_hash_table_type<K, V> cast(Class<K> __k, Class<V> __v,
                final long __foreign_address) {
            try {
                Class<flat_hash_table_type<K, V>> clz = (Class<flat_hash_table_type<K, V>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(flat_hash_table_type.class, __k, __v), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <K, V> flat_hash_table_type<K, V> cast(Class<K> __k, Class<V> __v,
                final FFIPointer __foreign_pointer) {
            return flat_hash_table_type.cast(__k, __v, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("vineyard::Hashmap<%s,%s>::reference")
    @FFIGen
    @CXXHead("basic/ds/hashmap.vineyard.h")
    interface reference<K, V> extends CXXPointer {
        @FFIExpr("(*{0})")
        value_type<K, V> get();

        @FFIExpr("*{0} = (vineyard::Hashmap<%s,%s>::reference){1}")
        void set(value_type<K, V> __value);

        static <K, V> reference<K, V> cast(Class<K> __k, Class<V> __v,
                final long __foreign_address) {
            try {
                Class<reference<K, V>> clz = (Class<reference<K, V>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(reference.class, __k, __v), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <K, V> reference<K, V> cast(Class<K> __k, Class<V> __v,
                final FFIPointer __foreign_pointer) {
            return reference.cast(__k, __v, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("vineyard::Hashmap<%s,%s>::const_reference")
    @FFIGen
    @CXXHead("basic/ds/hashmap.vineyard.h")
    interface const_reference<K, V> extends CXXPointer {
        @FFIExpr("(*{0})")
        value_type<K, V> get();

        @FFIExpr("*{0} = (vineyard::Hashmap<%s,%s>::const_reference){1}")
        void set(value_type<K, V> __value);

        static <K, V> const_reference<K, V> cast(Class<K> __k, Class<V> __v,
                final long __foreign_address) {
            try {
                Class<const_reference<K, V>> clz = (Class<const_reference<K, V>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(const_reference.class, __k, __v), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <K, V> const_reference<K, V> cast(Class<K> __k, Class<V> __v,
                final FFIPointer __foreign_pointer) {
            return const_reference.cast(__k, __v, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("vineyard::Hashmap<%s,%s>::Entry")
    @FFIGen
    @CXXHead("basic/ds/hashmap.vineyard.h")
    interface Entry<K, V> extends CXXPointer {
        @FFIExpr("{0}")
        sherwood_v3_entry<T<K, V>> get();

        static <K, V> Entry<K, V> cast(Class<K> __k, Class<V> __v, final long __foreign_address) {
            try {
                Class<Entry<K, V>> clz = (Class<Entry<K, V>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(Entry.class, __k, __v), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <K, V> Entry<K, V> cast(Class<K> __k, Class<V> __v,
                final FFIPointer __foreign_pointer) {
            return Entry.cast(__k, __v, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("vineyard::Hashmap<%s,%s>::Equal")
    @FFIGen
    @CXXHead("basic/ds/hashmap.vineyard.h")
    interface Equal<K, V> extends CXXPointer {
        static <K, V> Equal<K, V> cast(Class<K> __k, Class<V> __v, final long __foreign_address) {
            try {
                Class<Equal<K, V>> clz = (Class<Equal<K, V>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(Equal.class, __k, __v), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <K, V> Equal<K, V> cast(Class<K> __k, Class<V> __v,
                final FFIPointer __foreign_pointer) {
            return Equal.cast(__k, __v, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("vineyard::Hashmap<%s,%s>::T")
    @FFIGen
    @CXXHead("basic/ds/hashmap.vineyard.h")
    interface T<K, V> extends CXXPointer {
        @FFIExpr("{0}")
        pair<K, V> get();

        static <K, V> T<K, V> cast(Class<K> __k, Class<V> __v, final long __foreign_address) {
            try {
                Class<T<K, V>> clz = (Class<T<K, V>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(T.class, __k, __v), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <K, V> T<K, V> cast(Class<K> __k, Class<V> __v, final FFIPointer __foreign_pointer) {
            return T.cast(__k, __v, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("vineyard::Hashmap<%s,%s>::value_type")
    @FFIGen
    @CXXHead("basic/ds/hashmap.vineyard.h")
    interface value_type<K, V> extends CXXPointer {
        @FFIExpr("{0}")
        T<K, V> get();

        static <K, V> value_type<K, V> cast(Class<K> __k, Class<V> __v,
                final long __foreign_address) {
            try {
                Class<value_type<K, V>> clz = (Class<value_type<K, V>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(value_type.class, __k, __v), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <K, V> value_type<K, V> cast(Class<K> __k, Class<V> __v,
                final FFIPointer __foreign_pointer) {
            return value_type.cast(__k, __v, __foreign_pointer.getAddress());
        }
    }
}
