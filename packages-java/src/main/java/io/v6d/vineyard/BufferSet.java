// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.vineyard;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXReference;
import com.alibaba.fastffi.CXXValue;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import io.v6d.arrow.Buffer;
import io.v6d.std.CUnsignedLongLong;
import io.v6d.std.map;
import io.v6d.std.set;
import io.v6d.std.shared_ptr;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("vineyard::BufferSet")
@FFIGen
@CXXHead("client/ds/blob.h")
public interface BufferSet extends FFIPointer {
    @CXXReference
    @FFITypeAlias("const std::set<unsigned long long>")
    set<CUnsignedLongLong> AllBufferIds();

    @CXXReference
    @FFITypeAlias("const std::map<unsigned long long,std::shared_ptr<arrow::Buffer>>")
    map<CUnsignedLongLong, shared_ptr<Buffer>> AllBuffers();

    @CXXValue
    Status EmplaceBuffer(long id);

    @CXXValue
    Status EmplaceBuffer(long id,
            @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::Buffer>") shared_ptr<Buffer> buffer);

    void Extend(@CXXReference BufferSet others);

    void Extend(
            @CXXReference @FFITypeAlias("const std::shared_ptr<vineyard::BufferSet>") shared_ptr<BufferSet> others);

    boolean Contains(long id);

    boolean Get(long id,
            @CXXReference @FFITypeAlias("std::shared_ptr<arrow::Buffer>") shared_ptr<Buffer> buffer);

    static BufferSet cast(final long __foreign_address) {
        try {
            Class<BufferSet> clz = (Class<BufferSet>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(BufferSet.class, true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static BufferSet cast(final FFIPointer __foreign_pointer) {
        return BufferSet.cast(__foreign_pointer.getAddress());
    }
}
