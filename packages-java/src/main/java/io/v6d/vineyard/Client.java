// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.vineyard;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXPointer;
import com.alibaba.fastffi.CXXReference;
import com.alibaba.fastffi.CXXValue;
import com.alibaba.fastffi.FFIConst;
import com.alibaba.fastffi.FFIFactory;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFILibrary;
import com.alibaba.fastffi.FFINameAlias;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import io.v6d.arrow.Buffer;
import io.v6d.arrow.MutableBuffer;
import io.v6d.std.CInt;
import io.v6d.std.CUnsignedLong;
import io.v6d.std.CUnsignedLongLong;
import io.v6d.std.shared_ptr;
import io.v6d.std.string;
import io.v6d.std.unique_ptr;
import io.v6d.std.vector;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("vineyard::Client")
@FFIGen
@CXXHead("client/client.h")
public interface Client extends ClientBase, CXXPointer {
    @CXXValue
    Status Connect();

    @CXXValue
    Status Connect(@CXXReference string ipc_socket);

    @CXXValue
    Status Fork(@CXXReference Client client);

    @CXXValue
    Status GetMetaData(long id, @CXXReference ObjectMeta meta_data, @FFIConst boolean sync_remote);

    @CXXValue
    Status GetMetaData(
            @CXXReference @FFITypeAlias("const std::vector<unsigned long long>") vector<CUnsignedLongLong> id,
            @CXXReference @FFITypeAlias("std::vector<vineyard::ObjectMeta>") vector<ObjectMeta> arg1,
            @FFIConst boolean sync_remote);

    @CXXValue
    Status CreateBlob(long size,
            @CXXReference @FFITypeAlias("std::unique_ptr<vineyard::BlobWriter>") unique_ptr<BlobWriter> blob);

    @CXXValue
    Status GetNextStreamChunk(long id, long size,
            @CXXReference @FFITypeAlias("std::unique_ptr<arrow::MutableBuffer>") unique_ptr<MutableBuffer> blob);

    @CXXValue
    Status PullNextStreamChunk(long id,
            @CXXReference @FFITypeAlias("std::unique_ptr<arrow::Buffer>") unique_ptr<Buffer> chunk);

    @CXXValue
    @FFITypeAlias("std::shared_ptr<vineyard::Object>")
    shared_ptr<Object> GetObject(long id);

    @CXXValue
    Status GetObject(long id,
            @CXXReference @FFITypeAlias("std::shared_ptr<vineyard::Object>") shared_ptr<Object> object);

    @CXXValue
    @FFITypeAlias("std::vector<std::shared_ptr<vineyard::Object>>")
    vector<shared_ptr<Object>> GetObjects(
            @CXXReference @FFITypeAlias("const std::vector<unsigned long long>") vector<CUnsignedLongLong> ids);

    @CXXValue
    @FFITypeAlias("std::vector<vineyard::ObjectMeta>")
    vector<ObjectMeta> ListObjectMeta(@CXXReference string pattern, @FFIConst boolean regex,
            long limit, boolean nobuffer);

    @CXXValue
    @FFITypeAlias("std::vector<std::shared_ptr<vineyard::Object>>")
    vector<shared_ptr<Object>> ListObjects(@CXXReference string pattern, @FFIConst boolean regex,
            long limit);

    boolean IsSharedMemory(@FFITypeAlias("const void*") long target);

    @FFINameAlias("IsSharedMemory")
    boolean IsSharedMemory_1(long target);

    @CXXValue
    Status AllocatedSize(long id, @CXXReference CUnsignedLong size);

    @CXXValue
    Status CreateArena(long size, @CXXReference CInt fd, @CXXReference CUnsignedLong available_size,
            @CXXReference CUnsignedLong base, @CXXReference CUnsignedLong space);

    @CXXValue
    Status ReleaseArena(@FFIConst int fd,
            @CXXReference @FFITypeAlias("const std::vector<unsigned long>") vector<CUnsignedLong> offsets,
            @CXXReference @FFITypeAlias("const std::vector<unsigned long>") vector<CUnsignedLong> sizes);

    static Client cast(final long __foreign_address) {
        try {
            Class<Client> clz = (Class<Client>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(Client.class, true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static Client cast(final FFIPointer __foreign_pointer) {
        return Client.cast(__foreign_pointer.getAddress());
    }

    static Factory getFactory() {
        return FFITypeFactory.getFactory(FFITypeFactory.getFFITypeName(Client.class, true));
    }

    static Client create() {
        return Client.getFactory().create();
    }

    @FFIFactory
    @CXXHead("client/client.h")
    interface Factory {
        Client create();
    }

    @FFIGen
    @FFILibrary(
            value = "vineyard::Client",
            namespace = "vineyard::Client"
    )
    @CXXHead("client/client.h")
    interface Library {
        Library INSTANCE = FFITypeFactory.getLibrary(Library.class);

        @CXXReference
        Client Default();
    }
}
