// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.vineyard.arrow_types;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXPointer;
import com.alibaba.fastffi.CXXReference;
import com.alibaba.fastffi.CXXValue;
import com.alibaba.fastffi.FFIExpr;
import com.alibaba.fastffi.FFIFactory;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFINameAlias;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import io.v6d.std.CChar;
import io.v6d.std.allocator;
import io.v6d.std.impl.basic_string.AllocatorTypeCharStdCharTraitsCharStdAllocatorChar;
import io.v6d.std.impl.basic_string.ConstIteratorCharStdCharTraitsCharStdAllocatorChar;
import io.v6d.std.impl.basic_string.ConstReferenceCharStdCharTraitsCharStdAllocatorChar;
import io.v6d.std.impl.basic_string.ConstReverseIteratorCharStdCharTraitsCharStdAllocatorChar;
import io.v6d.std.impl.basic_string.IteratorCharStdCharTraitsCharStdAllocatorChar;
import io.v6d.std.impl.basic_string.ReferenceCharStdCharTraitsCharStdAllocatorChar;
import io.v6d.std.impl.basic_string.ReverseIteratorCharStdCharTraitsCharStdAllocatorChar;
import io.v6d.std.initializer_list;
import io.v6d.std.string;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("vineyard::arrow_types::OIDT")
@FFIGen
@CXXHead("basic/ds/arrow_utils.h")
public interface OIDT extends CXXPointer {
    @FFIExpr("{0}")
    string get();

    @CXXValue
    IteratorCharStdCharTraitsCharStdAllocatorChar begin();

    @CXXValue
    @FFINameAlias("begin")
    ConstIteratorCharStdCharTraitsCharStdAllocatorChar begin_1();

    @CXXValue
    IteratorCharStdCharTraitsCharStdAllocatorChar end();

    @CXXValue
    @FFINameAlias("end")
    ConstIteratorCharStdCharTraitsCharStdAllocatorChar end_1();

    @CXXValue
    ReverseIteratorCharStdCharTraitsCharStdAllocatorChar rbegin();

    @CXXValue
    @FFINameAlias("rbegin")
    ConstReverseIteratorCharStdCharTraitsCharStdAllocatorChar rbegin_1();

    @CXXValue
    ReverseIteratorCharStdCharTraitsCharStdAllocatorChar rend();

    @CXXValue
    @FFINameAlias("rend")
    ConstReverseIteratorCharStdCharTraitsCharStdAllocatorChar rend_1();

    @CXXValue
    ConstIteratorCharStdCharTraitsCharStdAllocatorChar cbegin();

    @CXXValue
    ConstIteratorCharStdCharTraitsCharStdAllocatorChar cend();

    @CXXValue
    ConstReverseIteratorCharStdCharTraitsCharStdAllocatorChar crbegin();

    @CXXValue
    ConstReverseIteratorCharStdCharTraitsCharStdAllocatorChar crend();

    long size();

    long length();

    long max_size();

    long capacity();

    void resize(long __n, char __c);

    void resize(long __n);

    void reserve(long __requested_capacity);

    void __resize_default_init(long __n);

    void reserve();

    void shrink_to_fit();

    void clear();

    boolean empty();

    @CXXValue
    ConstReferenceCharStdCharTraitsCharStdAllocatorChar at(long __n);

    @CXXValue
    @FFINameAlias("at")
    ReferenceCharStdCharTraitsCharStdAllocatorChar at_1(long __n);

    void __append_default_init(long __n);

    void push_back(char __c);

    void pop_back();

    @CXXValue
    ReferenceCharStdCharTraitsCharStdAllocatorChar front();

    @CXXValue
    @FFINameAlias("front")
    ConstReferenceCharStdCharTraitsCharStdAllocatorChar front_1();

    @CXXValue
    ReferenceCharStdCharTraitsCharStdAllocatorChar back();

    @CXXValue
    @FFINameAlias("back")
    ConstReferenceCharStdCharTraitsCharStdAllocatorChar back_1();

    @CXXValue
    IteratorCharStdCharTraitsCharStdAllocatorChar insert(
            @CXXValue ConstIteratorCharStdCharTraitsCharStdAllocatorChar __pos, char __c);

    @CXXValue
    IteratorCharStdCharTraitsCharStdAllocatorChar insert(
            @CXXValue ConstIteratorCharStdCharTraitsCharStdAllocatorChar __pos, long __n, char __c);

    @CXXValue
    IteratorCharStdCharTraitsCharStdAllocatorChar insert(
            @CXXValue ConstIteratorCharStdCharTraitsCharStdAllocatorChar __pos,
            @CXXValue @FFITypeAlias("std::initializer_list<char>") initializer_list<CChar> __il);

    @CXXValue
    IteratorCharStdCharTraitsCharStdAllocatorChar erase(
            @CXXValue ConstIteratorCharStdCharTraitsCharStdAllocatorChar __pos);

    @CXXValue
    IteratorCharStdCharTraitsCharStdAllocatorChar erase(
            @CXXValue ConstIteratorCharStdCharTraitsCharStdAllocatorChar __first,
            @CXXValue ConstIteratorCharStdCharTraitsCharStdAllocatorChar __last);

    long copy(CChar __s, long __n, long __pos);

    CChar c_str();

    CChar data();

    @CXXValue
    AllocatorTypeCharStdCharTraitsCharStdAllocatorChar get_allocator();

    long find(CChar __s, long __pos, long __n);

    long find(CChar __s, long __pos);

    long find(char __c, long __pos);

    long rfind(CChar __s, long __pos, long __n);

    long rfind(CChar __s, long __pos);

    long rfind(char __c, long __pos);

    long find_first_of(CChar __s, long __pos, long __n);

    long find_first_of(CChar __s, long __pos);

    long find_first_of(char __c, long __pos);

    long find_last_of(CChar __s, long __pos, long __n);

    long find_last_of(CChar __s, long __pos);

    long find_last_of(char __c, long __pos);

    long find_first_not_of(CChar __s, long __pos, long __n);

    long find_first_not_of(CChar __s, long __pos);

    long find_first_not_of(char __c, long __pos);

    long find_last_not_of(CChar __s, long __pos, long __n);

    long find_last_not_of(CChar __s, long __pos);

    long find_last_not_of(char __c, long __pos);

    int compare(CChar __s);

    int compare(long __pos1, long __n1, CChar __s);

    int compare(long __pos1, long __n1, CChar __s, long __n2);

    boolean __invariants();

    void __clear_and_shrink();

    void __shrink_or_extend(long __target_capacity);

    boolean __is_long();

    static OIDT cast(final long __foreign_address) {
        try {
            Class<OIDT> clz = (Class<OIDT>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(OIDT.class, true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static OIDT cast(final FFIPointer __foreign_pointer) {
        return OIDT.cast(__foreign_pointer.getAddress());
    }

    static Factory getFactory() {
        return FFITypeFactory.getFactory(FFITypeFactory.getFFITypeName(OIDT.class, true));
    }

    static OIDT create() {
        return OIDT.getFactory().create();
    }

    static OIDT create(@CXXReference AllocatorTypeCharStdCharTraitsCharStdAllocatorChar __a) {
        return OIDT.getFactory().create(__a);
    }

    static OIDT create(CChar __s, long __n) {
        return OIDT.getFactory().create(__s, __n);
    }

    static OIDT create(CChar __s, long __n,
            @CXXReference @FFITypeAlias("const std::allocator<char>") allocator<CChar> __a) {
        return OIDT.getFactory().create(__s, __n, __a);
    }

    static OIDT create(long __n, char __c) {
        return OIDT.getFactory().create(__n, __c);
    }

    static OIDT create(
            @CXXValue @FFITypeAlias("std::initializer_list<char>") initializer_list<CChar> __il) {
        return OIDT.getFactory().create(__il);
    }

    static OIDT create(
            @CXXValue @FFITypeAlias("std::initializer_list<char>") initializer_list<CChar> __il,
            @CXXReference @FFITypeAlias("const std::allocator<char>") allocator<CChar> __a) {
        return OIDT.getFactory().create(__il, __a);
    }

    @FFIFactory
    @CXXHead("basic/ds/arrow_utils.h")
    interface Factory {
        OIDT create();

        OIDT create(@CXXReference AllocatorTypeCharStdCharTraitsCharStdAllocatorChar __a);

        OIDT create(CChar __s, long __n);

        OIDT create(CChar __s, long __n,
                @CXXReference @FFITypeAlias("const std::allocator<char>") allocator<CChar> __a);

        OIDT create(long __n, char __c);

        OIDT create(
                @CXXValue @FFITypeAlias("std::initializer_list<char>") initializer_list<CChar> __il);

        OIDT create(
                @CXXValue @FFITypeAlias("std::initializer_list<char>") initializer_list<CChar> __il,
                @CXXReference @FFITypeAlias("const std::allocator<char>") allocator<CChar> __a);
    }
}
