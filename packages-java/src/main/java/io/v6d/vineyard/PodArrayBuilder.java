// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.vineyard;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXValue;
import com.alibaba.fastffi.FFIFactory;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFINameAlias;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import io.v6d.arrow.FixedSizeBinaryBuilder;
import io.v6d.arrow.MemoryPool;
import io.v6d.arrow.Status;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("vineyard::PodArrayBuilder")
@FFIGen
@CXXHead("basic/ds/arrow_utils.h")
public interface PodArrayBuilder<T> extends FixedSizeBinaryBuilder, FFIPointer {
    T MutablePointer(long i);

    @CXXValue
    @FFINameAlias("Resize")
    Status Resize_2(long capacity);

    @CXXValue
    @FFINameAlias("Advance")
    Status Advance_1(long elements);

    static <T> PodArrayBuilder<T> cast(Class<T> __t, final long __foreign_address) {
        try {
            Class<PodArrayBuilder<T>> clz = (Class<PodArrayBuilder<T>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(PodArrayBuilder.class, __t), true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static <T> PodArrayBuilder<T> cast(Class<T> __t, final FFIPointer __foreign_pointer) {
        return PodArrayBuilder.cast(__t, __foreign_pointer.getAddress());
    }

    static <T> Factory<T> getFactory(Class<T> __t) {
        return FFITypeFactory.getFactory(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(PodArrayBuilder.class, __t), true));
    }

    static <T> PodArrayBuilder<T> create(Class<T> __t, MemoryPool pool) {
        return PodArrayBuilder.getFactory(__t).create(pool);
    }

    @FFIFactory
    @CXXHead("basic/ds/arrow_utils.h")
    interface Factory<T> {
        PodArrayBuilder<T> create(MemoryPool pool);
    }
}
