// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.vineyard;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXReference;
import com.alibaba.fastffi.CXXValue;
import com.alibaba.fastffi.FFIFactory;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFINameAlias;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import io.v6d.std.vector;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("vineyard::ResizableArrayBuilder")
@FFIGen
@CXXHead("basic/ds/array.h")
public interface ResizableArrayBuilder<T> extends ArrayBaseBuilder<T>, FFIPointer {
    void push_back(@CXXReference T v);

    long size();

    void reserve(long size);

    void resize(long size);

    void resize(long size, @CXXReference T value);

    boolean empty();

    void shrink_to_fit();

    @CXXReference
    vector<T> payload();

    @CXXValue
    @FFINameAlias("Build")
    Status Build_1(@CXXReference Client client);

    static <T> ResizableArrayBuilder<T> cast(Class<T> __t, final long __foreign_address) {
        try {
            Class<ResizableArrayBuilder<T>> clz = (Class<ResizableArrayBuilder<T>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(ResizableArrayBuilder.class, __t), true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static <T> ResizableArrayBuilder<T> cast(Class<T> __t, final FFIPointer __foreign_pointer) {
        return ResizableArrayBuilder.cast(__t, __foreign_pointer.getAddress());
    }

    static <T> Factory<T> getFactory(Class<T> __t) {
        return FFITypeFactory.getFactory(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(ResizableArrayBuilder.class, __t), true));
    }

    static <T> ResizableArrayBuilder<T> create(Class<T> __t, @CXXReference Client client,
            long size) {
        return ResizableArrayBuilder.getFactory(__t).create(client, size);
    }

    @FFIFactory
    @CXXHead("basic/ds/array.h")
    interface Factory<T> {
        ResizableArrayBuilder<T> create(@CXXReference Client client, long size);
    }
}
