// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.vineyard;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXPointer;
import com.alibaba.fastffi.CXXReference;
import com.alibaba.fastffi.CXXValue;
import com.alibaba.fastffi.FFIExpr;
import com.alibaba.fastffi.FFIFactory;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import io.v6d.arrow.ArrayData;
import io.v6d.arrow.Buffer;
import io.v6d.arrow.DataType;
import io.v6d.std.shared_ptr;
import io.v6d.vineyard.impl.converttoarrowtype.ArrayTypeBool;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("vineyard::BooleanArrayBaseBuilder")
@FFIGen
@CXXHead("basic/ds/arrow.vineyard.h")
public interface BooleanArrayBaseBuilder extends ObjectBuilder, FFIPointer {
    @CXXValue
    @FFITypeAlias("std::shared_ptr<vineyard::Object>")
    shared_ptr<Object> _Seal(@CXXReference Client client);

    @CXXValue
    Status Build(@CXXReference Client client);

    static BooleanArrayBaseBuilder cast(final long __foreign_address) {
        try {
            Class<BooleanArrayBaseBuilder> clz = (Class<BooleanArrayBaseBuilder>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(BooleanArrayBaseBuilder.class, true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static BooleanArrayBaseBuilder cast(final FFIPointer __foreign_pointer) {
        return BooleanArrayBaseBuilder.cast(__foreign_pointer.getAddress());
    }

    static Factory getFactory() {
        return FFITypeFactory.getFactory(FFITypeFactory.getFFITypeName(BooleanArrayBaseBuilder.class, true));
    }

    static BooleanArrayBaseBuilder create(@CXXReference Client client) {
        return BooleanArrayBaseBuilder.getFactory().create(client);
    }

    static BooleanArrayBaseBuilder create(@CXXReference BooleanArray __value) {
        return BooleanArrayBaseBuilder.getFactory().create(__value);
    }

    static BooleanArrayBaseBuilder create(
            @CXXReference @FFITypeAlias("const std::shared_ptr<vineyard::BooleanArray>") shared_ptr<BooleanArray> __value) {
        return BooleanArrayBaseBuilder.getFactory().create(__value);
    }

    @FFIFactory
    @CXXHead("basic/ds/arrow.vineyard.h")
    interface Factory {
        BooleanArrayBaseBuilder create(@CXXReference Client client);

        BooleanArrayBaseBuilder create(@CXXReference BooleanArray __value);

        BooleanArrayBaseBuilder create(
                @CXXReference @FFITypeAlias("const std::shared_ptr<vineyard::BooleanArray>") shared_ptr<BooleanArray> __value);
    }

    @FFITypeAlias("vineyard::BooleanArrayBaseBuilder::ArrayType")
    @FFIGen
    @CXXHead("basic/ds/arrow.vineyard.h")
    interface ArrayType extends CXXPointer {
        @FFIExpr("{0}")
        ArrayTypeBool get();

        boolean Value(long i);

        boolean GetView(long i);

        long false_count();

        long true_count();

        @CXXValue
        io.v6d.arrow.BooleanArray.IteratorType begin();

        @CXXValue
        io.v6d.arrow.BooleanArray.IteratorType end();

        static ArrayType cast(final long __foreign_address) {
            try {
                Class<ArrayType> clz = (Class<ArrayType>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(ArrayType.class, true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static ArrayType cast(final FFIPointer __foreign_pointer) {
            return ArrayType.cast(__foreign_pointer.getAddress());
        }

        static Factory getFactory() {
            return FFITypeFactory.getFactory(FFITypeFactory.getFFITypeName(ArrayType.class, true));
        }

        static ArrayType create(
                @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::ArrayData>") shared_ptr<ArrayData> data) {
            return ArrayType.getFactory().create(data);
        }

        static ArrayType create(long length,
                @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::Buffer>") shared_ptr<Buffer> data,
                @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::Buffer>") shared_ptr<Buffer> null_bitmap,
                long null_count, long offset) {
            return ArrayType.getFactory().create(length, data, null_bitmap, null_count, offset);
        }

        static ArrayType create(
                @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::DataType>") shared_ptr<DataType> arg0,
                long arg1,
                @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::Buffer>") shared_ptr<Buffer> arg2,
                @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::Buffer>") shared_ptr<Buffer> arg3,
                long arg4, long arg5) {
            return ArrayType.getFactory().create(arg0, arg1, arg2, arg3, arg4, arg5);
        }

        @FFIFactory
        @CXXHead("basic/ds/arrow.vineyard.h")
        interface Factory {
            ArrayType create(
                    @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::ArrayData>") shared_ptr<ArrayData> data);

            ArrayType create(long length,
                    @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::Buffer>") shared_ptr<Buffer> data,
                    @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::Buffer>") shared_ptr<Buffer> null_bitmap,
                    long null_count, long offset);

            ArrayType create(
                    @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::DataType>") shared_ptr<DataType> arg0,
                    long arg1,
                    @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::Buffer>") shared_ptr<Buffer> arg2,
                    @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::Buffer>") shared_ptr<Buffer> arg3,
                    long arg4, long arg5);
        }
    }
}
