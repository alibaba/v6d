// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.arrow;

import com.alibaba.fastffi.CXXEnum;
import com.alibaba.fastffi.CXXEnumMap;
import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFIGetter;
import com.alibaba.fastffi.FFILibrary;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import com.alibaba.fastffi.FFITypeRefiner;
import io.v6d.std.CInt;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("arrow::Type")
@FFIGen
@CXXHead(
        system = "arrow/type_fwd.h"
)
public interface Type extends FFIPointer {
    static Type cast(final long __foreign_address) {
        try {
            Class<Type> clz = (Class<Type>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(Type.class, true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static Type cast(final FFIPointer __foreign_pointer) {
        return Type.cast(__foreign_pointer.getAddress());
    }

    @FFITypeAlias("arrow::Type::type")
    @FFITypeRefiner("io.v6d.arrow.Type.type.get")
    @CXXHead(
            system = "arrow/type_fwd.h"
    )
    enum type implements CXXEnum {
        NA(Library.INSTANCE.NA()),

        BOOL(Library.INSTANCE.BOOL()),

        UINT8(Library.INSTANCE.UINT8()),

        INT8(Library.INSTANCE.INT8()),

        UINT16(Library.INSTANCE.UINT16()),

        INT16(Library.INSTANCE.INT16()),

        UINT32(Library.INSTANCE.UINT32()),

        INT32(Library.INSTANCE.INT32()),

        UINT64(Library.INSTANCE.UINT64()),

        INT64(Library.INSTANCE.INT64()),

        HALF_FLOAT(Library.INSTANCE.HALF_FLOAT()),

        FLOAT(Library.INSTANCE.FLOAT()),

        DOUBLE(Library.INSTANCE.DOUBLE()),

        STRING(Library.INSTANCE.STRING()),

        BINARY(Library.INSTANCE.BINARY()),

        FIXED_SIZE_BINARY(Library.INSTANCE.FIXED_SIZE_BINARY()),

        DATE32(Library.INSTANCE.DATE32()),

        DATE64(Library.INSTANCE.DATE64()),

        TIMESTAMP(Library.INSTANCE.TIMESTAMP()),

        TIME32(Library.INSTANCE.TIME32()),

        TIME64(Library.INSTANCE.TIME64()),

        INTERVAL_MONTHS(Library.INSTANCE.INTERVAL_MONTHS()),

        INTERVAL_DAY_TIME(Library.INSTANCE.INTERVAL_DAY_TIME()),

        DECIMAL128(Library.INSTANCE.DECIMAL128()),

        DECIMAL(Library.INSTANCE.DECIMAL()),

        DECIMAL256(Library.INSTANCE.DECIMAL256()),

        LIST(Library.INSTANCE.LIST()),

        STRUCT(Library.INSTANCE.STRUCT()),

        SPARSE_UNION(Library.INSTANCE.SPARSE_UNION()),

        DENSE_UNION(Library.INSTANCE.DENSE_UNION()),

        DICTIONARY(Library.INSTANCE.DICTIONARY()),

        MAP(Library.INSTANCE.MAP()),

        EXTENSION(Library.INSTANCE.EXTENSION()),

        FIXED_SIZE_LIST(Library.INSTANCE.FIXED_SIZE_LIST()),

        DURATION(Library.INSTANCE.DURATION()),

        LARGE_STRING(Library.INSTANCE.LARGE_STRING()),

        LARGE_BINARY(Library.INSTANCE.LARGE_BINARY()),

        LARGE_LIST(Library.INSTANCE.LARGE_LIST()),

        INTERVAL_MONTH_DAY_NANO(Library.INSTANCE.INTERVAL_MONTH_DAY_NANO()),

        MAX_ID(Library.INSTANCE.MAX_ID());

        private static final CXXEnumMap<type> $map = new CXXEnumMap<>(values());

        int $value;

        type(int value) {
            $value = value;
        }

        type(CInt value) {
            $value = value.get();
        }

        public static type get(int value) {
            return $map.get(value);
        }

        public static type get(CInt value) {
            return $map.get(value.get());
        }

        public int getValue() {
            return $value;
        }

        public static type cast(final long __foreign_address) {
            try {
                Class<type> clz = (Class<type>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(type.class, true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        public static type cast(final FFIPointer __foreign_pointer) {
            return type.cast(__foreign_pointer.getAddress());
        }

        @FFIGen
        @FFILibrary(
                value = "arrow::Type::type",
                namespace = "arrow::Type::type"
        )
        @CXXHead(
                system = "arrow/type_fwd.h"
        )
        public interface Library {
            Library INSTANCE = FFITypeFactory.getLibrary(Library.class);

            @FFIGetter
            int NA();

            @FFIGetter
            int BOOL();

            @FFIGetter
            int UINT8();

            @FFIGetter
            int INT8();

            @FFIGetter
            int UINT16();

            @FFIGetter
            int INT16();

            @FFIGetter
            int UINT32();

            @FFIGetter
            int INT32();

            @FFIGetter
            int UINT64();

            @FFIGetter
            int INT64();

            @FFIGetter
            int HALF_FLOAT();

            @FFIGetter
            int FLOAT();

            @FFIGetter
            int DOUBLE();

            @FFIGetter
            int STRING();

            @FFIGetter
            int BINARY();

            @FFIGetter
            int FIXED_SIZE_BINARY();

            @FFIGetter
            int DATE32();

            @FFIGetter
            int DATE64();

            @FFIGetter
            int TIMESTAMP();

            @FFIGetter
            int TIME32();

            @FFIGetter
            int TIME64();

            @FFIGetter
            int INTERVAL_MONTHS();

            @FFIGetter
            int INTERVAL_DAY_TIME();

            @FFIGetter
            int DECIMAL128();

            @FFIGetter
            int DECIMAL();

            @FFIGetter
            int DECIMAL256();

            @FFIGetter
            int LIST();

            @FFIGetter
            int STRUCT();

            @FFIGetter
            int SPARSE_UNION();

            @FFIGetter
            int DENSE_UNION();

            @FFIGetter
            int DICTIONARY();

            @FFIGetter
            int MAP();

            @FFIGetter
            int EXTENSION();

            @FFIGetter
            int FIXED_SIZE_LIST();

            @FFIGetter
            int DURATION();

            @FFIGetter
            int LARGE_STRING();

            @FFIGetter
            int LARGE_BINARY();

            @FFIGetter
            int LARGE_LIST();

            @FFIGetter
            int INTERVAL_MONTH_DAY_NANO();

            @FFIGetter
            int MAX_ID();
        }
    }
}
