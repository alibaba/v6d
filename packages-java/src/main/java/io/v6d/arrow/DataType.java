// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.arrow;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXPointer;
import com.alibaba.fastffi.CXXReference;
import com.alibaba.fastffi.CXXValue;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import io.v6d.arrow.detail.Fingerprintable;
import io.v6d.std.shared_ptr;
import io.v6d.std.vector;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("arrow::DataType")
@FFIGen
@CXXHead(
        system = "arrow/type.h"
)
public interface DataType extends Fingerprintable, CXXPointer {
    boolean Equals(@CXXReference DataType other, boolean check_metadata);

    boolean Equals(
            @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::DataType>") shared_ptr<DataType> other);

    @CXXReference
    @FFITypeAlias("const std::shared_ptr<arrow::Field>")
    shared_ptr<Field> field(int i);

    @CXXReference
    @FFITypeAlias("const std::vector<std::shared_ptr<arrow::Field>>")
    vector<shared_ptr<Field>> fields();

    int num_fields();

    @CXXValue
    Status Accept(TypeVisitor visitor);

    long Hash();

    @CXXValue
    @FFITypeAlias("arrow::Type::type")
    Type.type id();

    static DataType cast(final long __foreign_address) {
        try {
            Class<DataType> clz = (Class<DataType>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(DataType.class, true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static DataType cast(final FFIPointer __foreign_pointer) {
        return DataType.cast(__foreign_pointer.getAddress());
    }
}
