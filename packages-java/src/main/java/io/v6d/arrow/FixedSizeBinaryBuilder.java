// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.arrow;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXPointer;
import com.alibaba.fastffi.CXXReference;
import com.alibaba.fastffi.CXXValue;
import com.alibaba.fastffi.FFIExpr;
import com.alibaba.fastffi.FFIFactory;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFILibrary;
import com.alibaba.fastffi.FFINameAlias;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import io.v6d.std.CChar;
import io.v6d.std.CUnsignedChar;
import io.v6d.std.shared_ptr;
import io.v6d.std.string;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("arrow::FixedSizeBinaryBuilder")
@FFIGen
@CXXHead(
        system = "arrow/array/builder_binary.h"
)
public interface FixedSizeBinaryBuilder extends ArrayBuilder, FFIPointer {
    @CXXValue
    Status Append(CUnsignedChar value);

    @CXXValue
    Status Append(CChar value);

    @CXXValue
    Status Append(@CXXReference string s);

    @CXXValue
    Status Append(@CXXReference Buffer s);

    @CXXValue
    Status Append(
            @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::Buffer>") shared_ptr<Buffer> s);

    @CXXValue
    Status AppendValues(CUnsignedChar data, long length, CUnsignedChar valid_bytes);

    @CXXValue
    Status AppendValues(CUnsignedChar data, long length, CUnsignedChar validity,
            long bitmap_offset);

    @CXXValue
    Status AppendNull();

    @CXXValue
    Status AppendNulls(long length);

    @CXXValue
    Status AppendEmptyValue();

    @CXXValue
    Status AppendEmptyValues(long length);

    @CXXValue
    @FFINameAlias("AppendArraySlice")
    Status AppendArraySlice_1(@CXXReference ArrayData array, long offset, long length);

    void UnsafeAppend(CUnsignedChar value);

    void UnsafeAppend(CChar value);

    void UnsafeAppend(@CXXReference Buffer s);

    void UnsafeAppend(
            @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::Buffer>") shared_ptr<Buffer> s);

    void UnsafeAppendNull();

    @CXXValue
    Status ValidateOverflow(long new_bytes);

    @CXXValue
    Status ReserveData(long elements);

    @FFINameAlias("Reset")
    void Reset_1();

    @CXXValue
    @FFINameAlias("Resize")
    Status Resize_1(long capacity);

    @CXXValue
    Status FinishInternal(
            @FFITypeAlias("std::shared_ptr<arrow::ArrayData>") shared_ptr<ArrayData> out);

    @CXXValue
    @FFINameAlias("Finish")
    Status Finish_1(
            @FFITypeAlias("std::shared_ptr<arrow::FixedSizeBinaryArray>") shared_ptr<FixedSizeBinaryArray> out);

    long value_data_length();

    int byte_width();

    CUnsignedChar GetValue(long i);

    @CXXValue
    @FFITypeAlias("std::shared_ptr<arrow::DataType>")
    shared_ptr<DataType> type();

    static FixedSizeBinaryBuilder cast(final long __foreign_address) {
        try {
            Class<FixedSizeBinaryBuilder> clz = (Class<FixedSizeBinaryBuilder>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FixedSizeBinaryBuilder.class, true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static FixedSizeBinaryBuilder cast(final FFIPointer __foreign_pointer) {
        return FixedSizeBinaryBuilder.cast(__foreign_pointer.getAddress());
    }

    static Factory getFactory() {
        return FFITypeFactory.getFactory(FFITypeFactory.getFFITypeName(FixedSizeBinaryBuilder.class, true));
    }

    static FixedSizeBinaryBuilder create(
            @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::DataType>") shared_ptr<DataType> type,
            MemoryPool pool) {
        return FixedSizeBinaryBuilder.getFactory().create(type, pool);
    }

    @FFIFactory
    @CXXHead(
            system = "arrow/array/builder_binary.h"
    )
    interface Factory {
        FixedSizeBinaryBuilder create(
                @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::DataType>") shared_ptr<DataType> type,
                MemoryPool pool);
    }

    @FFIGen
    @FFILibrary(
            value = "arrow::FixedSizeBinaryBuilder",
            namespace = "arrow::FixedSizeBinaryBuilder"
    )
    @CXXHead(
            system = "arrow/array/builder_binary.h"
    )
    interface Library {
        Library INSTANCE = FFITypeFactory.getLibrary(Library.class);

        long memory_limit();
    }

    @FFITypeAlias("arrow::FixedSizeBinaryBuilder::TypeClass")
    @FFIGen
    @CXXHead(
            system = "arrow/array/builder_binary.h"
    )
    interface TypeClass extends CXXPointer {
        @FFIExpr("{0}")
        FixedSizeBinaryType get();

        @CXXValue
        string ToString();

        @CXXValue
        string name();

        @CXXValue
        DataTypeLayout layout();

        int byte_width();

        int bit_width();

        static TypeClass cast(final long __foreign_address) {
            try {
                Class<TypeClass> clz = (Class<TypeClass>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(TypeClass.class, true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static TypeClass cast(final FFIPointer __foreign_pointer) {
            return TypeClass.cast(__foreign_pointer.getAddress());
        }

        static Factory getFactory() {
            return FFITypeFactory.getFactory(FFITypeFactory.getFFITypeName(TypeClass.class, true));
        }

        static TypeClass create(int byte_width) {
            return TypeClass.getFactory().create(byte_width);
        }

        static TypeClass create(int byte_width,
                @CXXValue @FFITypeAlias("arrow::Type::type") Type.type override_type_id) {
            return TypeClass.getFactory().create(byte_width, override_type_id);
        }

        @FFIFactory
        @CXXHead(
                system = "arrow/array/builder_binary.h"
        )
        interface Factory {
            TypeClass create(int byte_width);

            TypeClass create(int byte_width,
                    @CXXValue @FFITypeAlias("arrow::Type::type") Type.type override_type_id);
        }

        @FFIGen
        @FFILibrary(
                value = "arrow::FixedSizeBinaryType",
                namespace = "arrow::FixedSizeBinaryType"
        )
        @CXXHead(
                system = "arrow/array/builder_binary.h"
        )
        interface Library {
            Library INSTANCE = FFITypeFactory.getLibrary(Library.class);

            CChar type_name();

            @CXXValue
            @FFITypeAlias("arrow::Result<std::shared_ptr<arrow::DataType>>")
            Result<shared_ptr<DataType>> Make(int byte_width);
        }
    }
}
