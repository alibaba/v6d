// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.arrow;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXPointer;
import com.alibaba.fastffi.CXXReference;
import com.alibaba.fastffi.CXXValue;
import com.alibaba.fastffi.FFIExpr;
import com.alibaba.fastffi.FFIFactory;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFILibrary;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import io.v6d.arrow.stl.ArrayIterator;
import io.v6d.std.CChar;
import io.v6d.std.shared_ptr;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("arrow::BooleanArray")
@FFIGen
@CXXHead(
        system = "arrow/array/array_primitive.h"
)
public interface BooleanArray extends PrimitiveArray, FFIPointer {
    boolean Value(long i);

    boolean GetView(long i);

    long false_count();

    long true_count();

    @CXXValue
    IteratorType begin();

    @CXXValue
    IteratorType end();

    static BooleanArray cast(final long __foreign_address) {
        try {
            Class<BooleanArray> clz = (Class<BooleanArray>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(BooleanArray.class, true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static BooleanArray cast(final FFIPointer __foreign_pointer) {
        return BooleanArray.cast(__foreign_pointer.getAddress());
    }

    static Factory getFactory() {
        return FFITypeFactory.getFactory(FFITypeFactory.getFFITypeName(BooleanArray.class, true));
    }

    static BooleanArray create(
            @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::ArrayData>") shared_ptr<ArrayData> data) {
        return BooleanArray.getFactory().create(data);
    }

    static BooleanArray create(long length,
            @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::Buffer>") shared_ptr<Buffer> data,
            @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::Buffer>") shared_ptr<Buffer> null_bitmap,
            long null_count, long offset) {
        return BooleanArray.getFactory().create(length, data, null_bitmap, null_count, offset);
    }

    @FFIFactory
    @CXXHead(
            system = "arrow/array/array_primitive.h"
    )
    interface Factory {
        BooleanArray create(
                @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::ArrayData>") shared_ptr<ArrayData> data);

        BooleanArray create(long length,
                @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::Buffer>") shared_ptr<Buffer> data,
                @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::Buffer>") shared_ptr<Buffer> null_bitmap,
                long null_count, long offset);
    }

    @FFITypeAlias("arrow::BooleanArray::IteratorType")
    @FFIGen
    @CXXHead(
            system = "arrow/array/array_primitive.h"
    )
    interface IteratorType extends CXXPointer {
        @FFIExpr("{0}")
        ArrayIterator<BooleanArray> get();

        long index();

        static IteratorType cast(final long __foreign_address) {
            try {
                Class<IteratorType> clz = (Class<IteratorType>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(IteratorType.class, true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static IteratorType cast(final FFIPointer __foreign_pointer) {
            return IteratorType.cast(__foreign_pointer.getAddress());
        }

        static Factory getFactory() {
            return FFITypeFactory.getFactory(FFITypeFactory.getFFITypeName(IteratorType.class, true));
        }

        static IteratorType create() {
            return IteratorType.getFactory().create();
        }

        static IteratorType create(@CXXReference BooleanArray array, long index) {
            return IteratorType.getFactory().create(array, index);
        }

        @FFIFactory
        @CXXHead(
                system = "arrow/array/array_primitive.h"
        )
        interface Factory {
            IteratorType create();

            IteratorType create(@CXXReference BooleanArray array, long index);
        }
    }

    @FFITypeAlias("arrow::BooleanArray::TypeClass")
    @FFIGen
    @CXXHead(
            system = "arrow/array/array_primitive.h"
    )
    interface TypeClass extends CXXPointer {
        @FFIExpr("{0}")
        BooleanType get();

        int bit_width();

        @CXXValue
        DataTypeLayout layout();

        static TypeClass cast(final long __foreign_address) {
            try {
                Class<TypeClass> clz = (Class<TypeClass>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(TypeClass.class, true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static TypeClass cast(final FFIPointer __foreign_pointer) {
            return TypeClass.cast(__foreign_pointer.getAddress());
        }

        @FFIGen
        @FFILibrary(
                value = "arrow::BooleanType",
                namespace = "arrow::BooleanType"
        )
        @CXXHead(
                system = "arrow/array/array_primitive.h"
        )
        interface Library {
            Library INSTANCE = FFITypeFactory.getLibrary(Library.class);

            CChar type_name();
        }
    }
}
