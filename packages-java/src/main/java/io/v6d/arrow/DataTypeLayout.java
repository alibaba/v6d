// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.arrow;

import com.alibaba.fastffi.CXXEnum;
import com.alibaba.fastffi.CXXEnumMap;
import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXReference;
import com.alibaba.fastffi.CXXValue;
import com.alibaba.fastffi.FFIFactory;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFIGetter;
import com.alibaba.fastffi.FFILibrary;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import com.alibaba.fastffi.FFITypeRefiner;
import io.v6d.std.CInt;
import io.v6d.std.vector;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("arrow::DataTypeLayout")
@FFIGen
@CXXHead(
        system = "arrow/type.h"
)
public interface DataTypeLayout extends FFIPointer {
    @FFIGetter
    @CXXReference
    @FFITypeAlias("std::vector<arrow::DataTypeLayout::BufferSpec>")
    vector<BufferSpec> buffers();

    @FFIGetter
    boolean has_dictionary();

    static DataTypeLayout cast(final long __foreign_address) {
        try {
            Class<DataTypeLayout> clz = (Class<DataTypeLayout>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(DataTypeLayout.class, true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static DataTypeLayout cast(final FFIPointer __foreign_pointer) {
        return DataTypeLayout.cast(__foreign_pointer.getAddress());
    }

    static Factory getFactory() {
        return FFITypeFactory.getFactory(FFITypeFactory.getFFITypeName(DataTypeLayout.class, true));
    }

    static DataTypeLayout create(
            @CXXValue @FFITypeAlias("std::vector<arrow::DataTypeLayout::BufferSpec>") vector<BufferSpec> v) {
        return DataTypeLayout.getFactory().create(v);
    }

    @FFIFactory
    @CXXHead(
            system = "arrow/type.h"
    )
    interface Factory {
        DataTypeLayout create(
                @CXXValue @FFITypeAlias("std::vector<arrow::DataTypeLayout::BufferSpec>") vector<BufferSpec> v);
    }

    @FFIGen
    @FFILibrary(
            value = "arrow::DataTypeLayout",
            namespace = "arrow::DataTypeLayout"
    )
    @CXXHead(
            system = "arrow/type.h"
    )
    interface Library {
        Library INSTANCE = FFITypeFactory.getLibrary(Library.class);

        @CXXValue
        BufferSpec FixedWidth(long w);

        @CXXValue
        BufferSpec VariableWidth();

        @CXXValue
        BufferSpec Bitmap();

        @CXXValue
        BufferSpec AlwaysNull();
    }

    @FFITypeAlias("arrow::DataTypeLayout::BufferSpec")
    @FFIGen
    @CXXHead(
            system = "arrow/type.h"
    )
    interface BufferSpec extends FFIPointer {
        @FFIGetter
        @CXXValue
        @FFITypeAlias("arrow::DataTypeLayout::BufferKind")
        BufferKind kind();

        @FFIGetter
        long byte_width();

        static BufferSpec cast(final long __foreign_address) {
            try {
                Class<BufferSpec> clz = (Class<BufferSpec>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(BufferSpec.class, true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static BufferSpec cast(final FFIPointer __foreign_pointer) {
            return BufferSpec.cast(__foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("arrow::DataTypeLayout::BufferKind")
    @FFITypeRefiner("io.v6d.arrow.DataTypeLayout.BufferKind.get")
    @CXXHead(
            system = "arrow/type.h"
    )
    enum BufferKind implements CXXEnum {
        FIXED_WIDTH(Library.INSTANCE.FIXED_WIDTH()),

        VARIABLE_WIDTH(Library.INSTANCE.VARIABLE_WIDTH()),

        BITMAP(Library.INSTANCE.BITMAP()),

        ALWAYS_NULL(Library.INSTANCE.ALWAYS_NULL());

        private static final CXXEnumMap<BufferKind> $map = new CXXEnumMap<>(values());

        int $value;

        BufferKind(int value) {
            $value = value;
        }

        BufferKind(CInt value) {
            $value = value.get();
        }

        public static BufferKind get(int value) {
            return $map.get(value);
        }

        public static BufferKind get(CInt value) {
            return $map.get(value.get());
        }

        public int getValue() {
            return $value;
        }

        public static BufferKind cast(final long __foreign_address) {
            try {
                Class<BufferKind> clz = (Class<BufferKind>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(BufferKind.class, true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        public static BufferKind cast(final FFIPointer __foreign_pointer) {
            return BufferKind.cast(__foreign_pointer.getAddress());
        }

        @FFIGen
        @FFILibrary(
                value = "arrow::DataTypeLayout::BufferKind",
                namespace = "arrow::DataTypeLayout::BufferKind"
        )
        @CXXHead(
                system = "arrow/type.h"
        )
        public interface Library {
            Library INSTANCE = FFITypeFactory.getLibrary(Library.class);

            @FFIGetter
            int FIXED_WIDTH();

            @FFIGetter
            int VARIABLE_WIDTH();

            @FFIGetter
            int BITMAP();

            @FFIGetter
            int ALWAYS_NULL();
        }
    }
}
