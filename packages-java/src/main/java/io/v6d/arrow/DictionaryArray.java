// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.arrow;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXPointer;
import com.alibaba.fastffi.CXXReference;
import com.alibaba.fastffi.CXXValue;
import com.alibaba.fastffi.FFIExpr;
import com.alibaba.fastffi.FFIFactory;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFILibrary;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import io.v6d.std.CChar;
import io.v6d.std.CInt;
import io.v6d.std.shared_ptr;
import io.v6d.std.string;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("arrow::DictionaryArray")
@FFIGen
@CXXHead(
        system = "arrow/array/array_dict.h"
)
public interface DictionaryArray extends Array, FFIPointer {
    @CXXValue
    @FFITypeAlias("arrow::Result<std::shared_ptr<arrow::Array>>")
    Result<shared_ptr<Array>> Transpose(
            @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::DataType>") shared_ptr<DataType> type,
            @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::Array>") shared_ptr<Array> dictionary,
            CInt transpose_map, MemoryPool pool);

    boolean CanCompareIndices(@CXXReference DictionaryArray other);

    @CXXValue
    @FFITypeAlias("std::shared_ptr<arrow::Array>")
    shared_ptr<Array> dictionary();

    @CXXValue
    @FFITypeAlias("std::shared_ptr<arrow::Array>")
    shared_ptr<Array> indices();

    long GetValueIndex(long i);

    DictionaryType dict_type();

    static DictionaryArray cast(final long __foreign_address) {
        try {
            Class<DictionaryArray> clz = (Class<DictionaryArray>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(DictionaryArray.class, true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static DictionaryArray cast(final FFIPointer __foreign_pointer) {
        return DictionaryArray.cast(__foreign_pointer.getAddress());
    }

    static Factory getFactory() {
        return FFITypeFactory.getFactory(FFITypeFactory.getFFITypeName(DictionaryArray.class, true));
    }

    static DictionaryArray create(
            @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::ArrayData>") shared_ptr<ArrayData> data) {
        return DictionaryArray.getFactory().create(data);
    }

    static DictionaryArray create(
            @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::DataType>") shared_ptr<DataType> type,
            @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::Array>") shared_ptr<Array> indices,
            @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::Array>") shared_ptr<Array> dictionary) {
        return DictionaryArray.getFactory().create(type, indices, dictionary);
    }

    @FFIFactory
    @CXXHead(
            system = "arrow/array/array_dict.h"
    )
    interface Factory {
        DictionaryArray create(
                @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::ArrayData>") shared_ptr<ArrayData> data);

        DictionaryArray create(
                @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::DataType>") shared_ptr<DataType> type,
                @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::Array>") shared_ptr<Array> indices,
                @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::Array>") shared_ptr<Array> dictionary);
    }

    @FFIGen
    @FFILibrary(
            value = "arrow::DictionaryArray",
            namespace = "arrow::DictionaryArray"
    )
    @CXXHead(
            system = "arrow/array/array_dict.h"
    )
    interface Library {
        Library INSTANCE = FFITypeFactory.getLibrary(Library.class);

        @CXXValue
        @FFITypeAlias("arrow::Result<std::shared_ptr<arrow::Array>>")
        Result<shared_ptr<Array>> FromArrays(
                @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::DataType>") shared_ptr<DataType> type,
                @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::Array>") shared_ptr<Array> indices,
                @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::Array>") shared_ptr<Array> dictionary);

        @CXXValue
        @FFITypeAlias("arrow::Result<std::shared_ptr<arrow::Array>>")
        Result<shared_ptr<Array>> FromArrays(
                @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::Array>") shared_ptr<Array> indices,
                @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::Array>") shared_ptr<Array> dictionary);
    }

    @FFITypeAlias("arrow::DictionaryArray::TypeClass")
    @FFIGen
    @CXXHead(
            system = "arrow/array/array_dict.h"
    )
    interface TypeClass extends CXXPointer {
        @FFIExpr("{0}")
        DictionaryType get();

        @CXXValue
        string ToString();

        @CXXValue
        string name();

        int bit_width();

        @CXXValue
        DataTypeLayout layout();

        @CXXReference
        @FFITypeAlias("const std::shared_ptr<arrow::DataType>")
        shared_ptr<DataType> index_type();

        @CXXReference
        @FFITypeAlias("const std::shared_ptr<arrow::DataType>")
        shared_ptr<DataType> value_type();

        boolean ordered();

        static TypeClass cast(final long __foreign_address) {
            try {
                Class<TypeClass> clz = (Class<TypeClass>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(TypeClass.class, true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static TypeClass cast(final FFIPointer __foreign_pointer) {
            return TypeClass.cast(__foreign_pointer.getAddress());
        }

        static Factory getFactory() {
            return FFITypeFactory.getFactory(FFITypeFactory.getFFITypeName(TypeClass.class, true));
        }

        static TypeClass create(
                @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::DataType>") shared_ptr<DataType> index_type,
                @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::DataType>") shared_ptr<DataType> value_type,
                boolean ordered) {
            return TypeClass.getFactory().create(index_type, value_type, ordered);
        }

        @FFIFactory
        @CXXHead(
                system = "arrow/array/array_dict.h"
        )
        interface Factory {
            TypeClass create(
                    @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::DataType>") shared_ptr<DataType> index_type,
                    @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::DataType>") shared_ptr<DataType> value_type,
                    boolean ordered);
        }

        @FFIGen
        @FFILibrary(
                value = "arrow::DictionaryType",
                namespace = "arrow::DictionaryType"
        )
        @CXXHead(
                system = "arrow/array/array_dict.h"
        )
        interface Library {
            Library INSTANCE = FFITypeFactory.getLibrary(Library.class);

            CChar type_name();

            @CXXValue
            @FFITypeAlias("arrow::Result<std::shared_ptr<arrow::DataType>>")
            Result<shared_ptr<DataType>> Make(
                    @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::DataType>") shared_ptr<DataType> index_type,
                    @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::DataType>") shared_ptr<DataType> value_type,
                    boolean ordered);
        }
    }
}
