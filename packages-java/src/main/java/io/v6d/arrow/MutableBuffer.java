// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.arrow;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXReference;
import com.alibaba.fastffi.CXXValue;
import com.alibaba.fastffi.FFIFactory;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import io.v6d.std.CUnsignedChar;
import io.v6d.std.shared_ptr;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("arrow::MutableBuffer")
@FFIGen
@CXXHead(
        system = "arrow/buffer.h"
)
public interface MutableBuffer extends Buffer, FFIPointer {
    static MutableBuffer cast(final long __foreign_address) {
        try {
            Class<MutableBuffer> clz = (Class<MutableBuffer>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(MutableBuffer.class, true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static MutableBuffer cast(final FFIPointer __foreign_pointer) {
        return MutableBuffer.cast(__foreign_pointer.getAddress());
    }

    static Factory getFactory() {
        return FFITypeFactory.getFactory(FFITypeFactory.getFFITypeName(MutableBuffer.class, true));
    }

    static MutableBuffer create(CUnsignedChar data, long size) {
        return MutableBuffer.getFactory().create(data, size);
    }

    static MutableBuffer create(CUnsignedChar data, long size,
            @CXXValue @FFITypeAlias("std::shared_ptr<arrow::MemoryManager>") shared_ptr<MemoryManager> mm) {
        return MutableBuffer.getFactory().create(data, size, mm);
    }

    static MutableBuffer create(
            @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::Buffer>") shared_ptr<Buffer> parent,
            long offset, long size) {
        return MutableBuffer.getFactory().create(parent, offset, size);
    }

    @FFIFactory
    @CXXHead(
            system = "arrow/buffer.h"
    )
    interface Factory {
        MutableBuffer create(CUnsignedChar data, long size);

        MutableBuffer create(CUnsignedChar data, long size,
                @CXXValue @FFITypeAlias("std::shared_ptr<arrow::MemoryManager>") shared_ptr<MemoryManager> mm);

        MutableBuffer create(
                @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::Buffer>") shared_ptr<Buffer> parent,
                long offset, long size);
    }
}
