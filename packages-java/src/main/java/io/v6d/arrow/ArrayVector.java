// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.arrow;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXPointer;
import com.alibaba.fastffi.CXXReference;
import com.alibaba.fastffi.CXXValue;
import com.alibaba.fastffi.FFIExpr;
import com.alibaba.fastffi.FFIFactory;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFINameAlias;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import io.v6d.std.impl.vector.AllocatorTypeStdSharedPtrArrowArrayStdAllocatorStdSharedPtrArrowArray;
import io.v6d.std.impl.vector.ConstIteratorStdSharedPtrArrowArrayStdAllocatorStdSharedPtrArrowArray;
import io.v6d.std.impl.vector.ConstReferenceStdSharedPtrArrowArrayStdAllocatorStdSharedPtrArrowArray;
import io.v6d.std.impl.vector.ConstReverseIteratorStdSharedPtrArrowArrayStdAllocatorStdSharedPtrArrowArray;
import io.v6d.std.impl.vector.IteratorStdSharedPtrArrowArrayStdAllocatorStdSharedPtrArrowArray;
import io.v6d.std.impl.vector.ReferenceStdSharedPtrArrowArrayStdAllocatorStdSharedPtrArrowArray;
import io.v6d.std.impl.vector.ReverseIteratorStdSharedPtrArrowArrayStdAllocatorStdSharedPtrArrowArray;
import io.v6d.std.impl.vector.ValueTypeStdSharedPtrArrowArrayStdAllocatorStdSharedPtrArrowArray;
import io.v6d.std.initializer_list;
import io.v6d.std.shared_ptr;
import io.v6d.std.vector;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("arrow::ArrayVector")
@FFIGen
@CXXHead(
        system = "arrow/type_fwd.h"
)
public interface ArrayVector extends CXXPointer {
    @FFIExpr("{0}")
    vector<shared_ptr<Array>> get();

    void assign(long __n,
            @CXXValue ConstReferenceStdSharedPtrArrowArrayStdAllocatorStdSharedPtrArrowArray __u);

    void assign(
            @CXXValue @FFITypeAlias("std::initializer_list<std::vector<std::shared_ptr<arrow::Array>, std::allocator<std::shared_ptr<arrow::Array>>>::value_type>") initializer_list<ValueTypeStdSharedPtrArrowArrayStdAllocatorStdSharedPtrArrowArray> __il);

    @CXXValue
    AllocatorTypeStdSharedPtrArrowArrayStdAllocatorStdSharedPtrArrowArray get_allocator();

    @CXXValue
    IteratorStdSharedPtrArrowArrayStdAllocatorStdSharedPtrArrowArray begin();

    @CXXValue
    @FFINameAlias("begin")
    ConstIteratorStdSharedPtrArrowArrayStdAllocatorStdSharedPtrArrowArray begin_1();

    @CXXValue
    IteratorStdSharedPtrArrowArrayStdAllocatorStdSharedPtrArrowArray end();

    @CXXValue
    @FFINameAlias("end")
    ConstIteratorStdSharedPtrArrowArrayStdAllocatorStdSharedPtrArrowArray end_1();

    @CXXValue
    ReverseIteratorStdSharedPtrArrowArrayStdAllocatorStdSharedPtrArrowArray rbegin();

    @CXXValue
    @FFINameAlias("rbegin")
    ConstReverseIteratorStdSharedPtrArrowArrayStdAllocatorStdSharedPtrArrowArray rbegin_1();

    @CXXValue
    ReverseIteratorStdSharedPtrArrowArrayStdAllocatorStdSharedPtrArrowArray rend();

    @CXXValue
    @FFINameAlias("rend")
    ConstReverseIteratorStdSharedPtrArrowArrayStdAllocatorStdSharedPtrArrowArray rend_1();

    @CXXValue
    ConstIteratorStdSharedPtrArrowArrayStdAllocatorStdSharedPtrArrowArray cbegin();

    @CXXValue
    ConstIteratorStdSharedPtrArrowArrayStdAllocatorStdSharedPtrArrowArray cend();

    @CXXValue
    ConstReverseIteratorStdSharedPtrArrowArrayStdAllocatorStdSharedPtrArrowArray crbegin();

    @CXXValue
    ConstReverseIteratorStdSharedPtrArrowArrayStdAllocatorStdSharedPtrArrowArray crend();

    long size();

    long capacity();

    boolean empty();

    long max_size();

    void reserve(long __n);

    void shrink_to_fit();

    @CXXValue
    ReferenceStdSharedPtrArrowArrayStdAllocatorStdSharedPtrArrowArray at(long __n);

    @CXXValue
    @FFINameAlias("at")
    ConstReferenceStdSharedPtrArrowArrayStdAllocatorStdSharedPtrArrowArray at_1(long __n);

    @CXXValue
    ReferenceStdSharedPtrArrowArrayStdAllocatorStdSharedPtrArrowArray front();

    @CXXValue
    @FFINameAlias("front")
    ConstReferenceStdSharedPtrArrowArrayStdAllocatorStdSharedPtrArrowArray front_1();

    @CXXValue
    ReferenceStdSharedPtrArrowArrayStdAllocatorStdSharedPtrArrowArray back();

    @CXXValue
    @FFINameAlias("back")
    ConstReferenceStdSharedPtrArrowArrayStdAllocatorStdSharedPtrArrowArray back_1();

    ValueTypeStdSharedPtrArrowArrayStdAllocatorStdSharedPtrArrowArray data();

    @FFINameAlias("data")
    ValueTypeStdSharedPtrArrowArrayStdAllocatorStdSharedPtrArrowArray data_1();

    void push_back(
            @CXXValue ConstReferenceStdSharedPtrArrowArrayStdAllocatorStdSharedPtrArrowArray __x);

    void pop_back();

    @CXXValue
    IteratorStdSharedPtrArrowArrayStdAllocatorStdSharedPtrArrowArray insert(
            @CXXValue ConstIteratorStdSharedPtrArrowArrayStdAllocatorStdSharedPtrArrowArray __position,
            @CXXValue ConstReferenceStdSharedPtrArrowArrayStdAllocatorStdSharedPtrArrowArray __x);

    @CXXValue
    IteratorStdSharedPtrArrowArrayStdAllocatorStdSharedPtrArrowArray insert(
            @CXXValue ConstIteratorStdSharedPtrArrowArrayStdAllocatorStdSharedPtrArrowArray __position,
            long __n,
            @CXXValue ConstReferenceStdSharedPtrArrowArrayStdAllocatorStdSharedPtrArrowArray __x);

    @CXXValue
    IteratorStdSharedPtrArrowArrayStdAllocatorStdSharedPtrArrowArray insert(
            @CXXValue ConstIteratorStdSharedPtrArrowArrayStdAllocatorStdSharedPtrArrowArray __position,
            @CXXValue @FFITypeAlias("std::initializer_list<std::vector<std::shared_ptr<arrow::Array>, std::allocator<std::shared_ptr<arrow::Array>>>::value_type>") initializer_list<ValueTypeStdSharedPtrArrowArrayStdAllocatorStdSharedPtrArrowArray> __il);

    @CXXValue
    IteratorStdSharedPtrArrowArrayStdAllocatorStdSharedPtrArrowArray erase(
            @CXXValue ConstIteratorStdSharedPtrArrowArrayStdAllocatorStdSharedPtrArrowArray __position);

    @CXXValue
    IteratorStdSharedPtrArrowArrayStdAllocatorStdSharedPtrArrowArray erase(
            @CXXValue ConstIteratorStdSharedPtrArrowArrayStdAllocatorStdSharedPtrArrowArray __first,
            @CXXValue ConstIteratorStdSharedPtrArrowArrayStdAllocatorStdSharedPtrArrowArray __last);

    void clear();

    void resize(long __sz);

    void resize(long __sz,
            @CXXValue ConstReferenceStdSharedPtrArrowArrayStdAllocatorStdSharedPtrArrowArray __x);

    boolean __invariants();

    static ArrayVector cast(final long __foreign_address) {
        try {
            Class<ArrayVector> clz = (Class<ArrayVector>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(ArrayVector.class, true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static ArrayVector cast(final FFIPointer __foreign_pointer) {
        return ArrayVector.cast(__foreign_pointer.getAddress());
    }

    static Factory getFactory() {
        return FFITypeFactory.getFactory(FFITypeFactory.getFFITypeName(ArrayVector.class, true));
    }

    static ArrayVector create() {
        return ArrayVector.getFactory().create();
    }

    static ArrayVector create(
            @CXXReference AllocatorTypeStdSharedPtrArrowArrayStdAllocatorStdSharedPtrArrowArray __a) {
        return ArrayVector.getFactory().create(__a);
    }

    static ArrayVector create(long __n) {
        return ArrayVector.getFactory().create(__n);
    }

    static ArrayVector create(long __n,
            @CXXReference AllocatorTypeStdSharedPtrArrowArrayStdAllocatorStdSharedPtrArrowArray __a) {
        return ArrayVector.getFactory().create(__n, __a);
    }

    static ArrayVector create(long __n,
            @CXXReference ValueTypeStdSharedPtrArrowArrayStdAllocatorStdSharedPtrArrowArray __x) {
        return ArrayVector.getFactory().create(__n, __x);
    }

    static ArrayVector create(long __n,
            @CXXReference ValueTypeStdSharedPtrArrowArrayStdAllocatorStdSharedPtrArrowArray __x,
            @CXXReference AllocatorTypeStdSharedPtrArrowArrayStdAllocatorStdSharedPtrArrowArray __a) {
        return ArrayVector.getFactory().create(__n, __x, __a);
    }

    static ArrayVector create(
            @CXXValue @FFITypeAlias("std::initializer_list<std::vector<std::shared_ptr<arrow::Array>, std::allocator<std::shared_ptr<arrow::Array>>>::value_type>") initializer_list<ValueTypeStdSharedPtrArrowArrayStdAllocatorStdSharedPtrArrowArray> __il) {
        return ArrayVector.getFactory().create(__il);
    }

    static ArrayVector create(
            @CXXValue @FFITypeAlias("std::initializer_list<std::vector<std::shared_ptr<arrow::Array>, std::allocator<std::shared_ptr<arrow::Array>>>::value_type>") initializer_list<ValueTypeStdSharedPtrArrowArrayStdAllocatorStdSharedPtrArrowArray> __il,
            @CXXReference AllocatorTypeStdSharedPtrArrowArrayStdAllocatorStdSharedPtrArrowArray __a) {
        return ArrayVector.getFactory().create(__il, __a);
    }

    @FFIFactory
    @CXXHead(
            system = "arrow/type_fwd.h"
    )
    interface Factory {
        ArrayVector create();

        ArrayVector create(
                @CXXReference AllocatorTypeStdSharedPtrArrowArrayStdAllocatorStdSharedPtrArrowArray __a);

        ArrayVector create(long __n);

        ArrayVector create(long __n,
                @CXXReference AllocatorTypeStdSharedPtrArrowArrayStdAllocatorStdSharedPtrArrowArray __a);

        ArrayVector create(long __n,
                @CXXReference ValueTypeStdSharedPtrArrowArrayStdAllocatorStdSharedPtrArrowArray __x);

        ArrayVector create(long __n,
                @CXXReference ValueTypeStdSharedPtrArrowArrayStdAllocatorStdSharedPtrArrowArray __x,
                @CXXReference AllocatorTypeStdSharedPtrArrowArrayStdAllocatorStdSharedPtrArrowArray __a);

        ArrayVector create(
                @CXXValue @FFITypeAlias("std::initializer_list<std::vector<std::shared_ptr<arrow::Array>, std::allocator<std::shared_ptr<arrow::Array>>>::value_type>") initializer_list<ValueTypeStdSharedPtrArrowArrayStdAllocatorStdSharedPtrArrowArray> __il);

        ArrayVector create(
                @CXXValue @FFITypeAlias("std::initializer_list<std::vector<std::shared_ptr<arrow::Array>, std::allocator<std::shared_ptr<arrow::Array>>>::value_type>") initializer_list<ValueTypeStdSharedPtrArrowArrayStdAllocatorStdSharedPtrArrowArray> __il,
                @CXXReference AllocatorTypeStdSharedPtrArrowArrayStdAllocatorStdSharedPtrArrowArray __a);
    }
}
