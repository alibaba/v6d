// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.arrow;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXPointer;
import com.alibaba.fastffi.CXXReference;
import com.alibaba.fastffi.CXXValue;
import com.alibaba.fastffi.FFIFactory;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFILibrary;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import io.v6d.arrow.util.EqualityComparable;
import io.v6d.arrow.util.ToStringOstreamable;
import io.v6d.std.shared_ptr;
import io.v6d.std.string;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("arrow::Status")
@FFIGen
@CXXHead(
        system = "arrow/status.h"
)
public interface Status extends EqualityComparable<Status>, ToStringOstreamable<Status>, CXXPointer {
    boolean Equals(@CXXReference Status s);

    boolean ok();

    boolean IsOutOfMemory();

    boolean IsKeyError();

    boolean IsInvalid();

    boolean IsCancelled();

    boolean IsIOError();

    boolean IsCapacityError();

    boolean IsIndexError();

    boolean IsTypeError();

    boolean IsUnknownError();

    boolean IsNotImplemented();

    boolean IsSerializationError();

    boolean IsRError();

    boolean IsCodeGenError();

    boolean IsExpressionValidationError();

    boolean IsExecutionError();

    boolean IsAlreadyExists();

    @CXXValue
    string ToString();

    @CXXValue
    string CodeAsString();

    @CXXValue
    @FFITypeAlias("arrow::StatusCode")
    StatusCode code();

    @CXXReference
    string message();

    @CXXReference
    @FFITypeAlias("const std::shared_ptr<arrow::StatusDetail>")
    shared_ptr<StatusDetail> detail();

    @CXXValue
    Status WithDetail(
            @CXXValue @FFITypeAlias("std::shared_ptr<arrow::StatusDetail>") shared_ptr<StatusDetail> new_detail);

    void Abort();

    void Abort(@CXXReference string message);

    static Status cast(final long __foreign_address) {
        try {
            Class<Status> clz = (Class<Status>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(Status.class, true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static Status cast(final FFIPointer __foreign_pointer) {
        return Status.cast(__foreign_pointer.getAddress());
    }

    static Factory getFactory() {
        return FFITypeFactory.getFactory(FFITypeFactory.getFFITypeName(Status.class, true));
    }

    static Status create() {
        return Status.getFactory().create();
    }

    static Status create(@CXXValue @FFITypeAlias("arrow::StatusCode") StatusCode code,
            @CXXReference string msg) {
        return Status.getFactory().create(code, msg);
    }

    static Status create(@CXXValue @FFITypeAlias("arrow::StatusCode") StatusCode code,
            @CXXValue string msg,
            @CXXValue @FFITypeAlias("std::shared_ptr<arrow::StatusDetail>") shared_ptr<StatusDetail> detail) {
        return Status.getFactory().create(code, msg, detail);
    }

    static Status create(@CXXReference Status s) {
        return Status.getFactory().create(s);
    }

    @FFIFactory
    @CXXHead(
            system = "arrow/status.h"
    )
    interface Factory {
        Status create();

        Status create(@CXXValue @FFITypeAlias("arrow::StatusCode") StatusCode code,
                @CXXReference string msg);

        Status create(@CXXValue @FFITypeAlias("arrow::StatusCode") StatusCode code,
                @CXXValue string msg,
                @CXXValue @FFITypeAlias("std::shared_ptr<arrow::StatusDetail>") shared_ptr<StatusDetail> detail);

        Status create(@CXXReference Status s);
    }

    @FFIGen
    @FFILibrary(
            value = "arrow::Status",
            namespace = "arrow::Status"
    )
    @CXXHead(
            system = "arrow/status.h"
    )
    interface Library {
        Library INSTANCE = FFITypeFactory.getLibrary(Library.class);

        @CXXValue
        Status OK();

        @CXXValue
        string CodeAsString(@CXXValue @FFITypeAlias("arrow::StatusCode") StatusCode arg0);
    }
}
