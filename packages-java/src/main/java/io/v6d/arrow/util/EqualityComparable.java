// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.arrow.util;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXPointer;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("arrow::util::EqualityComparable")
@FFIGen
@CXXHead(
        system = "arrow/util/compare.h"
)
public interface EqualityComparable<T> extends CXXPointer {
    static <T> EqualityComparable<T> cast(Class<T> __t, final long __foreign_address) {
        try {
            Class<EqualityComparable<T>> clz = (Class<EqualityComparable<T>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(EqualityComparable.class, __t), true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static <T> EqualityComparable<T> cast(Class<T> __t, final FFIPointer __foreign_pointer) {
        return EqualityComparable.cast(__t, __foreign_pointer.getAddress());
    }

    @FFITypeAlias("arrow::util::EqualityComparable<%s>::PtrsEqual")
    @FFIGen
    @CXXHead(
            system = "arrow/util/compare.h"
    )
    interface PtrsEqual<T> extends FFIPointer {
        static <T> PtrsEqual<T> cast(Class<T> __t, final long __foreign_address) {
            try {
                Class<PtrsEqual<T>> clz = (Class<PtrsEqual<T>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(PtrsEqual.class, __t), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <T> PtrsEqual<T> cast(Class<T> __t, final FFIPointer __foreign_pointer) {
            return PtrsEqual.cast(__t, __foreign_pointer.getAddress());
        }
    }
}
