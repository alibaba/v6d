// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.arrow;

import com.alibaba.fastffi.CXXEnum;
import com.alibaba.fastffi.CXXEnumMap;
import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFIGetter;
import com.alibaba.fastffi.FFILibrary;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import com.alibaba.fastffi.FFITypeRefiner;
import io.v6d.std.CInt;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("arrow::Endianness")
@FFITypeRefiner("io.v6d.arrow.Endianness.get")
@CXXHead(
        system = "arrow/type.h"
)
public enum Endianness implements CXXEnum {
    Little(Library.INSTANCE.Little()),

    Big(Library.INSTANCE.Big()),

    Native(Library.INSTANCE.Native());

    private static final CXXEnumMap<Endianness> $map = new CXXEnumMap<>(values());

    int $value;

    Endianness(int value) {
        $value = value;
    }

    Endianness(CInt value) {
        $value = value.get();
    }

    public static Endianness get(int value) {
        return $map.get(value);
    }

    public static Endianness get(CInt value) {
        return $map.get(value.get());
    }

    public int getValue() {
        return $value;
    }

    public static Endianness cast(final long __foreign_address) {
        try {
            Class<Endianness> clz = (Class<Endianness>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(Endianness.class, true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    public static Endianness cast(final FFIPointer __foreign_pointer) {
        return Endianness.cast(__foreign_pointer.getAddress());
    }

    @FFIGen
    @FFILibrary(
            value = "arrow::Endianness",
            namespace = "arrow::Endianness"
    )
    @CXXHead(
            system = "arrow/type.h"
    )
    public interface Library {
        Library INSTANCE = FFITypeFactory.getLibrary(Library.class);

        @FFIGetter
        int Little();

        @FFIGetter
        int Big();

        @FFIGetter
        int Native();
    }
}
