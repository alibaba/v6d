// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.arrow.io;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXValue;
import com.alibaba.fastffi.FFIFactory;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import io.v6d.arrow.MemoryPool;
import io.v6d.arrow.StopToken;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("arrow::io::IOContext")
@FFIGen
@CXXHead(
        system = "arrow/io/interfaces.h"
)
public interface IOContext extends FFIPointer {
    MemoryPool pool();

    long external_id();

    @CXXValue
    StopToken stop_token();

    static IOContext cast(final long __foreign_address) {
        try {
            Class<IOContext> clz = (Class<IOContext>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(IOContext.class, true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static IOContext cast(final FFIPointer __foreign_pointer) {
        return IOContext.cast(__foreign_pointer.getAddress());
    }

    static Factory getFactory() {
        return FFITypeFactory.getFactory(FFITypeFactory.getFFITypeName(IOContext.class, true));
    }

    static IOContext create() {
        return IOContext.getFactory().create();
    }

    static IOContext create(@CXXValue StopToken stop_token) {
        return IOContext.getFactory().create(stop_token);
    }

    static IOContext create(MemoryPool pool, @CXXValue StopToken stop_token) {
        return IOContext.getFactory().create(pool, stop_token);
    }

    @FFIFactory
    @CXXHead(
            system = "arrow/io/interfaces.h"
    )
    interface Factory {
        IOContext create();

        IOContext create(@CXXValue StopToken stop_token);

        IOContext create(MemoryPool pool, @CXXValue StopToken stop_token);
    }
}
