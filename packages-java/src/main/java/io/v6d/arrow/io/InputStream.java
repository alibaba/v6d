// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.arrow.io;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXValue;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import io.v6d.arrow.KeyValueMetadata;
import io.v6d.arrow.Result;
import io.v6d.arrow.Status;
import io.v6d.std.enable_shared_from_this;
import io.v6d.std.shared_ptr;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("arrow::io::InputStream")
@FFIGen
@CXXHead(
        system = "arrow/io/interfaces.h"
)
@CXXHead({
        "arrow/status.h",
        "arrow/result.h"
})
public interface InputStream extends FileInterface, Readable, enable_shared_from_this<InputStream>, FFIPointer {
    @CXXValue
    Status Advance(long nbytes);

    boolean supports_zero_copy();

    @CXXValue
    @FFITypeAlias("arrow::Result<std::shared_ptr<const arrow::KeyValueMetadata>>")
    Result<shared_ptr<KeyValueMetadata>> ReadMetadata();

    static InputStream cast(final long __foreign_address) {
        try {
            Class<InputStream> clz = (Class<InputStream>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(InputStream.class, true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static InputStream cast(final FFIPointer __foreign_pointer) {
        return InputStream.cast(__foreign_pointer.getAddress());
    }
}
