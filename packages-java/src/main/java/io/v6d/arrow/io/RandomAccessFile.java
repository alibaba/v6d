// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.arrow.io;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXPointer;
import com.alibaba.fastffi.CXXReference;
import com.alibaba.fastffi.CXXValue;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFILibrary;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import io.v6d.arrow.Buffer;
import io.v6d.arrow.Result;
import io.v6d.arrow.Status;
import io.v6d.std.CLongLong;
import io.v6d.std.shared_ptr;
import io.v6d.std.vector;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("arrow::io::RandomAccessFile")
@FFIGen
@CXXHead(
        system = "arrow/io/interfaces.h"
)
public interface RandomAccessFile extends InputStream, Seekable, CXXPointer {
    @CXXValue
    @FFITypeAlias("arrow::Result<long long>")
    Result<CLongLong> ReadAt(long position, long nbytes, @FFITypeAlias("void*") long out);

    @CXXValue
    @FFITypeAlias("arrow::Result<std::shared_ptr<arrow::Buffer>>")
    Result<shared_ptr<Buffer>> ReadAt(long position, long nbytes);

    @CXXValue
    Status WillNeed(
            @CXXReference @FFITypeAlias("const std::vector<arrow::io::ReadRange>") vector<ReadRange> ranges);

    static RandomAccessFile cast(final long __foreign_address) {
        try {
            Class<RandomAccessFile> clz = (Class<RandomAccessFile>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(RandomAccessFile.class, true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static RandomAccessFile cast(final FFIPointer __foreign_pointer) {
        return RandomAccessFile.cast(__foreign_pointer.getAddress());
    }

    @FFIGen
    @FFILibrary(
            value = "arrow::io::RandomAccessFile",
            namespace = "arrow::io::RandomAccessFile"
    )
    @CXXHead(
            system = "arrow/io/interfaces.h"
    )
    interface Library {
        Library INSTANCE = FFITypeFactory.getLibrary(Library.class);

        @CXXValue
        @FFITypeAlias("std::shared_ptr<arrow::io::InputStream>")
        shared_ptr<InputStream> GetStream(
                @CXXValue @FFITypeAlias("std::shared_ptr<arrow::io::RandomAccessFile>") shared_ptr<RandomAccessFile> file,
                long file_offset, long nbytes);
    }
}
