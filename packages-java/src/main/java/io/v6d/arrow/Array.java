// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.arrow;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXPointer;
import com.alibaba.fastffi.CXXReference;
import com.alibaba.fastffi.CXXValue;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import io.v6d.std.CUnsignedChar;
import io.v6d.std.shared_ptr;
import io.v6d.std.string;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("arrow::Array")
@FFIGen
@CXXHead(
        system = "arrow/array/array_base.h"
)
public interface Array extends CXXPointer {
    boolean IsNull(long i);

    boolean IsValid(long i);

    @CXXValue
    @FFITypeAlias("arrow::Result<std::shared_ptr<arrow::Scalar>>")
    Result<shared_ptr<Scalar>> GetScalar(long i);

    long length();

    long offset();

    long null_count();

    @CXXValue
    @FFITypeAlias("std::shared_ptr<arrow::DataType>")
    shared_ptr<DataType> type();

    @CXXValue
    @FFITypeAlias("arrow::Type::type")
    Type.type type_id();

    @CXXReference
    @FFITypeAlias("const std::shared_ptr<arrow::Buffer>")
    shared_ptr<Buffer> null_bitmap();

    CUnsignedChar null_bitmap_data();

    boolean Equals(@CXXReference Array arr, @CXXReference EqualOptions arg1);

    boolean Equals(
            @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::Array>") shared_ptr<Array> arr,
            @CXXReference EqualOptions arg1);

    @CXXValue
    string Diff(@CXXReference Array other);

    boolean ApproxEquals(
            @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::Array>") shared_ptr<Array> arr,
            @CXXReference EqualOptions arg1);

    boolean ApproxEquals(@CXXReference Array arr, @CXXReference EqualOptions arg1);

    boolean RangeEquals(long start_idx, long end_idx, long other_start_idx,
            @CXXReference Array other, @CXXReference EqualOptions arg4);

    boolean RangeEquals(long start_idx, long end_idx, long other_start_idx,
            @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::Array>") shared_ptr<Array> other,
            @CXXReference EqualOptions arg4);

    boolean RangeEquals(@CXXReference Array other, long start_idx, long end_idx,
            long other_start_idx, @CXXReference EqualOptions arg4);

    boolean RangeEquals(
            @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::Array>") shared_ptr<Array> other,
            long start_idx, long end_idx, long other_start_idx, @CXXReference EqualOptions arg4);

    @CXXValue
    Status Accept(ArrayVisitor visitor);

    @CXXValue
    @FFITypeAlias("arrow::Result<std::shared_ptr<arrow::Array>>")
    Result<shared_ptr<Array>> View(
            @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::DataType>") shared_ptr<DataType> type);

    @CXXValue
    @FFITypeAlias("std::shared_ptr<arrow::Array>")
    shared_ptr<Array> Slice(long offset, long length);

    @CXXValue
    @FFITypeAlias("std::shared_ptr<arrow::Array>")
    shared_ptr<Array> Slice(long offset);

    @CXXValue
    @FFITypeAlias("arrow::Result<std::shared_ptr<arrow::Array>>")
    Result<shared_ptr<Array>> SliceSafe(long offset, long length);

    @CXXValue
    @FFITypeAlias("arrow::Result<std::shared_ptr<arrow::Array>>")
    Result<shared_ptr<Array>> SliceSafe(long offset);

    @CXXReference
    @FFITypeAlias("const std::shared_ptr<arrow::ArrayData>")
    shared_ptr<ArrayData> data();

    int num_fields();

    @CXXValue
    string ToString();

    @CXXValue
    Status Validate();

    @CXXValue
    Status ValidateFull();

    static Array cast(final long __foreign_address) {
        try {
            Class<Array> clz = (Class<Array>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(Array.class, true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static Array cast(final FFIPointer __foreign_pointer) {
        return Array.cast(__foreign_pointer.getAddress());
    }
}
