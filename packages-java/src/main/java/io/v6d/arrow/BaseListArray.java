// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.arrow;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXPointer;
import com.alibaba.fastffi.CXXValue;
import com.alibaba.fastffi.FFIExpr;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import io.v6d.std.shared_ptr;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("arrow::BaseListArray")
@FFIGen
@CXXHead(
        system = "arrow/array/array_nested.h"
)
public interface BaseListArray<TYPE> extends Array, FFIPointer {
    TYPE list_type();

    @CXXValue
    @FFITypeAlias("std::shared_ptr<arrow::Array>")
    shared_ptr<Array> values();

    @CXXValue
    @FFITypeAlias("std::shared_ptr<arrow::Buffer>")
    shared_ptr<Buffer> value_offsets();

    @CXXValue
    @FFITypeAlias("std::shared_ptr<arrow::DataType>")
    shared_ptr<DataType> value_type();

    offset_type<TYPE> raw_value_offsets();

    @CXXValue
    offset_type<TYPE> value_offset(long i);

    @CXXValue
    offset_type<TYPE> value_length(long i);

    @CXXValue
    @FFITypeAlias("std::shared_ptr<arrow::Array>")
    shared_ptr<Array> value_slice(long i);

    static <TYPE> BaseListArray<TYPE> cast(Class<TYPE> __type, final long __foreign_address) {
        try {
            Class<BaseListArray<TYPE>> clz = (Class<BaseListArray<TYPE>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(BaseListArray.class, __type), true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static <TYPE> BaseListArray<TYPE> cast(Class<TYPE> __type, final FFIPointer __foreign_pointer) {
        return BaseListArray.cast(__type, __foreign_pointer.getAddress());
    }

    @FFITypeAlias("arrow::BaseListArray<%s>::offset_type")
    @FFIGen
    @CXXHead(
            system = "arrow/array/array_nested.h"
    )
    interface offset_type<TYPE> extends CXXPointer {
        static <TYPE> offset_type<TYPE> cast(Class<TYPE> __type, final long __foreign_address) {
            try {
                Class<offset_type<TYPE>> clz = (Class<offset_type<TYPE>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(offset_type.class, __type), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <TYPE> offset_type<TYPE> cast(Class<TYPE> __type,
                final FFIPointer __foreign_pointer) {
            return offset_type.cast(__type, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("arrow::BaseListArray<%s>::TypeClass")
    @FFIGen
    @CXXHead(
            system = "arrow/array/array_nested.h"
    )
    interface TypeClass<TYPE> extends CXXPointer {
        @FFIExpr("{0}")
        TYPE get();

        static <TYPE> TypeClass<TYPE> cast(Class<TYPE> __type, final long __foreign_address) {
            try {
                Class<TypeClass<TYPE>> clz = (Class<TypeClass<TYPE>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(TypeClass.class, __type), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <TYPE> TypeClass<TYPE> cast(Class<TYPE> __type, final FFIPointer __foreign_pointer) {
            return TypeClass.cast(__type, __foreign_pointer.getAddress());
        }
    }
}
