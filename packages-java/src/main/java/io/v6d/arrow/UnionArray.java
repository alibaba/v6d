// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.arrow;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXPointer;
import com.alibaba.fastffi.CXXValue;
import com.alibaba.fastffi.FFIExpr;
import com.alibaba.fastffi.FFIFactory;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import io.v6d.std.CSignedChar;
import io.v6d.std.shared_ptr;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("arrow::UnionArray")
@FFIGen
@CXXHead(
        system = "arrow/array/array_nested.h"
)
public interface UnionArray extends Array, FFIPointer {
    @CXXValue
    @FFITypeAlias("std::shared_ptr<arrow::Buffer>")
    shared_ptr<Buffer> type_codes();

    CSignedChar raw_type_codes();

    byte type_code(long i);

    int child_id(long i);

    UnionType union_type();

    @CXXValue
    @FFITypeAlias("arrow::UnionMode::type")
    UnionMode.type mode();

    @CXXValue
    @FFITypeAlias("std::shared_ptr<arrow::Array>")
    shared_ptr<Array> field(int pos);

    static UnionArray cast(final long __foreign_address) {
        try {
            Class<UnionArray> clz = (Class<UnionArray>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(UnionArray.class, true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static UnionArray cast(final FFIPointer __foreign_pointer) {
        return UnionArray.cast(__foreign_pointer.getAddress());
    }

    @FFITypeAlias("arrow::UnionArray::type_code_t")
    @FFIGen
    @CXXHead(
            system = "arrow/array/array_nested.h"
    )
    interface type_code_t extends CXXPointer {
        @FFIExpr("(*{0})")
        byte get();

        @FFIExpr("*{0} = (arrow::UnionArray::type_code_t){1}")
        void set(byte __value);

        static type_code_t cast(final long __foreign_address) {
            try {
                Class<type_code_t> clz = (Class<type_code_t>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(type_code_t.class, true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static type_code_t cast(final FFIPointer __foreign_pointer) {
            return type_code_t.cast(__foreign_pointer.getAddress());
        }

        static Factory getFactory() {
            return FFITypeFactory.getFactory(FFITypeFactory.getFFITypeName(type_code_t.class, true));
        }

        static type_code_t create() {
            return type_code_t.getFactory().create();
        }

        static type_code_t create(byte __value) {
            return type_code_t.getFactory().create(__value);
        }

        @FFIFactory
        @CXXHead(
                system = "arrow/array/array_nested.h"
        )
        interface Factory {
            type_code_t create();

            type_code_t create(byte __value);
        }
    }
}
