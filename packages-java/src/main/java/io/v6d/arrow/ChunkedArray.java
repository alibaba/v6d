// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.arrow;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXReference;
import com.alibaba.fastffi.CXXValue;
import com.alibaba.fastffi.FFIFactory;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFILibrary;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import io.v6d.std.shared_ptr;
import io.v6d.std.string;
import io.v6d.std.vector;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("arrow::ChunkedArray")
@FFIGen
@CXXHead(
        system = "arrow/chunked_array.h"
)
public interface ChunkedArray extends FFIPointer {
    long length();

    long null_count();

    int num_chunks();

    @CXXValue
    @FFITypeAlias("std::shared_ptr<arrow::Array>")
    shared_ptr<Array> chunk(int i);

    @CXXReference
    ArrayVector chunks();

    @CXXValue
    @FFITypeAlias("std::shared_ptr<arrow::ChunkedArray>")
    shared_ptr<ChunkedArray> Slice(long offset, long length);

    @CXXValue
    @FFITypeAlias("std::shared_ptr<arrow::ChunkedArray>")
    shared_ptr<ChunkedArray> Slice(long offset);

    @CXXValue
    @FFITypeAlias("arrow::Result<std::vector<std::shared_ptr<arrow::ChunkedArray>>>")
    Result<vector<shared_ptr<ChunkedArray>>> Flatten(MemoryPool pool);

    @CXXValue
    @FFITypeAlias("arrow::Result<std::shared_ptr<arrow::ChunkedArray>>")
    Result<shared_ptr<ChunkedArray>> View(
            @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::DataType>") shared_ptr<DataType> type);

    @CXXReference
    @FFITypeAlias("const std::shared_ptr<arrow::DataType>")
    shared_ptr<DataType> type();

    @CXXValue
    @FFITypeAlias("arrow::Result<std::shared_ptr<arrow::Scalar>>")
    Result<shared_ptr<Scalar>> GetScalar(long index);

    boolean Equals(@CXXReference ChunkedArray other);

    boolean Equals(
            @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::ChunkedArray>") shared_ptr<ChunkedArray> other);

    boolean ApproxEquals(@CXXReference ChunkedArray other, @CXXReference EqualOptions arg1);

    @CXXValue
    string ToString();

    @CXXValue
    Status Validate();

    @CXXValue
    Status ValidateFull();

    static ChunkedArray cast(final long __foreign_address) {
        try {
            Class<ChunkedArray> clz = (Class<ChunkedArray>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(ChunkedArray.class, true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static ChunkedArray cast(final FFIPointer __foreign_pointer) {
        return ChunkedArray.cast(__foreign_pointer.getAddress());
    }

    static Factory getFactory() {
        return FFITypeFactory.getFactory(FFITypeFactory.getFFITypeName(ChunkedArray.class, true));
    }

    static ChunkedArray create(@CXXValue ArrayVector chunks) {
        return ChunkedArray.getFactory().create(chunks);
    }

    static ChunkedArray create(
            @CXXValue @FFITypeAlias("std::shared_ptr<arrow::Array>") shared_ptr<Array> chunk) {
        return ChunkedArray.getFactory().create(chunk);
    }

    static ChunkedArray create(@CXXValue ArrayVector chunks,
            @CXXValue @FFITypeAlias("std::shared_ptr<arrow::DataType>") shared_ptr<DataType> type) {
        return ChunkedArray.getFactory().create(chunks, type);
    }

    @FFIFactory
    @CXXHead(
            system = "arrow/chunked_array.h"
    )
    interface Factory {
        ChunkedArray create(@CXXValue ArrayVector chunks);

        ChunkedArray create(
                @CXXValue @FFITypeAlias("std::shared_ptr<arrow::Array>") shared_ptr<Array> chunk);

        ChunkedArray create(@CXXValue ArrayVector chunks,
                @CXXValue @FFITypeAlias("std::shared_ptr<arrow::DataType>") shared_ptr<DataType> type);
    }

    @FFIGen
    @FFILibrary(
            value = "arrow::ChunkedArray",
            namespace = "arrow::ChunkedArray"
    )
    @CXXHead(
            system = "arrow/chunked_array.h"
    )
    interface Library {
        Library INSTANCE = FFITypeFactory.getLibrary(Library.class);

        @CXXValue
        @FFITypeAlias("arrow::Result<std::shared_ptr<arrow::ChunkedArray>>")
        Result<shared_ptr<ChunkedArray>> Make(@CXXValue ArrayVector chunks,
                @CXXValue @FFITypeAlias("std::shared_ptr<arrow::DataType>") shared_ptr<DataType> type);
    }
}
