// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.arrow;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXPointer;
import com.alibaba.fastffi.CXXReference;
import com.alibaba.fastffi.CXXValue;
import com.alibaba.fastffi.FFIFactory;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFILibrary;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import io.v6d.arrow.io.OutputStream;
import io.v6d.arrow.io.RandomAccessFile;
import io.v6d.std.CUnsignedChar;
import io.v6d.std.shared_ptr;
import io.v6d.std.string;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("arrow::Buffer")
@FFIGen
@CXXHead(
        system = "arrow/buffer.h"
)
@CXXHead("arrow/status.h")
public interface Buffer extends CXXPointer {
    @CXXValue
    string ToHexString();

    boolean Equals(@CXXReference Buffer other, long nbytes);

    boolean Equals(@CXXReference Buffer other);

    @CXXValue
    @FFITypeAlias("arrow::Result<std::shared_ptr<arrow::Buffer>>")
    Result<shared_ptr<Buffer>> CopySlice(long start, long nbytes, MemoryPool pool);

    void ZeroPadding();

    @CXXValue
    string ToString();

    CUnsignedChar data();

    CUnsignedChar mutable_data();

    long address();

    long mutable_address();

    long size();

    long capacity();

    boolean is_cpu();

    boolean is_mutable();

    @CXXReference
    @FFITypeAlias("const std::shared_ptr<arrow::Device>")
    shared_ptr<Device> device();

    @CXXReference
    @FFITypeAlias("const std::shared_ptr<arrow::MemoryManager>")
    shared_ptr<MemoryManager> memory_manager();

    @CXXValue
    @FFITypeAlias("std::shared_ptr<arrow::Buffer>")
    shared_ptr<Buffer> parent();

    static Buffer cast(final long __foreign_address) {
        try {
            Class<Buffer> clz = (Class<Buffer>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(Buffer.class, true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static Buffer cast(final FFIPointer __foreign_pointer) {
        return Buffer.cast(__foreign_pointer.getAddress());
    }

    static Factory getFactory() {
        return FFITypeFactory.getFactory(FFITypeFactory.getFFITypeName(Buffer.class, true));
    }

    static Buffer create(CUnsignedChar data, long size) {
        return Buffer.getFactory().create(data, size);
    }

    static Buffer create(CUnsignedChar data, long size,
            @CXXValue @FFITypeAlias("std::shared_ptr<arrow::MemoryManager>") shared_ptr<MemoryManager> mm,
            @CXXValue @FFITypeAlias("std::shared_ptr<arrow::Buffer>") shared_ptr<Buffer> parent) {
        return Buffer.getFactory().create(data, size, mm, parent);
    }

    static Buffer create(long address, long size,
            @CXXValue @FFITypeAlias("std::shared_ptr<arrow::MemoryManager>") shared_ptr<MemoryManager> mm,
            @CXXValue @FFITypeAlias("std::shared_ptr<arrow::Buffer>") shared_ptr<Buffer> parent) {
        return Buffer.getFactory().create(address, size, mm, parent);
    }

    static Buffer create(
            @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::Buffer>") shared_ptr<Buffer> parent,
            long offset, long size) {
        return Buffer.getFactory().create(parent, offset, size);
    }

    @FFIFactory
    @CXXHead(
            system = "arrow/buffer.h"
    )
    @CXXHead("arrow/status.h")
    interface Factory {
        Buffer create(CUnsignedChar data, long size);

        Buffer create(CUnsignedChar data, long size,
                @CXXValue @FFITypeAlias("std::shared_ptr<arrow::MemoryManager>") shared_ptr<MemoryManager> mm,
                @CXXValue @FFITypeAlias("std::shared_ptr<arrow::Buffer>") shared_ptr<Buffer> parent);

        Buffer create(long address, long size,
                @CXXValue @FFITypeAlias("std::shared_ptr<arrow::MemoryManager>") shared_ptr<MemoryManager> mm,
                @CXXValue @FFITypeAlias("std::shared_ptr<arrow::Buffer>") shared_ptr<Buffer> parent);

        Buffer create(
                @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::Buffer>") shared_ptr<Buffer> parent,
                long offset, long size);
    }

    @FFIGen
    @FFILibrary(
            value = "arrow::Buffer",
            namespace = "arrow::Buffer"
    )
    @CXXHead(
            system = "arrow/buffer.h"
    )
    @CXXHead("arrow/status.h")
    interface Library {
        Library INSTANCE = FFITypeFactory.getLibrary(Library.class);

        @CXXValue
        @FFITypeAlias("std::shared_ptr<arrow::Buffer>")
        shared_ptr<Buffer> FromString(@CXXValue string data);

        @CXXValue
        @FFITypeAlias("arrow::Result<std::shared_ptr<arrow::io::RandomAccessFile>>")
        Result<shared_ptr<RandomAccessFile>> GetReader(
                @CXXValue @FFITypeAlias("std::shared_ptr<arrow::Buffer>") shared_ptr<Buffer> arg0);

        @CXXValue
        @FFITypeAlias("arrow::Result<std::shared_ptr<arrow::io::OutputStream>>")
        Result<shared_ptr<OutputStream>> GetWriter(
                @CXXValue @FFITypeAlias("std::shared_ptr<arrow::Buffer>") shared_ptr<Buffer> arg0);

        @CXXValue
        @FFITypeAlias("arrow::Result<std::shared_ptr<arrow::Buffer>>")
        Result<shared_ptr<Buffer>> Copy(
                @CXXValue @FFITypeAlias("std::shared_ptr<arrow::Buffer>") shared_ptr<Buffer> source,
                @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::MemoryManager>") shared_ptr<MemoryManager> to);

        @CXXValue
        @FFITypeAlias("arrow::Result<std::shared_ptr<arrow::Buffer>>")
        Result<shared_ptr<Buffer>> View(
                @CXXValue @FFITypeAlias("std::shared_ptr<arrow::Buffer>") shared_ptr<Buffer> source,
                @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::MemoryManager>") shared_ptr<MemoryManager> to);

        @CXXValue
        @FFITypeAlias("arrow::Result<std::shared_ptr<arrow::Buffer>>")
        Result<shared_ptr<Buffer>> ViewOrCopy(
                @CXXValue @FFITypeAlias("std::shared_ptr<arrow::Buffer>") shared_ptr<Buffer> source,
                @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::MemoryManager>") shared_ptr<MemoryManager> to);
    }
}
