// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.arrow;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXPointer;
import com.alibaba.fastffi.CXXReference;
import com.alibaba.fastffi.CXXValue;
import com.alibaba.fastffi.FFIExpr;
import com.alibaba.fastffi.FFIFactory;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFINameAlias;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import io.v6d.arrow.util.EqualityComparable;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("arrow::Result")
@FFIGen
@CXXHead(
        system = "arrow/result.h"
)
public interface Result<T> extends EqualityComparable<Result<T>>, CXXPointer {
    boolean Equals(@CXXReference Result<T> other);

    boolean ok();

    @CXXReference
    Status status();

    @CXXReference
    T ValueOrDie();

    @CXXReference
    @FFINameAlias("ValueOrDie")
    T ValueOrDie_1();

    @CXXReference
    T ValueUnsafe();

    @CXXReference
    @FFINameAlias("ValueUnsafe")
    T ValueUnsafe_1();

    @CXXValue
    T MoveValueUnsafe();

    static <T> Result<T> cast(Class<T> __t, final long __foreign_address) {
        try {
            Class<Result<T>> clz = (Class<Result<T>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(Result.class, __t), true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static <T> Result<T> cast(Class<T> __t, final FFIPointer __foreign_pointer) {
        return Result.cast(__t, __foreign_pointer.getAddress());
    }

    static <T> Factory<T> getFactory(Class<T> __t) {
        return FFITypeFactory.getFactory(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(Result.class, __t), true));
    }

    static <T> Result<T> create(Class<T> __t) {
        return Result.getFactory(__t).create();
    }

    static <T> Result<T> create(Class<T> __t, @CXXReference Status status) {
        return Result.getFactory(__t).create(status);
    }

    static <T> Result<T> create(Class<T> __t, @CXXReference Result<T> other) {
        return Result.getFactory(__t).create(other);
    }

    @FFIFactory
    @CXXHead(
            system = "arrow/result.h"
    )
    interface Factory<T> {
        Result<T> create();

        Result<T> create(@CXXReference Status status);

        Result<T> create(@CXXReference Result<T> other);
    }

    @FFITypeAlias("arrow::Result<%s>::ValueType")
    @FFIGen
    @CXXHead(
            system = "arrow/result.h"
    )
    interface ValueType<T> extends CXXPointer {
        @FFIExpr("{0}")
        T get();

        static <T> ValueType<T> cast(Class<T> __t, final long __foreign_address) {
            try {
                Class<ValueType<T>> clz = (Class<ValueType<T>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(ValueType.class, __t), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <T> ValueType<T> cast(Class<T> __t, final FFIPointer __foreign_pointer) {
            return ValueType.cast(__t, __foreign_pointer.getAddress());
        }
    }
}
