// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.arrow;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXPointer;
import com.alibaba.fastffi.CXXReference;
import com.alibaba.fastffi.CXXValue;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("arrow::TypeVisitor")
@FFIGen
@CXXHead(
        system = "arrow/visitor.h"
)
public interface TypeVisitor extends CXXPointer {
    @CXXValue
    Status Visit(@CXXReference NullType type);

    @CXXValue
    Status Visit(@CXXReference BooleanType type);

    @CXXValue
    Status Visit(@CXXReference Int8Type type);

    @CXXValue
    Status Visit(@CXXReference Int16Type type);

    @CXXValue
    Status Visit(@CXXReference Int32Type type);

    @CXXValue
    Status Visit(@CXXReference Int64Type type);

    @CXXValue
    Status Visit(@CXXReference UInt8Type type);

    @CXXValue
    Status Visit(@CXXReference UInt16Type type);

    @CXXValue
    Status Visit(@CXXReference UInt32Type type);

    @CXXValue
    Status Visit(@CXXReference UInt64Type type);

    @CXXValue
    Status Visit(@CXXReference HalfFloatType type);

    @CXXValue
    Status Visit(@CXXReference FloatType type);

    @CXXValue
    Status Visit(@CXXReference DoubleType type);

    @CXXValue
    Status Visit(@CXXReference StringType type);

    @CXXValue
    Status Visit(@CXXReference BinaryType type);

    @CXXValue
    Status Visit(@CXXReference LargeStringType type);

    @CXXValue
    Status Visit(@CXXReference LargeBinaryType type);

    @CXXValue
    Status Visit(@CXXReference FixedSizeBinaryType type);

    @CXXValue
    Status Visit(@CXXReference Date64Type type);

    @CXXValue
    Status Visit(@CXXReference Date32Type type);

    @CXXValue
    Status Visit(@CXXReference Time32Type type);

    @CXXValue
    Status Visit(@CXXReference Time64Type type);

    @CXXValue
    Status Visit(@CXXReference TimestampType type);

    @CXXValue
    Status Visit(@CXXReference MonthDayNanoIntervalType type);

    @CXXValue
    Status Visit(@CXXReference MonthIntervalType type);

    @CXXValue
    Status Visit(@CXXReference DayTimeIntervalType type);

    @CXXValue
    Status Visit(@CXXReference DurationType type);

    @CXXValue
    Status Visit(@CXXReference Decimal128Type type);

    @CXXValue
    Status Visit(@CXXReference Decimal256Type type);

    @CXXValue
    Status Visit(@CXXReference ListType type);

    @CXXValue
    Status Visit(@CXXReference LargeListType type);

    @CXXValue
    Status Visit(@CXXReference MapType type);

    @CXXValue
    Status Visit(@CXXReference FixedSizeListType type);

    @CXXValue
    Status Visit(@CXXReference StructType type);

    @CXXValue
    Status Visit(@CXXReference SparseUnionType type);

    @CXXValue
    Status Visit(@CXXReference DenseUnionType type);

    @CXXValue
    Status Visit(@CXXReference DictionaryType type);

    @CXXValue
    Status Visit(@CXXReference ExtensionType type);

    static TypeVisitor cast(final long __foreign_address) {
        try {
            Class<TypeVisitor> clz = (Class<TypeVisitor>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(TypeVisitor.class, true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static TypeVisitor cast(final FFIPointer __foreign_pointer) {
        return TypeVisitor.cast(__foreign_pointer.getAddress());
    }
}
