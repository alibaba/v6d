// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.arrow;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXPointer;
import com.alibaba.fastffi.CXXReference;
import com.alibaba.fastffi.CXXValue;
import com.alibaba.fastffi.FFIExpr;
import com.alibaba.fastffi.FFIFactory;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFILibrary;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import io.v6d.std.CChar;
import io.v6d.std.string;
import io.v6d.std.vector;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("arrow::DurationType")
@FFIGen
@CXXHead(
        system = "arrow/type.h"
)
public interface DurationType extends TemporalType, ParametricType, FFIPointer {
    int bit_width();

    @CXXValue
    string ToString();

    @CXXValue
    string name();

    @CXXValue
    @FFITypeAlias("arrow::TimeUnit::type")
    TimeUnit.type unit();

    static DurationType cast(final long __foreign_address) {
        try {
            Class<DurationType> clz = (Class<DurationType>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(DurationType.class, true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static DurationType cast(final FFIPointer __foreign_pointer) {
        return DurationType.cast(__foreign_pointer.getAddress());
    }

    static Factory getFactory() {
        return FFITypeFactory.getFactory(FFITypeFactory.getFFITypeName(DurationType.class, true));
    }

    static DurationType create(
            @CXXValue @FFITypeAlias("arrow::TimeUnit::type") TimeUnit.type unit) {
        return DurationType.getFactory().create(unit);
    }

    @FFIFactory
    @CXXHead(
            system = "arrow/type.h"
    )
    interface Factory {
        DurationType create(@CXXValue @FFITypeAlias("arrow::TimeUnit::type") TimeUnit.type unit);
    }

    @FFIGen
    @FFILibrary(
            value = "arrow::DurationType",
            namespace = "arrow::DurationType"
    )
    @CXXHead(
            system = "arrow/type.h"
    )
    interface Library {
        Library INSTANCE = FFITypeFactory.getLibrary(Library.class);

        CChar type_name();
    }

    @FFITypeAlias("arrow::DurationType::Unit")
    @FFIGen
    @CXXHead(
            system = "arrow/type.h"
    )
    interface Unit extends CXXPointer {
        @FFIExpr("{0}")
        TimeUnit get();

        static Unit cast(final long __foreign_address) {
            try {
                Class<Unit> clz = (Class<Unit>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(Unit.class, true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static Unit cast(final FFIPointer __foreign_pointer) {
            return Unit.cast(__foreign_pointer.getAddress());
        }

        @FFIGen
        @FFILibrary(
                value = "arrow::TimeUnit",
                namespace = "arrow::TimeUnit"
        )
        @CXXHead(
                system = "arrow/type.h"
        )
        interface Library {
            Library INSTANCE = FFITypeFactory.getLibrary(Library.class);

            @CXXReference
            @FFITypeAlias("const std::vector<arrow::TimeUnit::type>")
            vector<TimeUnit.type> values();
        }
    }

    @FFITypeAlias("arrow::DurationType::c_type")
    @FFIGen
    @CXXHead(
            system = "arrow/type.h"
    )
    interface c_type extends CXXPointer {
        @FFIExpr("(*{0})")
        long get();

        @FFIExpr("*{0} = (arrow::DurationType::c_type){1}")
        void set(long __value);

        static c_type cast(final long __foreign_address) {
            try {
                Class<c_type> clz = (Class<c_type>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(c_type.class, true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static c_type cast(final FFIPointer __foreign_pointer) {
            return c_type.cast(__foreign_pointer.getAddress());
        }

        static Factory getFactory() {
            return FFITypeFactory.getFactory(FFITypeFactory.getFFITypeName(c_type.class, true));
        }

        static c_type create() {
            return c_type.getFactory().create();
        }

        static c_type create(long __value) {
            return c_type.getFactory().create(__value);
        }

        @FFIFactory
        @CXXHead(
                system = "arrow/type.h"
        )
        interface Factory {
            c_type create();

            c_type create(long __value);
        }
    }

    @FFITypeAlias("arrow::DurationType::PhysicalType")
    @FFIGen
    @CXXHead(
            system = "arrow/type.h"
    )
    interface PhysicalType extends CXXPointer {
        @FFIExpr("{0}")
        Int64Type get();

        static PhysicalType cast(final long __foreign_address) {
            try {
                Class<PhysicalType> clz = (Class<PhysicalType>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(PhysicalType.class, true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static PhysicalType cast(final FFIPointer __foreign_pointer) {
            return PhysicalType.cast(__foreign_pointer.getAddress());
        }

        @FFIGen
        @FFILibrary(
                value = "arrow::Int64Type",
                namespace = "arrow::Int64Type"
        )
        @CXXHead(
                system = "arrow/type.h"
        )
        interface Library {
            Library INSTANCE = FFITypeFactory.getLibrary(Library.class);

            CChar type_name();
        }
    }
}
