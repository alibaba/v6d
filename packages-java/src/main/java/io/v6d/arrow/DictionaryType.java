// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.arrow;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXReference;
import com.alibaba.fastffi.CXXValue;
import com.alibaba.fastffi.FFIFactory;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFILibrary;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import io.v6d.std.CChar;
import io.v6d.std.shared_ptr;
import io.v6d.std.string;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("arrow::DictionaryType")
@FFIGen
@CXXHead(
        system = "arrow/type.h"
)
public interface DictionaryType extends FixedWidthType, FFIPointer {
    @CXXValue
    string ToString();

    @CXXValue
    string name();

    int bit_width();

    @CXXValue
    DataTypeLayout layout();

    @CXXReference
    @FFITypeAlias("const std::shared_ptr<arrow::DataType>")
    shared_ptr<DataType> index_type();

    @CXXReference
    @FFITypeAlias("const std::shared_ptr<arrow::DataType>")
    shared_ptr<DataType> value_type();

    boolean ordered();

    static DictionaryType cast(final long __foreign_address) {
        try {
            Class<DictionaryType> clz = (Class<DictionaryType>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(DictionaryType.class, true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static DictionaryType cast(final FFIPointer __foreign_pointer) {
        return DictionaryType.cast(__foreign_pointer.getAddress());
    }

    static Factory getFactory() {
        return FFITypeFactory.getFactory(FFITypeFactory.getFFITypeName(DictionaryType.class, true));
    }

    static DictionaryType create(
            @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::DataType>") shared_ptr<DataType> index_type,
            @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::DataType>") shared_ptr<DataType> value_type,
            boolean ordered) {
        return DictionaryType.getFactory().create(index_type, value_type, ordered);
    }

    @FFIFactory
    @CXXHead(
            system = "arrow/type.h"
    )
    interface Factory {
        DictionaryType create(
                @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::DataType>") shared_ptr<DataType> index_type,
                @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::DataType>") shared_ptr<DataType> value_type,
                boolean ordered);
    }

    @FFIGen
    @FFILibrary(
            value = "arrow::DictionaryType",
            namespace = "arrow::DictionaryType"
    )
    @CXXHead(
            system = "arrow/type.h"
    )
    interface Library {
        Library INSTANCE = FFITypeFactory.getLibrary(Library.class);

        CChar type_name();

        @CXXValue
        @FFITypeAlias("arrow::Result<std::shared_ptr<arrow::DataType>>")
        Result<shared_ptr<DataType>> Make(
                @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::DataType>") shared_ptr<DataType> index_type,
                @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::DataType>") shared_ptr<DataType> value_type,
                boolean ordered);
    }
}
