// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.arrow;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXReference;
import com.alibaba.fastffi.CXXValue;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFILibrary;
import com.alibaba.fastffi.FFINameAlias;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import io.v6d.std.CChar;
import io.v6d.std.shared_ptr;
import io.v6d.std.string;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("arrow::ExtensionType")
@FFIGen
@CXXHead(
        system = "arrow/extension_type.h"
)
public interface ExtensionType extends DataType, FFIPointer {
    @CXXReference
    @FFITypeAlias("const std::shared_ptr<arrow::DataType>")
    shared_ptr<DataType> storage_type();

    @CXXValue
    DataTypeLayout layout();

    @CXXValue
    string ToString();

    @CXXValue
    string name();

    static ExtensionType cast(final long __foreign_address) {
        try {
            Class<ExtensionType> clz = (Class<ExtensionType>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(ExtensionType.class, true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static ExtensionType cast(final FFIPointer __foreign_pointer) {
        return ExtensionType.cast(__foreign_pointer.getAddress());
    }

    @FFIGen
    @FFILibrary(
            value = "arrow::ExtensionType",
            namespace = "arrow::ExtensionType"
    )
    @CXXHead(
            system = "arrow/extension_type.h"
    )
    interface Library {
        Library INSTANCE = FFITypeFactory.getLibrary(Library.class);

        CChar type_name();

        @CXXValue
        @FFITypeAlias("std::shared_ptr<arrow::Array>")
        shared_ptr<Array> WrapArray(
                @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::DataType>") shared_ptr<DataType> ext_type,
                @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::Array>") shared_ptr<Array> storage);

        @CXXValue
        @FFITypeAlias("std::shared_ptr<arrow::ChunkedArray>")
        @FFINameAlias("WrapArray")
        shared_ptr<ChunkedArray> WrapArray_1(
                @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::DataType>") shared_ptr<DataType> ext_type,
                @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::ChunkedArray>") shared_ptr<ChunkedArray> storage);
    }
}
