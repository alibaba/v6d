// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.arrow;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXPointer;
import com.alibaba.fastffi.CXXReference;
import com.alibaba.fastffi.CXXValue;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFILibrary;
import com.alibaba.fastffi.FFINameAlias;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import io.v6d.std.CInt;
import io.v6d.std.shared_ptr;
import io.v6d.std.string;
import io.v6d.std.vector;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("arrow::Table")
@FFIGen
@CXXHead(
        system = "arrow/table.h"
)
public interface Table extends CXXPointer {
    @CXXReference
    @FFITypeAlias("const std::shared_ptr<arrow::Schema>")
    shared_ptr<Schema> schema();

    @CXXValue
    @FFITypeAlias("std::shared_ptr<arrow::Field>")
    shared_ptr<Field> field(int i);

    @CXXValue
    @FFITypeAlias("std::vector<std::shared_ptr<arrow::Field>>")
    vector<shared_ptr<Field>> fields();

    @CXXValue
    @FFITypeAlias("std::shared_ptr<arrow::Table>")
    shared_ptr<Table> Slice(long offset);

    @CXXValue
    @FFITypeAlias("std::shared_ptr<arrow::ChunkedArray>")
    shared_ptr<ChunkedArray> GetColumnByName(@CXXReference string name);

    @CXXValue
    @FFITypeAlias("std::vector<std::string>")
    vector<string> ColumnNames();

    @CXXValue
    @FFITypeAlias("arrow::Result<std::shared_ptr<arrow::Table>>")
    Result<shared_ptr<Table>> RenameColumns(
            @CXXReference @FFITypeAlias("const std::vector<std::string>") vector<string> names);

    @CXXValue
    @FFITypeAlias("arrow::Result<std::shared_ptr<arrow::Table>>")
    Result<shared_ptr<Table>> SelectColumns(
            @CXXReference @FFITypeAlias("const std::vector<int>") vector<CInt> indices);

    @CXXValue
    string ToString();

    int num_columns();

    long num_rows();

    boolean Equals(@CXXReference Table other, boolean check_metadata);

    @CXXValue
    @FFITypeAlias("arrow::Result<std::shared_ptr<arrow::Table>>")
    Result<shared_ptr<Table>> CombineChunks(MemoryPool pool);

    static Table cast(final long __foreign_address) {
        try {
            Class<Table> clz = (Class<Table>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(Table.class, true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static Table cast(final FFIPointer __foreign_pointer) {
        return Table.cast(__foreign_pointer.getAddress());
    }

    @FFIGen
    @FFILibrary(
            value = "arrow::Table",
            namespace = "arrow::Table"
    )
    @CXXHead(
            system = "arrow/table.h"
    )
    interface Library {
        Library INSTANCE = FFITypeFactory.getLibrary(Library.class);

        @CXXValue
        @FFITypeAlias("std::shared_ptr<arrow::Table>")
        shared_ptr<Table> Make(
                @CXXValue @FFITypeAlias("std::shared_ptr<arrow::Schema>") shared_ptr<Schema> schema,
                @CXXValue @FFITypeAlias("std::vector<std::shared_ptr<arrow::ChunkedArray>>") vector<shared_ptr<ChunkedArray>> columns,
                long num_rows);

        @CXXValue
        @FFITypeAlias("std::shared_ptr<arrow::Table>")
        @FFINameAlias("Make")
        shared_ptr<Table> Make_1(
                @CXXValue @FFITypeAlias("std::shared_ptr<arrow::Schema>") shared_ptr<Schema> schema,
                @CXXReference @FFITypeAlias("const std::vector<std::shared_ptr<arrow::Array>>") vector<shared_ptr<Array>> arrays,
                long num_rows);

        @CXXValue
        @FFITypeAlias("arrow::Result<std::shared_ptr<arrow::Table>>")
        Result<shared_ptr<Table>> FromRecordBatchReader(RecordBatchReader reader);

        @CXXValue
        @FFITypeAlias("arrow::Result<std::shared_ptr<arrow::Table>>")
        Result<shared_ptr<Table>> FromRecordBatches(
                @CXXReference @FFITypeAlias("const std::vector<std::shared_ptr<arrow::RecordBatch>>") vector<shared_ptr<RecordBatch>> batches);

        @CXXValue
        @FFITypeAlias("arrow::Result<std::shared_ptr<arrow::Table>>")
        Result<shared_ptr<Table>> FromRecordBatches(
                @CXXValue @FFITypeAlias("std::shared_ptr<arrow::Schema>") shared_ptr<Schema> schema,
                @CXXReference @FFITypeAlias("const std::vector<std::shared_ptr<arrow::RecordBatch>>") vector<shared_ptr<RecordBatch>> batches);

        @CXXValue
        @FFITypeAlias("arrow::Result<std::shared_ptr<arrow::Table>>")
        Result<shared_ptr<Table>> FromChunkedStructArray(
                @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::ChunkedArray>") shared_ptr<ChunkedArray> array);
    }
}
