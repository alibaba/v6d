// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.arrow;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXPointer;
import com.alibaba.fastffi.CXXReference;
import com.alibaba.fastffi.CXXValue;
import com.alibaba.fastffi.FFIFactory;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import io.v6d.arrow.detail.Fingerprintable;
import io.v6d.arrow.util.EqualityComparable;
import io.v6d.arrow.util.ToStringOstreamable;
import io.v6d.std.CInt;
import io.v6d.std.shared_ptr;
import io.v6d.std.string;
import io.v6d.std.vector;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("arrow::Schema")
@FFIGen
@CXXHead(
        system = "arrow/type.h"
)
public interface Schema extends Fingerprintable, EqualityComparable<Schema>, ToStringOstreamable<Schema>, CXXPointer {
    boolean Equals(@CXXReference Schema other, boolean check_metadata);

    boolean Equals(
            @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::Schema>") shared_ptr<Schema> other,
            boolean check_metadata);

    @CXXValue
    @FFITypeAlias("std::shared_ptr<arrow::Schema>")
    shared_ptr<Schema> WithEndianness(
            @CXXValue @FFITypeAlias("arrow::Endianness") Endianness endianness);

    @CXXValue
    @FFITypeAlias("arrow::Endianness")
    Endianness endianness();

    boolean is_native_endian();

    int num_fields();

    @CXXReference
    @FFITypeAlias("const std::shared_ptr<arrow::Field>")
    shared_ptr<Field> field(int i);

    @CXXReference
    FieldVector fields();

    @CXXValue
    @FFITypeAlias("std::vector<std::string>")
    vector<string> field_names();

    @CXXValue
    @FFITypeAlias("std::shared_ptr<arrow::Field>")
    shared_ptr<Field> GetFieldByName(@CXXReference string name);

    @CXXValue
    FieldVector GetAllFieldsByName(@CXXReference string name);

    int GetFieldIndex(@CXXReference string name);

    @CXXValue
    @FFITypeAlias("std::vector<int>")
    vector<CInt> GetAllFieldIndices(@CXXReference string name);

    @CXXValue
    Status CanReferenceFieldsByNames(
            @CXXReference @FFITypeAlias("const std::vector<std::string>") vector<string> names);

    @CXXReference
    @FFITypeAlias("const std::shared_ptr<const arrow::KeyValueMetadata>")
    shared_ptr<KeyValueMetadata> metadata();

    @CXXValue
    string ToString(boolean show_metadata);

    @CXXValue
    @FFITypeAlias("arrow::Result<std::shared_ptr<arrow::Schema>>")
    Result<shared_ptr<Schema>> AddField(int i,
            @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::Field>") shared_ptr<Field> field);

    @CXXValue
    @FFITypeAlias("arrow::Result<std::shared_ptr<arrow::Schema>>")
    Result<shared_ptr<Schema>> RemoveField(int i);

    @CXXValue
    @FFITypeAlias("arrow::Result<std::shared_ptr<arrow::Schema>>")
    Result<shared_ptr<Schema>> SetField(int i,
            @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::Field>") shared_ptr<Field> field);

    @CXXValue
    @FFITypeAlias("std::shared_ptr<arrow::Schema>")
    shared_ptr<Schema> WithMetadata(
            @CXXReference @FFITypeAlias("const std::shared_ptr<const arrow::KeyValueMetadata>") shared_ptr<KeyValueMetadata> metadata);

    @CXXValue
    @FFITypeAlias("std::shared_ptr<arrow::Schema>")
    shared_ptr<Schema> RemoveMetadata();

    boolean HasMetadata();

    boolean HasDistinctFieldNames();

    static Schema cast(final long __foreign_address) {
        try {
            Class<Schema> clz = (Class<Schema>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(Schema.class, true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static Schema cast(final FFIPointer __foreign_pointer) {
        return Schema.cast(__foreign_pointer.getAddress());
    }

    static Factory getFactory() {
        return FFITypeFactory.getFactory(FFITypeFactory.getFFITypeName(Schema.class, true));
    }

    static Schema create(@CXXValue FieldVector fields,
            @CXXValue @FFITypeAlias("arrow::Endianness") Endianness endianness,
            @CXXValue @FFITypeAlias("std::shared_ptr<const arrow::KeyValueMetadata>") shared_ptr<KeyValueMetadata> metadata) {
        return Schema.getFactory().create(fields, endianness, metadata);
    }

    static Schema create(@CXXValue FieldVector fields,
            @CXXValue @FFITypeAlias("std::shared_ptr<const arrow::KeyValueMetadata>") shared_ptr<KeyValueMetadata> metadata) {
        return Schema.getFactory().create(fields, metadata);
    }

    static Schema create(@CXXReference Schema arg0) {
        return Schema.getFactory().create(arg0);
    }

    @FFIFactory
    @CXXHead(
            system = "arrow/type.h"
    )
    interface Factory {
        Schema create(@CXXValue FieldVector fields,
                @CXXValue @FFITypeAlias("arrow::Endianness") Endianness endianness,
                @CXXValue @FFITypeAlias("std::shared_ptr<const arrow::KeyValueMetadata>") shared_ptr<KeyValueMetadata> metadata);

        Schema create(@CXXValue FieldVector fields,
                @CXXValue @FFITypeAlias("std::shared_ptr<const arrow::KeyValueMetadata>") shared_ptr<KeyValueMetadata> metadata);

        Schema create(@CXXReference Schema arg0);
    }
}
