// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.arrow;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXReference;
import com.alibaba.fastffi.CXXValue;
import com.alibaba.fastffi.FFIFactory;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFILibrary;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import io.v6d.std.CLongLong;
import io.v6d.std.pair;
import io.v6d.std.shared_ptr;
import io.v6d.std.string;
import io.v6d.std.unordered_map;
import io.v6d.std.vector;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("arrow::KeyValueMetadata")
@FFIGen
@CXXHead(
        system = "arrow/util/key_value_metadata.h"
)
public interface KeyValueMetadata extends FFIPointer {
    void ToUnorderedMap(
            @FFITypeAlias("std::unordered_map<std::string,std::string>") unordered_map<string, string> out);

    void Append(@CXXValue string key, @CXXValue string value);

    @CXXValue
    @FFITypeAlias("arrow::Result<std::string>")
    Result<string> Get(@CXXReference string key);

    boolean Contains(@CXXReference string key);

    @CXXValue
    Status Delete(@CXXReference string key);

    @CXXValue
    Status Delete(long index);

    @CXXValue
    Status DeleteMany(@CXXValue @FFITypeAlias("std::vector<long long>") vector<CLongLong> indices);

    @CXXValue
    Status Set(@CXXReference string key, @CXXReference string value);

    void reserve(long n);

    long size();

    @CXXReference
    string key(long i);

    @CXXReference
    string value(long i);

    @CXXReference
    @FFITypeAlias("const std::vector<std::string>")
    vector<string> keys();

    @CXXReference
    @FFITypeAlias("const std::vector<std::string>")
    vector<string> values();

    @CXXValue
    @FFITypeAlias("std::vector<std::pair<std::string,std::string>>")
    vector<pair<string, string>> sorted_pairs();

    int FindKey(@CXXReference string key);

    @CXXValue
    @FFITypeAlias("std::shared_ptr<arrow::KeyValueMetadata>")
    shared_ptr<KeyValueMetadata> Copy();

    @CXXValue
    @FFITypeAlias("std::shared_ptr<arrow::KeyValueMetadata>")
    shared_ptr<KeyValueMetadata> Merge(@CXXReference KeyValueMetadata other);

    boolean Equals(@CXXReference KeyValueMetadata other);

    @CXXValue
    string ToString();

    static KeyValueMetadata cast(final long __foreign_address) {
        try {
            Class<KeyValueMetadata> clz = (Class<KeyValueMetadata>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(KeyValueMetadata.class, true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static KeyValueMetadata cast(final FFIPointer __foreign_pointer) {
        return KeyValueMetadata.cast(__foreign_pointer.getAddress());
    }

    static Factory getFactory() {
        return FFITypeFactory.getFactory(FFITypeFactory.getFFITypeName(KeyValueMetadata.class, true));
    }

    static KeyValueMetadata create(
            @CXXValue @FFITypeAlias("std::vector<std::string>") vector<string> keys,
            @CXXValue @FFITypeAlias("std::vector<std::string>") vector<string> values) {
        return KeyValueMetadata.getFactory().create(keys, values);
    }

    static KeyValueMetadata create(
            @CXXReference @FFITypeAlias("const std::unordered_map<std::string,std::string>") unordered_map<string, string> map) {
        return KeyValueMetadata.getFactory().create(map);
    }

    @FFIFactory
    @CXXHead(
            system = "arrow/util/key_value_metadata.h"
    )
    interface Factory {
        KeyValueMetadata create(
                @CXXValue @FFITypeAlias("std::vector<std::string>") vector<string> keys,
                @CXXValue @FFITypeAlias("std::vector<std::string>") vector<string> values);

        KeyValueMetadata create(
                @CXXReference @FFITypeAlias("const std::unordered_map<std::string,std::string>") unordered_map<string, string> map);
    }

    @FFIGen
    @FFILibrary(
            value = "arrow::KeyValueMetadata",
            namespace = "arrow::KeyValueMetadata"
    )
    @CXXHead(
            system = "arrow/util/key_value_metadata.h"
    )
    interface Library {
        Library INSTANCE = FFITypeFactory.getLibrary(Library.class);

        @CXXValue
        @FFITypeAlias("std::shared_ptr<arrow::KeyValueMetadata>")
        shared_ptr<KeyValueMetadata> Make(
                @CXXValue @FFITypeAlias("std::vector<std::string>") vector<string> keys,
                @CXXValue @FFITypeAlias("std::vector<std::string>") vector<string> values);
    }
}
