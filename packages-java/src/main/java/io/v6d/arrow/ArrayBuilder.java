// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.arrow;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXPointer;
import com.alibaba.fastffi.CXXReference;
import com.alibaba.fastffi.CXXValue;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import io.v6d.std.shared_ptr;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("arrow::ArrayBuilder")
@FFIGen
@CXXHead(
        system = "arrow/array/builder_base.h"
)
public interface ArrayBuilder extends CXXPointer {
    ArrayBuilder child(int i);

    @CXXReference
    @FFITypeAlias("const std::shared_ptr<arrow::ArrayBuilder>")
    shared_ptr<ArrayBuilder> child_builder(int i);

    int num_children();

    long length();

    long null_count();

    long capacity();

    @CXXValue
    Status Resize(long capacity);

    @CXXValue
    Status Reserve(long additional_capacity);

    void Reset();

    @CXXValue
    Status AppendScalar(@CXXReference Scalar scalar);

    @CXXValue
    Status AppendScalar(@CXXReference Scalar scalar, long n_repeats);

    @CXXValue
    Status AppendScalars(@CXXReference ScalarVector scalars);

    @CXXValue
    Status AppendArraySlice(@CXXReference ArrayData array, long offset, long length);

    @CXXValue
    Status Advance(long elements);

    static ArrayBuilder cast(final long __foreign_address) {
        try {
            Class<ArrayBuilder> clz = (Class<ArrayBuilder>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(ArrayBuilder.class, true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static ArrayBuilder cast(final FFIPointer __foreign_pointer) {
        return ArrayBuilder.cast(__foreign_pointer.getAddress());
    }
}
