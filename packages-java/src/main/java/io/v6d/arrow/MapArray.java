// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.arrow;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXPointer;
import com.alibaba.fastffi.CXXReference;
import com.alibaba.fastffi.CXXValue;
import com.alibaba.fastffi.FFIExpr;
import com.alibaba.fastffi.FFIFactory;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFILibrary;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import io.v6d.std.CChar;
import io.v6d.std.shared_ptr;
import io.v6d.std.string;
import io.v6d.std.vector;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("arrow::MapArray")
@FFIGen
@CXXHead(
        system = "arrow/array/array_nested.h"
)
public interface MapArray extends ListArray, FFIPointer {
    MapType map_type();

    @CXXValue
    @FFITypeAlias("std::shared_ptr<arrow::Array>")
    shared_ptr<Array> keys();

    @CXXValue
    @FFITypeAlias("std::shared_ptr<arrow::Array>")
    shared_ptr<Array> items();

    static MapArray cast(final long __foreign_address) {
        try {
            Class<MapArray> clz = (Class<MapArray>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(MapArray.class, true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static MapArray cast(final FFIPointer __foreign_pointer) {
        return MapArray.cast(__foreign_pointer.getAddress());
    }

    static Factory getFactory() {
        return FFITypeFactory.getFactory(FFITypeFactory.getFFITypeName(MapArray.class, true));
    }

    static MapArray create(
            @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::ArrayData>") shared_ptr<ArrayData> data) {
        return MapArray.getFactory().create(data);
    }

    static MapArray create(
            @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::DataType>") shared_ptr<DataType> type,
            long length,
            @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::Buffer>") shared_ptr<Buffer> value_offsets,
            @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::Array>") shared_ptr<Array> keys,
            @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::Array>") shared_ptr<Array> items,
            @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::Buffer>") shared_ptr<Buffer> null_bitmap,
            long null_count, long offset) {
        return MapArray.getFactory().create(type, length, value_offsets, keys, items, null_bitmap, null_count, offset);
    }

    static MapArray create(
            @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::DataType>") shared_ptr<DataType> type,
            long length,
            @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::Buffer>") shared_ptr<Buffer> value_offsets,
            @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::Array>") shared_ptr<Array> values,
            @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::Buffer>") shared_ptr<Buffer> null_bitmap,
            long null_count, long offset) {
        return MapArray.getFactory().create(type, length, value_offsets, values, null_bitmap, null_count, offset);
    }

    @FFIFactory
    @CXXHead(
            system = "arrow/array/array_nested.h"
    )
    interface Factory {
        MapArray create(
                @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::ArrayData>") shared_ptr<ArrayData> data);

        MapArray create(
                @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::DataType>") shared_ptr<DataType> type,
                long length,
                @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::Buffer>") shared_ptr<Buffer> value_offsets,
                @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::Array>") shared_ptr<Array> keys,
                @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::Array>") shared_ptr<Array> items,
                @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::Buffer>") shared_ptr<Buffer> null_bitmap,
                long null_count, long offset);

        MapArray create(
                @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::DataType>") shared_ptr<DataType> type,
                long length,
                @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::Buffer>") shared_ptr<Buffer> value_offsets,
                @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::Array>") shared_ptr<Array> values,
                @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::Buffer>") shared_ptr<Buffer> null_bitmap,
                long null_count, long offset);
    }

    @FFIGen
    @FFILibrary(
            value = "arrow::MapArray",
            namespace = "arrow::MapArray"
    )
    @CXXHead(
            system = "arrow/array/array_nested.h"
    )
    interface Library {
        Library INSTANCE = FFITypeFactory.getLibrary(Library.class);

        @CXXValue
        @FFITypeAlias("arrow::Result<std::shared_ptr<arrow::Array>>")
        Result<shared_ptr<Array>> FromArrays(
                @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::Array>") shared_ptr<Array> offsets,
                @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::Array>") shared_ptr<Array> keys,
                @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::Array>") shared_ptr<Array> items,
                MemoryPool pool);

        @CXXValue
        @FFITypeAlias("arrow::Result<std::shared_ptr<arrow::Array>>")
        Result<shared_ptr<Array>> FromArrays(
                @CXXValue @FFITypeAlias("std::shared_ptr<arrow::DataType>") shared_ptr<DataType> type,
                @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::Array>") shared_ptr<Array> offsets,
                @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::Array>") shared_ptr<Array> keys,
                @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::Array>") shared_ptr<Array> items,
                MemoryPool pool);

        @CXXValue
        Status ValidateChildData(
                @CXXReference @FFITypeAlias("const std::vector<std::shared_ptr<arrow::ArrayData>>") vector<shared_ptr<ArrayData>> child_data);
    }

    @FFITypeAlias("arrow::MapArray::TypeClass")
    @FFIGen
    @CXXHead(
            system = "arrow/array/array_nested.h"
    )
    interface TypeClass extends CXXPointer {
        @FFIExpr("{0}")
        MapType get();

        @CXXValue
        @FFITypeAlias("std::shared_ptr<arrow::Field>")
        shared_ptr<Field> key_field();

        @CXXValue
        @FFITypeAlias("std::shared_ptr<arrow::DataType>")
        shared_ptr<DataType> key_type();

        @CXXValue
        @FFITypeAlias("std::shared_ptr<arrow::Field>")
        shared_ptr<Field> item_field();

        @CXXValue
        @FFITypeAlias("std::shared_ptr<arrow::DataType>")
        shared_ptr<DataType> item_type();

        @CXXValue
        string ToString();

        @CXXValue
        string name();

        boolean keys_sorted();

        static TypeClass cast(final long __foreign_address) {
            try {
                Class<TypeClass> clz = (Class<TypeClass>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(TypeClass.class, true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static TypeClass cast(final FFIPointer __foreign_pointer) {
            return TypeClass.cast(__foreign_pointer.getAddress());
        }

        static Factory getFactory() {
            return FFITypeFactory.getFactory(FFITypeFactory.getFFITypeName(TypeClass.class, true));
        }

        static TypeClass create(
                @CXXValue @FFITypeAlias("std::shared_ptr<arrow::DataType>") shared_ptr<DataType> key_type,
                @CXXValue @FFITypeAlias("std::shared_ptr<arrow::DataType>") shared_ptr<DataType> item_type,
                boolean keys_sorted) {
            return TypeClass.getFactory().create(key_type, item_type, keys_sorted);
        }

        static TypeClass create(
                @CXXValue @FFITypeAlias("std::shared_ptr<arrow::Field>") shared_ptr<Field> value_field,
                boolean keys_sorted) {
            return TypeClass.getFactory().create(value_field, keys_sorted);
        }

        @FFIFactory
        @CXXHead(
                system = "arrow/array/array_nested.h"
        )
        interface Factory {
            TypeClass create(
                    @CXXValue @FFITypeAlias("std::shared_ptr<arrow::DataType>") shared_ptr<DataType> key_type,
                    @CXXValue @FFITypeAlias("std::shared_ptr<arrow::DataType>") shared_ptr<DataType> item_type,
                    boolean keys_sorted);

            TypeClass create(
                    @CXXValue @FFITypeAlias("std::shared_ptr<arrow::Field>") shared_ptr<Field> value_field,
                    boolean keys_sorted);
        }

        @FFIGen
        @FFILibrary(
                value = "arrow::MapType",
                namespace = "arrow::MapType"
        )
        @CXXHead(
                system = "arrow/array/array_nested.h"
        )
        interface Library {
            Library INSTANCE = FFITypeFactory.getLibrary(Library.class);

            CChar type_name();

            @CXXValue
            @FFITypeAlias("arrow::Result<std::shared_ptr<arrow::DataType>>")
            Result<shared_ptr<DataType>> Make(
                    @CXXValue @FFITypeAlias("std::shared_ptr<arrow::Field>") shared_ptr<Field> value_field,
                    boolean keys_sorted);
        }
    }
}
