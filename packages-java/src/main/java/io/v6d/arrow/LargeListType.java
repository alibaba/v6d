// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.arrow;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXPointer;
import com.alibaba.fastffi.CXXReference;
import com.alibaba.fastffi.CXXValue;
import com.alibaba.fastffi.FFIExpr;
import com.alibaba.fastffi.FFIFactory;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFILibrary;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import io.v6d.std.CChar;
import io.v6d.std.shared_ptr;
import io.v6d.std.string;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("arrow::LargeListType")
@FFIGen
@CXXHead(
        system = "arrow/type.h"
)
public interface LargeListType extends BaseListType, FFIPointer {
    @CXXValue
    DataTypeLayout layout();

    @CXXValue
    string ToString();

    @CXXValue
    string name();

    static LargeListType cast(final long __foreign_address) {
        try {
            Class<LargeListType> clz = (Class<LargeListType>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(LargeListType.class, true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static LargeListType cast(final FFIPointer __foreign_pointer) {
        return LargeListType.cast(__foreign_pointer.getAddress());
    }

    static Factory getFactory() {
        return FFITypeFactory.getFactory(FFITypeFactory.getFFITypeName(LargeListType.class, true));
    }

    static LargeListType create(
            @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::DataType>") shared_ptr<DataType> value_type) {
        return LargeListType.getFactory().create(value_type);
    }

    @FFIFactory
    @CXXHead(
            system = "arrow/type.h"
    )
    interface Factory {
        LargeListType create(
                @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::DataType>") shared_ptr<DataType> value_type);
    }

    @FFIGen
    @FFILibrary(
            value = "arrow::LargeListType",
            namespace = "arrow::LargeListType"
    )
    @CXXHead(
            system = "arrow/type.h"
    )
    interface Library {
        Library INSTANCE = FFITypeFactory.getLibrary(Library.class);

        CChar type_name();
    }

    @FFITypeAlias("arrow::LargeListType::offset_type")
    @FFIGen
    @CXXHead(
            system = "arrow/type.h"
    )
    interface offset_type extends CXXPointer {
        @FFIExpr("(*{0})")
        long get();

        @FFIExpr("*{0} = (arrow::LargeListType::offset_type){1}")
        void set(long __value);

        static offset_type cast(final long __foreign_address) {
            try {
                Class<offset_type> clz = (Class<offset_type>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(offset_type.class, true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static offset_type cast(final FFIPointer __foreign_pointer) {
            return offset_type.cast(__foreign_pointer.getAddress());
        }

        static Factory getFactory() {
            return FFITypeFactory.getFactory(FFITypeFactory.getFFITypeName(offset_type.class, true));
        }

        static offset_type create() {
            return offset_type.getFactory().create();
        }

        static offset_type create(long __value) {
            return offset_type.getFactory().create(__value);
        }

        @FFIFactory
        @CXXHead(
                system = "arrow/type.h"
        )
        interface Factory {
            offset_type create();

            offset_type create(long __value);
        }
    }
}
