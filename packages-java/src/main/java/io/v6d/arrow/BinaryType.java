// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.arrow;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXPointer;
import com.alibaba.fastffi.CXXValue;
import com.alibaba.fastffi.FFIExpr;
import com.alibaba.fastffi.FFIFactory;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFILibrary;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import io.v6d.std.CChar;
import io.v6d.std.string;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("arrow::BinaryType")
@FFIGen
@CXXHead(
        system = "arrow/type.h"
)
public interface BinaryType extends BaseBinaryType, FFIPointer {
    @CXXValue
    DataTypeLayout layout();

    @CXXValue
    string ToString();

    @CXXValue
    string name();

    static BinaryType cast(final long __foreign_address) {
        try {
            Class<BinaryType> clz = (Class<BinaryType>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(BinaryType.class, true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static BinaryType cast(final FFIPointer __foreign_pointer) {
        return BinaryType.cast(__foreign_pointer.getAddress());
    }

    static Factory getFactory() {
        return FFITypeFactory.getFactory(FFITypeFactory.getFFITypeName(BinaryType.class, true));
    }

    static BinaryType create() {
        return BinaryType.getFactory().create();
    }

    @FFIFactory
    @CXXHead(
            system = "arrow/type.h"
    )
    interface Factory {
        BinaryType create();
    }

    @FFIGen
    @FFILibrary(
            value = "arrow::BinaryType",
            namespace = "arrow::BinaryType"
    )
    @CXXHead(
            system = "arrow/type.h"
    )
    interface Library {
        Library INSTANCE = FFITypeFactory.getLibrary(Library.class);

        CChar type_name();
    }

    @FFITypeAlias("arrow::BinaryType::PhysicalType")
    @FFIGen
    @CXXHead(
            system = "arrow/type.h"
    )
    interface PhysicalType extends CXXPointer {
        @FFIExpr("{0}")
        BinaryType get();

        @CXXValue
        DataTypeLayout layout();

        @CXXValue
        string ToString();

        @CXXValue
        string name();

        static PhysicalType cast(final long __foreign_address) {
            try {
                Class<PhysicalType> clz = (Class<PhysicalType>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(PhysicalType.class, true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static PhysicalType cast(final FFIPointer __foreign_pointer) {
            return PhysicalType.cast(__foreign_pointer.getAddress());
        }

        static Factory getFactory() {
            return FFITypeFactory.getFactory(FFITypeFactory.getFFITypeName(PhysicalType.class, true));
        }

        static PhysicalType create() {
            return PhysicalType.getFactory().create();
        }

        @FFIFactory
        @CXXHead(
                system = "arrow/type.h"
        )
        interface Factory {
            PhysicalType create();
        }

        @FFIGen
        @FFILibrary(
                value = "arrow::BinaryType",
                namespace = "arrow::BinaryType"
        )
        @CXXHead(
                system = "arrow/type.h"
        )
        interface Library {
            Library INSTANCE = FFITypeFactory.getLibrary(Library.class);

            CChar type_name();
        }
    }

    @FFITypeAlias("arrow::BinaryType::offset_type")
    @FFIGen
    @CXXHead(
            system = "arrow/type.h"
    )
    interface offset_type extends CXXPointer {
        @FFIExpr("(*{0})")
        int get();

        @FFIExpr("*{0} = (arrow::BinaryType::offset_type){1}")
        void set(int __value);

        static offset_type cast(final long __foreign_address) {
            try {
                Class<offset_type> clz = (Class<offset_type>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(offset_type.class, true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static offset_type cast(final FFIPointer __foreign_pointer) {
            return offset_type.cast(__foreign_pointer.getAddress());
        }

        static Factory getFactory() {
            return FFITypeFactory.getFactory(FFITypeFactory.getFFITypeName(offset_type.class, true));
        }

        static offset_type create() {
            return offset_type.getFactory().create();
        }

        static offset_type create(int __value) {
            return offset_type.getFactory().create(__value);
        }

        @FFIFactory
        @CXXHead(
                system = "arrow/type.h"
        )
        interface Factory {
            offset_type create();

            offset_type create(int __value);
        }
    }
}
