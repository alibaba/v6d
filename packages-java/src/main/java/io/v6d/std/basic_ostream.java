// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.std;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXPointer;
import com.alibaba.fastffi.CXXReference;
import com.alibaba.fastffi.CXXValue;
import com.alibaba.fastffi.FFIExpr;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("std::basic_ostream")
@FFIGen
@CXXHead(
        system = "ostream"
)
public interface basic_ostream<_CharT> extends CXXPointer {
    @CXXReference
    basic_ostream<_CharT> put(@CXXValue _CharT __c);

    @CXXReference
    basic_ostream<_CharT> write(_CharT __s, long __n);

    @CXXReference
    basic_ostream<_CharT> flush();

    @CXXValue
    pos_type<_CharT> tellp();

    @CXXReference
    basic_ostream<_CharT> seekp(@CXXValue pos_type<_CharT> __pos);

    @CXXReference
    basic_ostream<_CharT> seekp(@CXXValue off_type<_CharT> __off,
            @CXXValue @FFITypeAlias("std::ios_base::seekdir") ios_base.seekdir __dir);

    static <_CharT> basic_ostream<_CharT> cast(Class<_CharT> ___chart,
            final long __foreign_address) {
        try {
            Class<basic_ostream<_CharT>> clz = (Class<basic_ostream<_CharT>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(basic_ostream.class, ___chart), true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static <_CharT> basic_ostream<_CharT> cast(Class<_CharT> ___chart,
            final FFIPointer __foreign_pointer) {
        return basic_ostream.cast(___chart, __foreign_pointer.getAddress());
    }

    @FFITypeAlias("std::basic_ostream<%s>::char_type")
    @FFIGen
    interface char_type<_CharT> extends CXXPointer {
        @FFIExpr("{0}")
        _CharT get();

        static <_CharT> char_type<_CharT> cast(Class<_CharT> ___chart,
                final long __foreign_address) {
            try {
                Class<char_type<_CharT>> clz = (Class<char_type<_CharT>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(char_type.class, ___chart), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_CharT> char_type<_CharT> cast(Class<_CharT> ___chart,
                final FFIPointer __foreign_pointer) {
            return char_type.cast(___chart, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("std::basic_ostream<%s>::pos_type")
    @FFIGen
    @CXXHead(
            system = "ostream"
    )
    interface pos_type<_CharT> extends CXXPointer {
        static <_CharT> pos_type<_CharT> cast(Class<_CharT> ___chart,
                final long __foreign_address) {
            try {
                Class<pos_type<_CharT>> clz = (Class<pos_type<_CharT>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(pos_type.class, ___chart), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_CharT> pos_type<_CharT> cast(Class<_CharT> ___chart,
                final FFIPointer __foreign_pointer) {
            return pos_type.cast(___chart, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("std::basic_ostream<%s>::int_type")
    @FFIGen
    @CXXHead(
            system = "ostream"
    )
    interface int_type<_CharT> extends CXXPointer {
        static <_CharT> int_type<_CharT> cast(Class<_CharT> ___chart,
                final long __foreign_address) {
            try {
                Class<int_type<_CharT>> clz = (Class<int_type<_CharT>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(int_type.class, ___chart), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_CharT> int_type<_CharT> cast(Class<_CharT> ___chart,
                final FFIPointer __foreign_pointer) {
            return int_type.cast(___chart, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("std::basic_ostream<%s>::off_type")
    @FFIGen
    @CXXHead(
            system = "ostream"
    )
    interface off_type<_CharT> extends CXXPointer {
        static <_CharT> off_type<_CharT> cast(Class<_CharT> ___chart,
                final long __foreign_address) {
            try {
                Class<off_type<_CharT>> clz = (Class<off_type<_CharT>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(off_type.class, ___chart), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_CharT> off_type<_CharT> cast(Class<_CharT> ___chart,
                final FFIPointer __foreign_pointer) {
            return off_type.cast(___chart, __foreign_pointer.getAddress());
        }
    }
}
