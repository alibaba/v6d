// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.std.impl.basic_string;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXPointer;
import com.alibaba.fastffi.CXXValue;
import com.alibaba.fastffi.FFIExpr;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import io.v6d.std.CChar;
import io.v6d.std.allocator;
import io.v6d.std.impl.allocator.ConstPointerChar;
import io.v6d.std.impl.allocator.ConstReferenceChar;
import io.v6d.std.impl.allocator.PointerChar;
import io.v6d.std.impl.allocator.ReferenceChar;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("std::basic_string<char, std::char_traits<char>, std::allocator<char>>::allocator_type")
@FFIGen
@CXXHead(
        system = "string"
)
public interface AllocatorTypeCharStdCharTraitsCharStdAllocatorChar extends CXXPointer {
    @FFIExpr("{0}")
    allocator<CChar> get();

    CChar allocate(long __n);

    void deallocate(CChar __p, long __n);

    @CXXValue
    PointerChar address(@CXXValue ReferenceChar __x);

    @CXXValue
    ConstPointerChar address(@CXXValue ConstReferenceChar __x);

    CChar allocate(long __n, @FFITypeAlias("const void*") long arg1);

    long max_size();

    void destroy(@CXXValue PointerChar __p);

    static AllocatorTypeCharStdCharTraitsCharStdAllocatorChar cast(final long __foreign_address) {
        try {
            Class<AllocatorTypeCharStdCharTraitsCharStdAllocatorChar> clz = (Class<AllocatorTypeCharStdCharTraitsCharStdAllocatorChar>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(AllocatorTypeCharStdCharTraitsCharStdAllocatorChar.class, true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static AllocatorTypeCharStdCharTraitsCharStdAllocatorChar cast(
            final FFIPointer __foreign_pointer) {
        return AllocatorTypeCharStdCharTraitsCharStdAllocatorChar.cast(__foreign_pointer.getAddress());
    }
}
