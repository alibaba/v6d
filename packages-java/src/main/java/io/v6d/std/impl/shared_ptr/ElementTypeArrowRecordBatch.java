// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.std.impl.shared_ptr;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXPointer;
import com.alibaba.fastffi.CXXReference;
import com.alibaba.fastffi.CXXValue;
import com.alibaba.fastffi.FFIExpr;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFILibrary;
import com.alibaba.fastffi.FFINameAlias;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import io.v6d.arrow.Array;
import io.v6d.arrow.ArrayData;
import io.v6d.arrow.RecordBatch;
import io.v6d.arrow.Result;
import io.v6d.arrow.Schema;
import io.v6d.arrow.Status;
import io.v6d.arrow.StructArray;
import io.v6d.std.CInt;
import io.v6d.std.shared_ptr;
import io.v6d.std.string;
import io.v6d.std.vector;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("std::shared_ptr<arrow::RecordBatch>::element_type")
@FFIGen
@CXXHead(
        system = "__memory/shared_ptr.h"
)
public interface ElementTypeArrowRecordBatch extends CXXPointer {
    @FFIExpr("{0}")
    RecordBatch get();

    @CXXValue
    @FFITypeAlias("arrow::Result<std::shared_ptr<arrow::StructArray>>")
    Result<shared_ptr<StructArray>> ToStructArray();

    boolean Equals(@CXXReference RecordBatch other, boolean check_metadata);

    boolean ApproxEquals(@CXXReference RecordBatch other);

    @CXXReference
    @FFITypeAlias("const std::shared_ptr<arrow::Schema>")
    shared_ptr<Schema> schema();

    @CXXValue
    @FFITypeAlias("std::shared_ptr<arrow::Array>")
    shared_ptr<Array> GetColumnByName(@CXXReference string name);

    @CXXValue
    @FFITypeAlias("arrow::Result<std::shared_ptr<arrow::RecordBatch>>")
    Result<shared_ptr<RecordBatch>> AddColumn(int i, @CXXValue string field_name,
            @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::Array>") shared_ptr<Array> column);

    @CXXReference
    string column_name(int i);

    int num_columns();

    long num_rows();

    @CXXValue
    @FFITypeAlias("std::shared_ptr<arrow::RecordBatch>")
    shared_ptr<RecordBatch> Slice(long offset);

    @CXXValue
    string ToString();

    @CXXValue
    @FFITypeAlias("arrow::Result<std::shared_ptr<arrow::RecordBatch>>")
    Result<shared_ptr<RecordBatch>> SelectColumns(
            @CXXReference @FFITypeAlias("const std::vector<int>") vector<CInt> indices);

    @CXXValue
    Status Validate();

    @CXXValue
    Status ValidateFull();

    static ElementTypeArrowRecordBatch cast(final long __foreign_address) {
        try {
            Class<ElementTypeArrowRecordBatch> clz = (Class<ElementTypeArrowRecordBatch>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(ElementTypeArrowRecordBatch.class, true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static ElementTypeArrowRecordBatch cast(final FFIPointer __foreign_pointer) {
        return ElementTypeArrowRecordBatch.cast(__foreign_pointer.getAddress());
    }

    @FFIGen
    @FFILibrary(
            value = "arrow::RecordBatch",
            namespace = "arrow::RecordBatch"
    )
    @CXXHead(
            system = "__memory/shared_ptr.h"
    )
    interface Library {
        Library INSTANCE = FFITypeFactory.getLibrary(Library.class);

        @CXXValue
        @FFITypeAlias("std::shared_ptr<arrow::RecordBatch>")
        shared_ptr<RecordBatch> Make(
                @CXXValue @FFITypeAlias("std::shared_ptr<arrow::Schema>") shared_ptr<Schema> schema,
                long num_rows,
                @CXXValue @FFITypeAlias("std::vector<std::shared_ptr<arrow::Array>>") vector<shared_ptr<Array>> columns);

        @CXXValue
        @FFITypeAlias("std::shared_ptr<arrow::RecordBatch>")
        @FFINameAlias("Make")
        shared_ptr<RecordBatch> Make_1(
                @CXXValue @FFITypeAlias("std::shared_ptr<arrow::Schema>") shared_ptr<Schema> schema,
                long num_rows,
                @CXXValue @FFITypeAlias("std::vector<std::shared_ptr<arrow::ArrayData>>") vector<shared_ptr<ArrayData>> columns);

        @CXXValue
        @FFITypeAlias("arrow::Result<std::shared_ptr<arrow::RecordBatch>>")
        Result<shared_ptr<RecordBatch>> FromStructArray(
                @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::Array>") shared_ptr<Array> array);
    }
}
