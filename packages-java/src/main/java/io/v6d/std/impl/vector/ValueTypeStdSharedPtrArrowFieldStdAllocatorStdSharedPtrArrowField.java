// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.std.impl.vector;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXPointer;
import com.alibaba.fastffi.CXXReference;
import com.alibaba.fastffi.FFIExpr;
import com.alibaba.fastffi.FFIFactory;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFINameAlias;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import io.v6d.arrow.Field;
import io.v6d.std.impl.shared_ptr.ElementTypeArrowField;
import io.v6d.std.shared_ptr;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("std::vector<std::shared_ptr<arrow::Field>, std::allocator<std::shared_ptr<arrow::Field>>>::value_type")
@FFIGen
@CXXHead(
        system = "vector"
)
public interface ValueTypeStdSharedPtrArrowFieldStdAllocatorStdSharedPtrArrowField extends CXXPointer {
    @FFIExpr("{0}")
    shared_ptr<Field> get();

    void swap(@CXXReference @FFITypeAlias("std::shared_ptr<arrow::Field>") shared_ptr<Field> __r);

    void reset();

    @FFINameAlias("get")
    ElementTypeArrowField get_1();

    long use_count();

    boolean unique();

    boolean __owner_equivalent(
            @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::Field>") shared_ptr<Field> __p);

    static ValueTypeStdSharedPtrArrowFieldStdAllocatorStdSharedPtrArrowField cast(
            final long __foreign_address) {
        try {
            Class<ValueTypeStdSharedPtrArrowFieldStdAllocatorStdSharedPtrArrowField> clz = (Class<ValueTypeStdSharedPtrArrowFieldStdAllocatorStdSharedPtrArrowField>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(ValueTypeStdSharedPtrArrowFieldStdAllocatorStdSharedPtrArrowField.class, true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static ValueTypeStdSharedPtrArrowFieldStdAllocatorStdSharedPtrArrowField cast(
            final FFIPointer __foreign_pointer) {
        return ValueTypeStdSharedPtrArrowFieldStdAllocatorStdSharedPtrArrowField.cast(__foreign_pointer.getAddress());
    }

    static Factory getFactory() {
        return FFITypeFactory.getFactory(FFITypeFactory.getFFITypeName(ValueTypeStdSharedPtrArrowFieldStdAllocatorStdSharedPtrArrowField.class, true));
    }

    static ValueTypeStdSharedPtrArrowFieldStdAllocatorStdSharedPtrArrowField create() {
        return ValueTypeStdSharedPtrArrowFieldStdAllocatorStdSharedPtrArrowField.getFactory().create();
    }

    static ValueTypeStdSharedPtrArrowFieldStdAllocatorStdSharedPtrArrowField create(
            @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::Field>") shared_ptr<Field> __r) {
        return ValueTypeStdSharedPtrArrowFieldStdAllocatorStdSharedPtrArrowField.getFactory().create(__r);
    }

    @FFIFactory
    @CXXHead(
            system = "vector"
    )
    interface Factory {
        ValueTypeStdSharedPtrArrowFieldStdAllocatorStdSharedPtrArrowField create();

        ValueTypeStdSharedPtrArrowFieldStdAllocatorStdSharedPtrArrowField create(
                @CXXReference @FFITypeAlias("const std::shared_ptr<arrow::Field>") shared_ptr<Field> __r);
    }
}
