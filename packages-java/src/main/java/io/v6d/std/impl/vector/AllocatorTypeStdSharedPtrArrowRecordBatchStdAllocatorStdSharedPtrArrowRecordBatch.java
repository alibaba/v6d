// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.std.impl.vector;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXPointer;
import com.alibaba.fastffi.CXXValue;
import com.alibaba.fastffi.FFIExpr;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import io.v6d.arrow.RecordBatch;
import io.v6d.std.allocator;
import io.v6d.std.impl.allocator.ConstPointerStdSharedPtrArrowRecordBatch;
import io.v6d.std.impl.allocator.ConstReferenceStdSharedPtrArrowRecordBatch;
import io.v6d.std.impl.allocator.PointerStdSharedPtrArrowRecordBatch;
import io.v6d.std.impl.allocator.ReferenceStdSharedPtrArrowRecordBatch;
import io.v6d.std.shared_ptr;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("std::vector<std::shared_ptr<arrow::RecordBatch>, std::allocator<std::shared_ptr<arrow::RecordBatch>>>::allocator_type")
@FFIGen
@CXXHead(
        system = "vector"
)
public interface AllocatorTypeStdSharedPtrArrowRecordBatchStdAllocatorStdSharedPtrArrowRecordBatch extends CXXPointer {
    @FFIExpr("{0}")
    allocator<shared_ptr<RecordBatch>> get();

    @FFITypeAlias("std::shared_ptr<arrow::RecordBatch>")
    shared_ptr<RecordBatch> allocate(long __n);

    void deallocate(
            @FFITypeAlias("std::shared_ptr<arrow::RecordBatch>") shared_ptr<RecordBatch> __p,
            long __n);

    @CXXValue
    PointerStdSharedPtrArrowRecordBatch address(
            @CXXValue ReferenceStdSharedPtrArrowRecordBatch __x);

    @CXXValue
    ConstPointerStdSharedPtrArrowRecordBatch address(
            @CXXValue ConstReferenceStdSharedPtrArrowRecordBatch __x);

    @FFITypeAlias("std::shared_ptr<arrow::RecordBatch>")
    shared_ptr<RecordBatch> allocate(long __n, @FFITypeAlias("const void*") long arg1);

    long max_size();

    void destroy(@CXXValue PointerStdSharedPtrArrowRecordBatch __p);

    static AllocatorTypeStdSharedPtrArrowRecordBatchStdAllocatorStdSharedPtrArrowRecordBatch cast(
            final long __foreign_address) {
        try {
            Class<AllocatorTypeStdSharedPtrArrowRecordBatchStdAllocatorStdSharedPtrArrowRecordBatch> clz = (Class<AllocatorTypeStdSharedPtrArrowRecordBatchStdAllocatorStdSharedPtrArrowRecordBatch>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(AllocatorTypeStdSharedPtrArrowRecordBatchStdAllocatorStdSharedPtrArrowRecordBatch.class, true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static AllocatorTypeStdSharedPtrArrowRecordBatchStdAllocatorStdSharedPtrArrowRecordBatch cast(
            final FFIPointer __foreign_pointer) {
        return AllocatorTypeStdSharedPtrArrowRecordBatchStdAllocatorStdSharedPtrArrowRecordBatch.cast(__foreign_pointer.getAddress());
    }
}
