// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.std.impl.vector;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXPointer;
import com.alibaba.fastffi.CXXValue;
import com.alibaba.fastffi.FFIExpr;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import io.v6d.arrow.Scalar;
import io.v6d.std.allocator;
import io.v6d.std.impl.allocator.ConstPointerStdSharedPtrArrowScalar;
import io.v6d.std.impl.allocator.ConstReferenceStdSharedPtrArrowScalar;
import io.v6d.std.impl.allocator.PointerStdSharedPtrArrowScalar;
import io.v6d.std.impl.allocator.ReferenceStdSharedPtrArrowScalar;
import io.v6d.std.shared_ptr;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("std::vector<std::shared_ptr<arrow::Scalar>, std::allocator<std::shared_ptr<arrow::Scalar>>>::allocator_type")
@FFIGen
@CXXHead(
        system = "vector"
)
public interface AllocatorTypeStdSharedPtrArrowScalarStdAllocatorStdSharedPtrArrowScalar extends CXXPointer {
    @FFIExpr("{0}")
    allocator<shared_ptr<Scalar>> get();

    @FFITypeAlias("std::shared_ptr<arrow::Scalar>")
    shared_ptr<Scalar> allocate(long __n);

    void deallocate(@FFITypeAlias("std::shared_ptr<arrow::Scalar>") shared_ptr<Scalar> __p,
            long __n);

    @CXXValue
    PointerStdSharedPtrArrowScalar address(@CXXValue ReferenceStdSharedPtrArrowScalar __x);

    @CXXValue
    ConstPointerStdSharedPtrArrowScalar address(
            @CXXValue ConstReferenceStdSharedPtrArrowScalar __x);

    @FFITypeAlias("std::shared_ptr<arrow::Scalar>")
    shared_ptr<Scalar> allocate(long __n, @FFITypeAlias("const void*") long arg1);

    long max_size();

    void destroy(@CXXValue PointerStdSharedPtrArrowScalar __p);

    static AllocatorTypeStdSharedPtrArrowScalarStdAllocatorStdSharedPtrArrowScalar cast(
            final long __foreign_address) {
        try {
            Class<AllocatorTypeStdSharedPtrArrowScalarStdAllocatorStdSharedPtrArrowScalar> clz = (Class<AllocatorTypeStdSharedPtrArrowScalarStdAllocatorStdSharedPtrArrowScalar>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(AllocatorTypeStdSharedPtrArrowScalarStdAllocatorStdSharedPtrArrowScalar.class, true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static AllocatorTypeStdSharedPtrArrowScalarStdAllocatorStdSharedPtrArrowScalar cast(
            final FFIPointer __foreign_pointer) {
        return AllocatorTypeStdSharedPtrArrowScalarStdAllocatorStdSharedPtrArrowScalar.cast(__foreign_pointer.getAddress());
    }
}
