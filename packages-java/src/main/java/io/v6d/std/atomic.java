// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.std;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXPointer;
import com.alibaba.fastffi.CXXValue;
import com.alibaba.fastffi.FFIExpr;
import com.alibaba.fastffi.FFIFactory;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("std::atomic")
@FFIGen
@CXXHead(
        system = "atomic"
)
public interface atomic<_Tp> extends __atomic_base<_Tp>, FFIPointer {
    static <_Tp> atomic<_Tp> cast(Class<_Tp> ___tp, final long __foreign_address) {
        try {
            Class<atomic<_Tp>> clz = (Class<atomic<_Tp>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(atomic.class, ___tp), true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static <_Tp> atomic<_Tp> cast(Class<_Tp> ___tp, final FFIPointer __foreign_pointer) {
        return atomic.cast(___tp, __foreign_pointer.getAddress());
    }

    static <_Tp> Factory<_Tp> getFactory(Class<_Tp> ___tp) {
        return FFITypeFactory.getFactory(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(atomic.class, ___tp), true));
    }

    static <_Tp> atomic<_Tp> create(Class<_Tp> ___tp, @CXXValue _Tp __d) {
        return atomic.getFactory(___tp).create(__d);
    }

    @FFIFactory
    @CXXHead(
            system = "atomic"
    )
    interface Factory<_Tp> {
        atomic<_Tp> create(@CXXValue _Tp __d);
    }

    @FFITypeAlias("std::atomic<%s>::value_type")
    @FFIGen
    interface value_type<_Tp> extends CXXPointer {
        @FFIExpr("{0}")
        _Tp get();

        static <_Tp> value_type<_Tp> cast(Class<_Tp> ___tp, final long __foreign_address) {
            try {
                Class<value_type<_Tp>> clz = (Class<value_type<_Tp>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(value_type.class, ___tp), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_Tp> value_type<_Tp> cast(Class<_Tp> ___tp, final FFIPointer __foreign_pointer) {
            return value_type.cast(___tp, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("std::atomic<%s>::difference_type")
    @FFIGen
    interface difference_type<_Tp> extends CXXPointer {
        @FFIExpr("{0}")
        _Tp get();

        static <_Tp> difference_type<_Tp> cast(Class<_Tp> ___tp, final long __foreign_address) {
            try {
                Class<difference_type<_Tp>> clz = (Class<difference_type<_Tp>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(difference_type.class, ___tp), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_Tp> difference_type<_Tp> cast(Class<_Tp> ___tp,
                final FFIPointer __foreign_pointer) {
            return difference_type.cast(___tp, __foreign_pointer.getAddress());
        }
    }
}
