// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.std;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXPointer;
import com.alibaba.fastffi.CXXReference;
import com.alibaba.fastffi.FFIExpr;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFIGetter;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("std::pair")
@FFIGen
@CXXHead(
        system = "__utility/pair.h"
)
public interface pair<_T1, _T2> extends FFIPointer {
    @FFIGetter
    @CXXReference
    _T1 first();

    @FFIGetter
    @CXXReference
    _T2 second();

    void swap(@CXXReference pair<_T1, _T2> __p);

    static <_T1, _T2> pair<_T1, _T2> cast(Class<_T1> ___t1, Class<_T2> ___t2,
            final long __foreign_address) {
        try {
            Class<pair<_T1, _T2>> clz = (Class<pair<_T1, _T2>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(pair.class, ___t1, ___t2), true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static <_T1, _T2> pair<_T1, _T2> cast(Class<_T1> ___t1, Class<_T2> ___t2,
            final FFIPointer __foreign_pointer) {
        return pair.cast(___t1, ___t2, __foreign_pointer.getAddress());
    }

    @FFITypeAlias("std::pair<%s,%s>::_CheckArgsDep")
    @FFIGen
    @CXXHead(
            system = "__utility/pair.h"
    )
    interface _CheckArgsDep<_T1, _T2, _MaybeEnable> extends CXXPointer {
        static <_T1, _T2, _MaybeEnable> _CheckArgsDep<_T1, _T2, _MaybeEnable> cast(Class<_T1> ___t1,
                Class<_T2> ___t2, Class<_MaybeEnable> ___maybeenable,
                final long __foreign_address) {
            try {
                Class<_CheckArgsDep<_T1, _T2, _MaybeEnable>> clz = (Class<_CheckArgsDep<_T1, _T2, _MaybeEnable>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(_CheckArgsDep.class, ___t1, ___t2, ___maybeenable), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_T1, _T2, _MaybeEnable> _CheckArgsDep<_T1, _T2, _MaybeEnable> cast(Class<_T1> ___t1,
                Class<_T2> ___t2, Class<_MaybeEnable> ___maybeenable,
                final FFIPointer __foreign_pointer) {
            return _CheckArgsDep.cast(___t1, ___t2, ___maybeenable, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("std::pair<%s,%s>::_CheckTLC")
    @FFIGen
    @CXXHead(
            system = "__utility/pair.h"
    )
    interface _CheckTLC<_T1, _T2, _Tuple> extends CXXPointer {
        static <_T1, _T2, _Tuple> _CheckTLC<_T1, _T2, _Tuple> cast(Class<_T1> ___t1,
                Class<_T2> ___t2, Class<_Tuple> ___tuple, final long __foreign_address) {
            try {
                Class<_CheckTLC<_T1, _T2, _Tuple>> clz = (Class<_CheckTLC<_T1, _T2, _Tuple>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(_CheckTLC.class, ___t1, ___t2, ___tuple), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_T1, _T2, _Tuple> _CheckTLC<_T1, _T2, _Tuple> cast(Class<_T1> ___t1,
                Class<_T2> ___t2, Class<_Tuple> ___tuple, final FFIPointer __foreign_pointer) {
            return _CheckTLC.cast(___t1, ___t2, ___tuple, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("std::pair<%s,%s>::_CheckTupleLikeConstructor")
    @FFIGen
    @CXXHead(
            system = "__utility/pair.h"
    )
    interface _CheckTupleLikeConstructor<_T1, _T2> extends FFIPointer {
        static <_T1, _T2> _CheckTupleLikeConstructor<_T1, _T2> cast(Class<_T1> ___t1,
                Class<_T2> ___t2, final long __foreign_address) {
            try {
                Class<_CheckTupleLikeConstructor<_T1, _T2>> clz = (Class<_CheckTupleLikeConstructor<_T1, _T2>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(_CheckTupleLikeConstructor.class, ___t1, ___t2), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_T1, _T2> _CheckTupleLikeConstructor<_T1, _T2> cast(Class<_T1> ___t1,
                Class<_T2> ___t2, final FFIPointer __foreign_pointer) {
            return _CheckTupleLikeConstructor.cast(___t1, ___t2, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("std::pair<%s,%s>::first_type")
    @FFIGen
    interface first_type<_T1, _T2> extends CXXPointer {
        @FFIExpr("{0}")
        _T1 get();

        static <_T1, _T2> first_type<_T1, _T2> cast(Class<_T1> ___t1, Class<_T2> ___t2,
                final long __foreign_address) {
            try {
                Class<first_type<_T1, _T2>> clz = (Class<first_type<_T1, _T2>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(first_type.class, ___t1, ___t2), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_T1, _T2> first_type<_T1, _T2> cast(Class<_T1> ___t1, Class<_T2> ___t2,
                final FFIPointer __foreign_pointer) {
            return first_type.cast(___t1, ___t2, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("std::pair<%s,%s>::second_type")
    @FFIGen
    interface second_type<_T1, _T2> extends CXXPointer {
        @FFIExpr("{0}")
        _T2 get();

        static <_T1, _T2> second_type<_T1, _T2> cast(Class<_T1> ___t1, Class<_T2> ___t2,
                final long __foreign_address) {
            try {
                Class<second_type<_T1, _T2>> clz = (Class<second_type<_T1, _T2>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(second_type.class, ___t1, ___t2), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_T1, _T2> second_type<_T1, _T2> cast(Class<_T1> ___t1, Class<_T2> ___t2,
                final FFIPointer __foreign_pointer) {
            return second_type.cast(___t1, ___t2, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("std::pair<%s,%s>::_CheckArgs")
    @FFIGen
    @CXXHead(
            system = "__utility/pair.h"
    )
    interface _CheckArgs<_T1, _T2> extends FFIPointer {
        static <_T1, _T2> _CheckArgs<_T1, _T2> cast(Class<_T1> ___t1, Class<_T2> ___t2,
                final long __foreign_address) {
            try {
                Class<_CheckArgs<_T1, _T2>> clz = (Class<_CheckArgs<_T1, _T2>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(_CheckArgs.class, ___t1, ___t2), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_T1, _T2> _CheckArgs<_T1, _T2> cast(Class<_T1> ___t1, Class<_T2> ___t2,
                final FFIPointer __foreign_pointer) {
            return _CheckArgs.cast(___t1, ___t2, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("std::pair<%s,%s>::_EnableB")
    @FFIGen
    @CXXHead(
            system = "__utility/pair.h"
    )
    interface _EnableB<_T1, _T2, _Val> extends CXXPointer {
        static <_T1, _T2, _Val> _EnableB<_T1, _T2, _Val> cast(Class<_T1> ___t1, Class<_T2> ___t2,
                Class<_Val> ___val, final long __foreign_address) {
            try {
                Class<_EnableB<_T1, _T2, _Val>> clz = (Class<_EnableB<_T1, _T2, _Val>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(_EnableB.class, ___t1, ___t2, ___val), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_T1, _T2, _Val> _EnableB<_T1, _T2, _Val> cast(Class<_T1> ___t1, Class<_T2> ___t2,
                Class<_Val> ___val, final FFIPointer __foreign_pointer) {
            return _EnableB.cast(___t1, ___t2, ___val, __foreign_pointer.getAddress());
        }
    }
}
