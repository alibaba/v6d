// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.std;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXPointer;
import com.alibaba.fastffi.CXXReference;
import com.alibaba.fastffi.CXXValue;
import com.alibaba.fastffi.FFIExpr;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("std::unique_ptr")
@FFIGen
@CXXHead(
        system = "__memory/unique_ptr.h"
)
@CXXHead(
        system = "memory"
)
public interface unique_ptr<_Tp> extends CXXPointer {
    @CXXValue
    pointer<_Tp> get();

    @CXXValue
    pointer<_Tp> release();

    void reset(@CXXValue pointer<_Tp> __p);

    void swap(@CXXReference unique_ptr<_Tp> __u);

    static <_Tp> unique_ptr<_Tp> cast(Class<_Tp> ___tp, final long __foreign_address) {
        try {
            Class<unique_ptr<_Tp>> clz = (Class<unique_ptr<_Tp>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(unique_ptr.class, ___tp), true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static <_Tp> unique_ptr<_Tp> cast(Class<_Tp> ___tp, final FFIPointer __foreign_pointer) {
        return unique_ptr.cast(___tp, __foreign_pointer.getAddress());
    }

    @FFITypeAlias("std::unique_ptr<%s>::pointer")
    @FFIGen
    @CXXHead(
            system = "__memory/unique_ptr.h"
    )
    interface pointer<_Tp> extends CXXPointer {
        static <_Tp> pointer<_Tp> cast(Class<_Tp> ___tp, final long __foreign_address) {
            try {
                Class<pointer<_Tp>> clz = (Class<pointer<_Tp>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(pointer.class, ___tp), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_Tp> pointer<_Tp> cast(Class<_Tp> ___tp, final FFIPointer __foreign_pointer) {
            return pointer.cast(___tp, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("std::unique_ptr<%s>::element_type")
    @FFIGen
    interface element_type<_Tp> extends CXXPointer {
        @FFIExpr("{0}")
        _Tp get();

        static <_Tp> element_type<_Tp> cast(Class<_Tp> ___tp, final long __foreign_address) {
            try {
                Class<element_type<_Tp>> clz = (Class<element_type<_Tp>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(element_type.class, ___tp), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_Tp> element_type<_Tp> cast(Class<_Tp> ___tp, final FFIPointer __foreign_pointer) {
            return element_type.cast(___tp, __foreign_pointer.getAddress());
        }
    }
}
