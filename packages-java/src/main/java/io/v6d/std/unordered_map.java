// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.std;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXPointer;
import com.alibaba.fastffi.CXXReference;
import com.alibaba.fastffi.CXXValue;
import com.alibaba.fastffi.FFIExpr;
import com.alibaba.fastffi.FFIFactory;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFINameAlias;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("std::unordered_map")
@FFIGen
@CXXHead(
        system = "unordered_map"
)
public interface unordered_map<_Key, _Tp> extends CXXPointer {
    @CXXValue
    allocator_type<_Key, _Tp> get_allocator();

    boolean empty();

    @CXXValue
    size_type<_Key, _Tp> size();

    @CXXValue
    size_type<_Key, _Tp> max_size();

    @CXXValue
    iterator<_Key, _Tp> begin();

    @CXXValue
    iterator<_Key, _Tp> end();

    @CXXValue
    @FFINameAlias("begin")
    const_iterator<_Key, _Tp> begin_1();

    @CXXValue
    @FFINameAlias("end")
    const_iterator<_Key, _Tp> end_1();

    @CXXValue
    const_iterator<_Key, _Tp> cbegin();

    @CXXValue
    const_iterator<_Key, _Tp> cend();

    @CXXValue
    pair<iterator<_Key, _Tp>, CBool> insert(@CXXReference value_type<_Key, _Tp> __x);

    @CXXValue
    iterator<_Key, _Tp> insert(@CXXValue const_iterator<_Key, _Tp> __p,
            @CXXReference value_type<_Key, _Tp> __x);

    void insert(@CXXValue initializer_list<value_type<_Key, _Tp>> __il);

    @CXXValue
    iterator<_Key, _Tp> erase(@CXXValue const_iterator<_Key, _Tp> __p);

    @CXXValue
    iterator<_Key, _Tp> erase(@CXXValue iterator<_Key, _Tp> __p);

    @CXXValue
    size_type<_Key, _Tp> erase(@CXXReference _Key __k);

    @CXXValue
    iterator<_Key, _Tp> erase(@CXXValue const_iterator<_Key, _Tp> __first,
            @CXXValue const_iterator<_Key, _Tp> __last);

    void clear();

    void swap(@CXXReference unordered_map<_Key, _Tp> __u);

    @CXXValue
    hasher<_Key, _Tp> hash_function();

    @CXXValue
    key_equal<_Key, _Tp> key_eq();

    @CXXValue
    iterator<_Key, _Tp> find(@CXXReference _Key __k);

    @CXXValue
    @FFINameAlias("find")
    const_iterator<_Key, _Tp> find_1(@CXXReference _Key __k);

    @CXXValue
    size_type<_Key, _Tp> count(@CXXReference _Key __k);

    @CXXValue
    pair<iterator<_Key, _Tp>, iterator<_Key, _Tp>> equal_range(@CXXReference _Key __k);

    @CXXValue
    @FFINameAlias("equal_range")
    pair<const_iterator<_Key, _Tp>, const_iterator<_Key, _Tp>> equal_range_1(
            @CXXReference _Key __k);

    @CXXReference
    _Tp at(@CXXReference _Key __k);

    @CXXReference
    @FFINameAlias("at")
    _Tp at_1(@CXXReference _Key __k);

    @CXXValue
    size_type<_Key, _Tp> bucket_count();

    @CXXValue
    size_type<_Key, _Tp> max_bucket_count();

    @CXXValue
    size_type<_Key, _Tp> bucket_size(@CXXValue size_type<_Key, _Tp> __n);

    @CXXValue
    size_type<_Key, _Tp> bucket(@CXXReference _Key __k);

    @CXXValue
    local_iterator<_Key, _Tp> begin(@CXXValue size_type<_Key, _Tp> __n);

    @CXXValue
    local_iterator<_Key, _Tp> end(@CXXValue size_type<_Key, _Tp> __n);

    @CXXValue
    @FFINameAlias("begin")
    const_local_iterator<_Key, _Tp> begin_1(@CXXValue size_type<_Key, _Tp> __n);

    @CXXValue
    @FFINameAlias("end")
    const_local_iterator<_Key, _Tp> end_1(@CXXValue size_type<_Key, _Tp> __n);

    @CXXValue
    const_local_iterator<_Key, _Tp> cbegin(@CXXValue size_type<_Key, _Tp> __n);

    @CXXValue
    const_local_iterator<_Key, _Tp> cend(@CXXValue size_type<_Key, _Tp> __n);

    float load_factor();

    float max_load_factor();

    void max_load_factor(float __mlf);

    void rehash(@CXXValue size_type<_Key, _Tp> __n);

    void reserve(@CXXValue size_type<_Key, _Tp> __n);

    static <_Key, _Tp> unordered_map<_Key, _Tp> cast(Class<_Key> ___key, Class<_Tp> ___tp,
            final long __foreign_address) {
        try {
            Class<unordered_map<_Key, _Tp>> clz = (Class<unordered_map<_Key, _Tp>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(unordered_map.class, ___key, ___tp), true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static <_Key, _Tp> unordered_map<_Key, _Tp> cast(Class<_Key> ___key, Class<_Tp> ___tp,
            final FFIPointer __foreign_pointer) {
        return unordered_map.cast(___key, ___tp, __foreign_pointer.getAddress());
    }

    static <_Key, _Tp> Factory<_Key, _Tp> getFactory(Class<_Key> ___key, Class<_Tp> ___tp) {
        return FFITypeFactory.getFactory(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(unordered_map.class, ___key, ___tp), true));
    }

    static <_Key, _Tp> unordered_map<_Key, _Tp> create(Class<_Key> ___key, Class<_Tp> ___tp) {
        return unordered_map.getFactory(___key, ___tp).create();
    }

    static <_Key, _Tp> unordered_map<_Key, _Tp> create(Class<_Key> ___key, Class<_Tp> ___tp,
            @CXXValue size_type<_Key, _Tp> __n, @CXXReference hasher<_Key, _Tp> __hf,
            @CXXReference key_equal<_Key, _Tp> __eql) {
        return unordered_map.getFactory(___key, ___tp).create(__n, __hf, __eql);
    }

    static <_Key, _Tp> unordered_map<_Key, _Tp> create(Class<_Key> ___key, Class<_Tp> ___tp,
            @CXXValue size_type<_Key, _Tp> __n, @CXXReference hasher<_Key, _Tp> __hf,
            @CXXReference key_equal<_Key, _Tp> __eql, @CXXReference allocator_type<_Key, _Tp> __a) {
        return unordered_map.getFactory(___key, ___tp).create(__n, __hf, __eql, __a);
    }

    static <_Key, _Tp> unordered_map<_Key, _Tp> create(Class<_Key> ___key, Class<_Tp> ___tp,
            @CXXReference allocator_type<_Key, _Tp> __a) {
        return unordered_map.getFactory(___key, ___tp).create(__a);
    }

    static <_Key, _Tp> unordered_map<_Key, _Tp> create(Class<_Key> ___key, Class<_Tp> ___tp,
            @CXXReference unordered_map<_Key, _Tp> __u) {
        return unordered_map.getFactory(___key, ___tp).create(__u);
    }

    static <_Key, _Tp> unordered_map<_Key, _Tp> create(Class<_Key> ___key, Class<_Tp> ___tp,
            @CXXReference unordered_map<_Key, _Tp> __u,
            @CXXReference allocator_type<_Key, _Tp> __a) {
        return unordered_map.getFactory(___key, ___tp).create(__u, __a);
    }

    static <_Key, _Tp> unordered_map<_Key, _Tp> create(Class<_Key> ___key, Class<_Tp> ___tp,
            @CXXValue initializer_list<value_type<_Key, _Tp>> __il) {
        return unordered_map.getFactory(___key, ___tp).create(__il);
    }

    static <_Key, _Tp> unordered_map<_Key, _Tp> create(Class<_Key> ___key, Class<_Tp> ___tp,
            @CXXValue initializer_list<value_type<_Key, _Tp>> __il,
            @CXXValue size_type<_Key, _Tp> __n, @CXXReference hasher<_Key, _Tp> __hf,
            @CXXReference key_equal<_Key, _Tp> __eql) {
        return unordered_map.getFactory(___key, ___tp).create(__il, __n, __hf, __eql);
    }

    static <_Key, _Tp> unordered_map<_Key, _Tp> create(Class<_Key> ___key, Class<_Tp> ___tp,
            @CXXValue initializer_list<value_type<_Key, _Tp>> __il,
            @CXXValue size_type<_Key, _Tp> __n, @CXXReference hasher<_Key, _Tp> __hf,
            @CXXReference key_equal<_Key, _Tp> __eql, @CXXReference allocator_type<_Key, _Tp> __a) {
        return unordered_map.getFactory(___key, ___tp).create(__il, __n, __hf, __eql, __a);
    }

    static <_Key, _Tp> unordered_map<_Key, _Tp> create(Class<_Key> ___key, Class<_Tp> ___tp,
            @CXXValue size_type<_Key, _Tp> __n, @CXXReference allocator_type<_Key, _Tp> __a) {
        return unordered_map.getFactory(___key, ___tp).create(__n, __a);
    }

    static <_Key, _Tp> unordered_map<_Key, _Tp> create(Class<_Key> ___key, Class<_Tp> ___tp,
            @CXXValue size_type<_Key, _Tp> __n, @CXXReference hasher<_Key, _Tp> __hf,
            @CXXReference allocator_type<_Key, _Tp> __a) {
        return unordered_map.getFactory(___key, ___tp).create(__n, __hf, __a);
    }

    static <_Key, _Tp> unordered_map<_Key, _Tp> create(Class<_Key> ___key, Class<_Tp> ___tp,
            @CXXValue initializer_list<value_type<_Key, _Tp>> __il,
            @CXXValue size_type<_Key, _Tp> __n, @CXXReference allocator_type<_Key, _Tp> __a) {
        return unordered_map.getFactory(___key, ___tp).create(__il, __n, __a);
    }

    static <_Key, _Tp> unordered_map<_Key, _Tp> create(Class<_Key> ___key, Class<_Tp> ___tp,
            @CXXValue initializer_list<value_type<_Key, _Tp>> __il,
            @CXXValue size_type<_Key, _Tp> __n, @CXXReference hasher<_Key, _Tp> __hf,
            @CXXReference allocator_type<_Key, _Tp> __a) {
        return unordered_map.getFactory(___key, ___tp).create(__il, __n, __hf, __a);
    }

    @FFIFactory
    @CXXHead(
            system = "unordered_map"
    )
    interface Factory<_Key, _Tp> {
        unordered_map<_Key, _Tp> create();

        unordered_map<_Key, _Tp> create(@CXXValue size_type<_Key, _Tp> __n,
                @CXXReference hasher<_Key, _Tp> __hf, @CXXReference key_equal<_Key, _Tp> __eql);

        unordered_map<_Key, _Tp> create(@CXXValue size_type<_Key, _Tp> __n,
                @CXXReference hasher<_Key, _Tp> __hf, @CXXReference key_equal<_Key, _Tp> __eql,
                @CXXReference allocator_type<_Key, _Tp> __a);

        unordered_map<_Key, _Tp> create(@CXXReference allocator_type<_Key, _Tp> __a);

        unordered_map<_Key, _Tp> create(@CXXReference unordered_map<_Key, _Tp> __u);

        unordered_map<_Key, _Tp> create(@CXXReference unordered_map<_Key, _Tp> __u,
                @CXXReference allocator_type<_Key, _Tp> __a);

        unordered_map<_Key, _Tp> create(@CXXValue initializer_list<value_type<_Key, _Tp>> __il);

        unordered_map<_Key, _Tp> create(@CXXValue initializer_list<value_type<_Key, _Tp>> __il,
                @CXXValue size_type<_Key, _Tp> __n, @CXXReference hasher<_Key, _Tp> __hf,
                @CXXReference key_equal<_Key, _Tp> __eql);

        unordered_map<_Key, _Tp> create(@CXXValue initializer_list<value_type<_Key, _Tp>> __il,
                @CXXValue size_type<_Key, _Tp> __n, @CXXReference hasher<_Key, _Tp> __hf,
                @CXXReference key_equal<_Key, _Tp> __eql,
                @CXXReference allocator_type<_Key, _Tp> __a);

        unordered_map<_Key, _Tp> create(@CXXValue size_type<_Key, _Tp> __n,
                @CXXReference allocator_type<_Key, _Tp> __a);

        unordered_map<_Key, _Tp> create(@CXXValue size_type<_Key, _Tp> __n,
                @CXXReference hasher<_Key, _Tp> __hf, @CXXReference allocator_type<_Key, _Tp> __a);

        unordered_map<_Key, _Tp> create(@CXXValue initializer_list<value_type<_Key, _Tp>> __il,
                @CXXValue size_type<_Key, _Tp> __n, @CXXReference allocator_type<_Key, _Tp> __a);

        unordered_map<_Key, _Tp> create(@CXXValue initializer_list<value_type<_Key, _Tp>> __il,
                @CXXValue size_type<_Key, _Tp> __n, @CXXReference hasher<_Key, _Tp> __hf,
                @CXXReference allocator_type<_Key, _Tp> __a);
    }

    @FFITypeAlias("std::unordered_map<%s,%s>::value_type")
    @FFIGen
    @CXXHead(
            system = "unordered_map"
    )
    interface value_type<_Key, _Tp> extends CXXPointer {
        @FFIExpr("{0}")
        pair<_Key, _Tp> get();

        static <_Key, _Tp> value_type<_Key, _Tp> cast(Class<_Key> ___key, Class<_Tp> ___tp,
                final long __foreign_address) {
            try {
                Class<value_type<_Key, _Tp>> clz = (Class<value_type<_Key, _Tp>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(value_type.class, ___key, ___tp), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_Key, _Tp> value_type<_Key, _Tp> cast(Class<_Key> ___key, Class<_Tp> ___tp,
                final FFIPointer __foreign_pointer) {
            return value_type.cast(___key, ___tp, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("std::unordered_map<%s,%s>::const_pointer")
    @FFIGen
    @CXXHead(
            system = "unordered_map"
    )
    interface const_pointer<_Key, _Tp> extends CXXPointer {
        static <_Key, _Tp> const_pointer<_Key, _Tp> cast(Class<_Key> ___key, Class<_Tp> ___tp,
                final long __foreign_address) {
            try {
                Class<const_pointer<_Key, _Tp>> clz = (Class<const_pointer<_Key, _Tp>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(const_pointer.class, ___key, ___tp), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_Key, _Tp> const_pointer<_Key, _Tp> cast(Class<_Key> ___key, Class<_Tp> ___tp,
                final FFIPointer __foreign_pointer) {
            return const_pointer.cast(___key, ___tp, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("std::unordered_map<%s,%s>::allocator_type")
    @FFIGen
    @CXXHead(
            system = "unordered_map"
    )
    interface allocator_type<_Key, _Tp> extends CXXPointer {
        static <_Key, _Tp> allocator_type<_Key, _Tp> cast(Class<_Key> ___key, Class<_Tp> ___tp,
                final long __foreign_address) {
            try {
                Class<allocator_type<_Key, _Tp>> clz = (Class<allocator_type<_Key, _Tp>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(allocator_type.class, ___key, ___tp), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_Key, _Tp> allocator_type<_Key, _Tp> cast(Class<_Key> ___key, Class<_Tp> ___tp,
                final FFIPointer __foreign_pointer) {
            return allocator_type.cast(___key, ___tp, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("std::unordered_map<%s,%s>::hasher")
    @FFIGen
    @CXXHead(
            system = "unordered_map"
    )
    interface hasher<_Key, _Tp> extends CXXPointer {
        static <_Key, _Tp> hasher<_Key, _Tp> cast(Class<_Key> ___key, Class<_Tp> ___tp,
                final long __foreign_address) {
            try {
                Class<hasher<_Key, _Tp>> clz = (Class<hasher<_Key, _Tp>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(hasher.class, ___key, ___tp), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_Key, _Tp> hasher<_Key, _Tp> cast(Class<_Key> ___key, Class<_Tp> ___tp,
                final FFIPointer __foreign_pointer) {
            return hasher.cast(___key, ___tp, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("std::unordered_map<%s,%s>::iterator")
    @FFIGen
    @CXXHead(
            system = "unordered_map"
    )
    interface iterator<_Key, _Tp> extends CXXPointer {
        static <_Key, _Tp> iterator<_Key, _Tp> cast(Class<_Key> ___key, Class<_Tp> ___tp,
                final long __foreign_address) {
            try {
                Class<iterator<_Key, _Tp>> clz = (Class<iterator<_Key, _Tp>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(iterator.class, ___key, ___tp), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_Key, _Tp> iterator<_Key, _Tp> cast(Class<_Key> ___key, Class<_Tp> ___tp,
                final FFIPointer __foreign_pointer) {
            return iterator.cast(___key, ___tp, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("std::unordered_map<%s,%s>::const_iterator")
    @FFIGen
    @CXXHead(
            system = "unordered_map"
    )
    interface const_iterator<_Key, _Tp> extends CXXPointer {
        static <_Key, _Tp> const_iterator<_Key, _Tp> cast(Class<_Key> ___key, Class<_Tp> ___tp,
                final long __foreign_address) {
            try {
                Class<const_iterator<_Key, _Tp>> clz = (Class<const_iterator<_Key, _Tp>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(const_iterator.class, ___key, ___tp), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_Key, _Tp> const_iterator<_Key, _Tp> cast(Class<_Key> ___key, Class<_Tp> ___tp,
                final FFIPointer __foreign_pointer) {
            return const_iterator.cast(___key, ___tp, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("std::unordered_map<%s,%s>::key_equal")
    @FFIGen
    @CXXHead(
            system = "unordered_map"
    )
    interface key_equal<_Key, _Tp> extends CXXPointer {
        static <_Key, _Tp> key_equal<_Key, _Tp> cast(Class<_Key> ___key, Class<_Tp> ___tp,
                final long __foreign_address) {
            try {
                Class<key_equal<_Key, _Tp>> clz = (Class<key_equal<_Key, _Tp>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(key_equal.class, ___key, ___tp), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_Key, _Tp> key_equal<_Key, _Tp> cast(Class<_Key> ___key, Class<_Tp> ___tp,
                final FFIPointer __foreign_pointer) {
            return key_equal.cast(___key, ___tp, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("std::unordered_map<%s,%s>::key_type")
    @FFIGen
    interface key_type<_Key, _Tp> extends CXXPointer {
        @FFIExpr("{0}")
        _Key get();

        static <_Key, _Tp> key_type<_Key, _Tp> cast(Class<_Key> ___key, Class<_Tp> ___tp,
                final long __foreign_address) {
            try {
                Class<key_type<_Key, _Tp>> clz = (Class<key_type<_Key, _Tp>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(key_type.class, ___key, ___tp), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_Key, _Tp> key_type<_Key, _Tp> cast(Class<_Key> ___key, Class<_Tp> ___tp,
                final FFIPointer __foreign_pointer) {
            return key_type.cast(___key, ___tp, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("std::unordered_map<%s,%s>::difference_type")
    @FFIGen
    @CXXHead(
            system = "unordered_map"
    )
    interface difference_type<_Key, _Tp> extends CXXPointer {
        static <_Key, _Tp> difference_type<_Key, _Tp> cast(Class<_Key> ___key, Class<_Tp> ___tp,
                final long __foreign_address) {
            try {
                Class<difference_type<_Key, _Tp>> clz = (Class<difference_type<_Key, _Tp>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(difference_type.class, ___key, ___tp), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_Key, _Tp> difference_type<_Key, _Tp> cast(Class<_Key> ___key, Class<_Tp> ___tp,
                final FFIPointer __foreign_pointer) {
            return difference_type.cast(___key, ___tp, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("std::unordered_map<%s,%s>::mapped_type")
    @FFIGen
    interface mapped_type<_Key, _Tp> extends CXXPointer {
        @FFIExpr("{0}")
        _Tp get();

        static <_Key, _Tp> mapped_type<_Key, _Tp> cast(Class<_Key> ___key, Class<_Tp> ___tp,
                final long __foreign_address) {
            try {
                Class<mapped_type<_Key, _Tp>> clz = (Class<mapped_type<_Key, _Tp>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(mapped_type.class, ___key, ___tp), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_Key, _Tp> mapped_type<_Key, _Tp> cast(Class<_Key> ___key, Class<_Tp> ___tp,
                final FFIPointer __foreign_pointer) {
            return mapped_type.cast(___key, ___tp, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("std::unordered_map<%s,%s>::const_local_iterator")
    @FFIGen
    @CXXHead(
            system = "unordered_map"
    )
    interface const_local_iterator<_Key, _Tp> extends CXXPointer {
        static <_Key, _Tp> const_local_iterator<_Key, _Tp> cast(Class<_Key> ___key,
                Class<_Tp> ___tp, final long __foreign_address) {
            try {
                Class<const_local_iterator<_Key, _Tp>> clz = (Class<const_local_iterator<_Key, _Tp>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(const_local_iterator.class, ___key, ___tp), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_Key, _Tp> const_local_iterator<_Key, _Tp> cast(Class<_Key> ___key,
                Class<_Tp> ___tp, final FFIPointer __foreign_pointer) {
            return const_local_iterator.cast(___key, ___tp, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("std::unordered_map<%s,%s>::pointer")
    @FFIGen
    @CXXHead(
            system = "unordered_map"
    )
    interface pointer<_Key, _Tp> extends CXXPointer {
        static <_Key, _Tp> pointer<_Key, _Tp> cast(Class<_Key> ___key, Class<_Tp> ___tp,
                final long __foreign_address) {
            try {
                Class<pointer<_Key, _Tp>> clz = (Class<pointer<_Key, _Tp>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(pointer.class, ___key, ___tp), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_Key, _Tp> pointer<_Key, _Tp> cast(Class<_Key> ___key, Class<_Tp> ___tp,
                final FFIPointer __foreign_pointer) {
            return pointer.cast(___key, ___tp, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("std::unordered_map<%s,%s>::size_type")
    @FFIGen
    @CXXHead(
            system = "unordered_map"
    )
    interface size_type<_Key, _Tp> extends CXXPointer {
        static <_Key, _Tp> size_type<_Key, _Tp> cast(Class<_Key> ___key, Class<_Tp> ___tp,
                final long __foreign_address) {
            try {
                Class<size_type<_Key, _Tp>> clz = (Class<size_type<_Key, _Tp>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(size_type.class, ___key, ___tp), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_Key, _Tp> size_type<_Key, _Tp> cast(Class<_Key> ___key, Class<_Tp> ___tp,
                final FFIPointer __foreign_pointer) {
            return size_type.cast(___key, ___tp, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("std::unordered_map<%s,%s>::local_iterator")
    @FFIGen
    @CXXHead(
            system = "unordered_map"
    )
    interface local_iterator<_Key, _Tp> extends CXXPointer {
        static <_Key, _Tp> local_iterator<_Key, _Tp> cast(Class<_Key> ___key, Class<_Tp> ___tp,
                final long __foreign_address) {
            try {
                Class<local_iterator<_Key, _Tp>> clz = (Class<local_iterator<_Key, _Tp>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(local_iterator.class, ___key, ___tp), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_Key, _Tp> local_iterator<_Key, _Tp> cast(Class<_Key> ___key, Class<_Tp> ___tp,
                final FFIPointer __foreign_pointer) {
            return local_iterator.cast(___key, ___tp, __foreign_pointer.getAddress());
        }
    }
}
