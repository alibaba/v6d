// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.std;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXValue;
import com.alibaba.fastffi.FFIFactory;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("std::__cxx_atomic_impl")
@FFIGen
@CXXHead(
        system = "atomic"
)
public interface __cxx_atomic_impl<_Tp> extends FFIPointer {
    static <_Tp> __cxx_atomic_impl<_Tp> cast(Class<_Tp> ___tp, final long __foreign_address) {
        try {
            Class<__cxx_atomic_impl<_Tp>> clz = (Class<__cxx_atomic_impl<_Tp>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(__cxx_atomic_impl.class, ___tp), true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static <_Tp> __cxx_atomic_impl<_Tp> cast(Class<_Tp> ___tp, final FFIPointer __foreign_pointer) {
        return __cxx_atomic_impl.cast(___tp, __foreign_pointer.getAddress());
    }

    static <_Tp> Factory<_Tp> getFactory(Class<_Tp> ___tp) {
        return FFITypeFactory.getFactory(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(__cxx_atomic_impl.class, ___tp), true));
    }

    static <_Tp> __cxx_atomic_impl<_Tp> create(Class<_Tp> ___tp, @CXXValue _Tp value) {
        return __cxx_atomic_impl.getFactory(___tp).create(value);
    }

    @FFIFactory
    @CXXHead(
            system = "atomic"
    )
    interface Factory<_Tp> {
        __cxx_atomic_impl<_Tp> create(@CXXValue _Tp value);
    }
}
