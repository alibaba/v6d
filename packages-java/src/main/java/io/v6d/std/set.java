// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.std;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXPointer;
import com.alibaba.fastffi.CXXReference;
import com.alibaba.fastffi.CXXValue;
import com.alibaba.fastffi.FFIExpr;
import com.alibaba.fastffi.FFIFactory;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFINameAlias;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("std::set")
@FFIGen
@CXXHead(
        system = "set"
)
public interface set<_Key> extends CXXPointer {
    @CXXValue
    iterator<_Key> begin();

    @CXXValue
    @FFINameAlias("begin")
    const_iterator<_Key> begin_1();

    @CXXValue
    iterator<_Key> end();

    @CXXValue
    @FFINameAlias("end")
    const_iterator<_Key> end_1();

    @CXXValue
    reverse_iterator<_Key> rbegin();

    @CXXValue
    @FFINameAlias("rbegin")
    const_reverse_iterator<_Key> rbegin_1();

    @CXXValue
    reverse_iterator<_Key> rend();

    @CXXValue
    @FFINameAlias("rend")
    const_reverse_iterator<_Key> rend_1();

    @CXXValue
    const_iterator<_Key> cbegin();

    @CXXValue
    const_iterator<_Key> cend();

    @CXXValue
    const_reverse_iterator<_Key> crbegin();

    @CXXValue
    const_reverse_iterator<_Key> crend();

    boolean empty();

    @CXXValue
    size_type<_Key> size();

    @CXXValue
    size_type<_Key> max_size();

    @CXXValue
    pair<iterator<_Key>, CBool> insert(@CXXReference _Key __v);

    @CXXValue
    iterator<_Key> insert(@CXXValue const_iterator<_Key> __p, @CXXReference _Key __v);

    void insert(@CXXValue initializer_list<_Key> __il);

    @CXXValue
    iterator<_Key> erase(@CXXValue const_iterator<_Key> __p);

    @CXXValue
    size_type<_Key> erase(@CXXReference _Key __k);

    @CXXValue
    iterator<_Key> erase(@CXXValue const_iterator<_Key> __f, @CXXValue const_iterator<_Key> __l);

    void clear();

    void swap(@CXXReference set<_Key> __s);

    @CXXValue
    allocator_type<_Key> get_allocator();

    @CXXValue
    iterator<_Key> find(@CXXReference _Key __k);

    @CXXValue
    @FFINameAlias("find")
    const_iterator<_Key> find_1(@CXXReference _Key __k);

    @CXXValue
    size_type<_Key> count(@CXXReference _Key __k);

    @CXXValue
    iterator<_Key> lower_bound(@CXXReference _Key __k);

    @CXXValue
    @FFINameAlias("lower_bound")
    const_iterator<_Key> lower_bound_1(@CXXReference _Key __k);

    @CXXValue
    iterator<_Key> upper_bound(@CXXReference _Key __k);

    @CXXValue
    @FFINameAlias("upper_bound")
    const_iterator<_Key> upper_bound_1(@CXXReference _Key __k);

    @CXXValue
    pair<iterator<_Key>, iterator<_Key>> equal_range(@CXXReference _Key __k);

    @CXXValue
    @FFINameAlias("equal_range")
    pair<const_iterator<_Key>, const_iterator<_Key>> equal_range_1(@CXXReference _Key __k);

    static <_Key> set<_Key> cast(Class<_Key> ___key, final long __foreign_address) {
        try {
            Class<set<_Key>> clz = (Class<set<_Key>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(set.class, ___key), true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static <_Key> set<_Key> cast(Class<_Key> ___key, final FFIPointer __foreign_pointer) {
        return set.cast(___key, __foreign_pointer.getAddress());
    }

    static <_Key> Factory<_Key> getFactory(Class<_Key> ___key) {
        return FFITypeFactory.getFactory(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(set.class, ___key), true));
    }

    static <_Key> set<_Key> create(Class<_Key> ___key) {
        return set.getFactory(___key).create();
    }

    static <_Key> set<_Key> create(Class<_Key> ___key, @CXXReference set<_Key> __s) {
        return set.getFactory(___key).create(__s);
    }

    static <_Key> set<_Key> create(Class<_Key> ___key, @CXXReference allocator_type<_Key> __a) {
        return set.getFactory(___key).create(__a);
    }

    static <_Key> set<_Key> create(Class<_Key> ___key, @CXXReference set<_Key> __s,
            @CXXReference allocator_type<_Key> __a) {
        return set.getFactory(___key).create(__s, __a);
    }

    static <_Key> set<_Key> create(Class<_Key> ___key, @CXXValue initializer_list<_Key> __il,
            @CXXReference allocator_type<_Key> __a) {
        return set.getFactory(___key).create(__il, __a);
    }

    @FFIFactory
    @CXXHead(
            system = "set"
    )
    interface Factory<_Key> {
        set<_Key> create();

        set<_Key> create(@CXXReference set<_Key> __s);

        set<_Key> create(@CXXReference allocator_type<_Key> __a);

        set<_Key> create(@CXXReference set<_Key> __s, @CXXReference allocator_type<_Key> __a);

        set<_Key> create(@CXXValue initializer_list<_Key> __il,
                @CXXReference allocator_type<_Key> __a);
    }

    @FFITypeAlias("std::set<%s>::const_iterator")
    @FFIGen
    @CXXHead(
            system = "set"
    )
    interface const_iterator<_Key> extends CXXPointer {
        static <_Key> const_iterator<_Key> cast(Class<_Key> ___key, final long __foreign_address) {
            try {
                Class<const_iterator<_Key>> clz = (Class<const_iterator<_Key>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(const_iterator.class, ___key), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_Key> const_iterator<_Key> cast(Class<_Key> ___key,
                final FFIPointer __foreign_pointer) {
            return const_iterator.cast(___key, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("std::set<%s>::difference_type")
    @FFIGen
    @CXXHead(
            system = "set"
    )
    interface difference_type<_Key> extends CXXPointer {
        static <_Key> difference_type<_Key> cast(Class<_Key> ___key, final long __foreign_address) {
            try {
                Class<difference_type<_Key>> clz = (Class<difference_type<_Key>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(difference_type.class, ___key), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_Key> difference_type<_Key> cast(Class<_Key> ___key,
                final FFIPointer __foreign_pointer) {
            return difference_type.cast(___key, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("std::set<%s>::iterator")
    @FFIGen
    @CXXHead(
            system = "set"
    )
    interface iterator<_Key> extends CXXPointer {
        static <_Key> iterator<_Key> cast(Class<_Key> ___key, final long __foreign_address) {
            try {
                Class<iterator<_Key>> clz = (Class<iterator<_Key>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(iterator.class, ___key), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_Key> iterator<_Key> cast(Class<_Key> ___key, final FFIPointer __foreign_pointer) {
            return iterator.cast(___key, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("std::set<%s>::allocator_type")
    @FFIGen
    @CXXHead(
            system = "set"
    )
    interface allocator_type<_Key> extends CXXPointer {
        static <_Key> allocator_type<_Key> cast(Class<_Key> ___key, final long __foreign_address) {
            try {
                Class<allocator_type<_Key>> clz = (Class<allocator_type<_Key>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(allocator_type.class, ___key), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_Key> allocator_type<_Key> cast(Class<_Key> ___key,
                final FFIPointer __foreign_pointer) {
            return allocator_type.cast(___key, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("std::set<%s>::reverse_iterator")
    @FFIGen
    @CXXHead(
            system = "set"
    )
    interface reverse_iterator<_Key> extends CXXPointer {
        @FFIExpr("{0}")
        io.v6d.std.reverse_iterator<iterator<_Key>> get();

        static <_Key> reverse_iterator<_Key> cast(Class<_Key> ___key,
                final long __foreign_address) {
            try {
                Class<reverse_iterator<_Key>> clz = (Class<reverse_iterator<_Key>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(reverse_iterator.class, ___key), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_Key> reverse_iterator<_Key> cast(Class<_Key> ___key,
                final FFIPointer __foreign_pointer) {
            return reverse_iterator.cast(___key, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("std::set<%s>::pointer")
    @FFIGen
    @CXXHead(
            system = "set"
    )
    interface pointer<_Key> extends CXXPointer {
        static <_Key> pointer<_Key> cast(Class<_Key> ___key, final long __foreign_address) {
            try {
                Class<pointer<_Key>> clz = (Class<pointer<_Key>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(pointer.class, ___key), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_Key> pointer<_Key> cast(Class<_Key> ___key, final FFIPointer __foreign_pointer) {
            return pointer.cast(___key, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("std::set<%s>::value_type")
    @FFIGen
    interface value_type<_Key> extends CXXPointer {
        @FFIExpr("{0}")
        _Key get();

        static <_Key> value_type<_Key> cast(Class<_Key> ___key, final long __foreign_address) {
            try {
                Class<value_type<_Key>> clz = (Class<value_type<_Key>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(value_type.class, ___key), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_Key> value_type<_Key> cast(Class<_Key> ___key,
                final FFIPointer __foreign_pointer) {
            return value_type.cast(___key, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("std::set<%s>::size_type")
    @FFIGen
    @CXXHead(
            system = "set"
    )
    interface size_type<_Key> extends CXXPointer {
        static <_Key> size_type<_Key> cast(Class<_Key> ___key, final long __foreign_address) {
            try {
                Class<size_type<_Key>> clz = (Class<size_type<_Key>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(size_type.class, ___key), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_Key> size_type<_Key> cast(Class<_Key> ___key, final FFIPointer __foreign_pointer) {
            return size_type.cast(___key, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("std::set<%s>::key_type")
    @FFIGen
    interface key_type<_Key> extends CXXPointer {
        @FFIExpr("{0}")
        _Key get();

        static <_Key> key_type<_Key> cast(Class<_Key> ___key, final long __foreign_address) {
            try {
                Class<key_type<_Key>> clz = (Class<key_type<_Key>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(key_type.class, ___key), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_Key> key_type<_Key> cast(Class<_Key> ___key, final FFIPointer __foreign_pointer) {
            return key_type.cast(___key, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("std::set<%s>::const_pointer")
    @FFIGen
    @CXXHead(
            system = "set"
    )
    interface const_pointer<_Key> extends CXXPointer {
        static <_Key> const_pointer<_Key> cast(Class<_Key> ___key, final long __foreign_address) {
            try {
                Class<const_pointer<_Key>> clz = (Class<const_pointer<_Key>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(const_pointer.class, ___key), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_Key> const_pointer<_Key> cast(Class<_Key> ___key,
                final FFIPointer __foreign_pointer) {
            return const_pointer.cast(___key, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("std::set<%s>::const_reverse_iterator")
    @FFIGen
    @CXXHead(
            system = "set"
    )
    interface const_reverse_iterator<_Key> extends CXXPointer {
        @FFIExpr("{0}")
        io.v6d.std.reverse_iterator<const_iterator<_Key>> get();

        static <_Key> const_reverse_iterator<_Key> cast(Class<_Key> ___key,
                final long __foreign_address) {
            try {
                Class<const_reverse_iterator<_Key>> clz = (Class<const_reverse_iterator<_Key>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(const_reverse_iterator.class, ___key), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_Key> const_reverse_iterator<_Key> cast(Class<_Key> ___key,
                final FFIPointer __foreign_pointer) {
            return const_reverse_iterator.cast(___key, __foreign_pointer.getAddress());
        }
    }
}
