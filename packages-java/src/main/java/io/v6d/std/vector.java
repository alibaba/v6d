// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.std;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXPointer;
import com.alibaba.fastffi.CXXReference;
import com.alibaba.fastffi.CXXValue;
import com.alibaba.fastffi.FFIExpr;
import com.alibaba.fastffi.FFIFactory;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFINameAlias;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("std::vector")
@FFIGen
@CXXHead(
        system = "vector"
)
public interface vector<_Tp> extends CXXPointer {
    void assign(@CXXValue initializer_list<_Tp> __il);

    @CXXValue
    iterator<_Tp> begin();

    @CXXValue
    @FFINameAlias("begin")
    const_iterator<_Tp> begin_1();

    @CXXValue
    iterator<_Tp> end();

    @CXXValue
    @FFINameAlias("end")
    const_iterator<_Tp> end_1();

    @CXXValue
    reverse_iterator<_Tp> rbegin();

    @CXXValue
    @FFINameAlias("rbegin")
    const_reverse_iterator<_Tp> rbegin_1();

    @CXXValue
    reverse_iterator<_Tp> rend();

    @CXXValue
    @FFINameAlias("rend")
    const_reverse_iterator<_Tp> rend_1();

    @CXXValue
    const_iterator<_Tp> cbegin();

    @CXXValue
    const_iterator<_Tp> cend();

    @CXXValue
    const_reverse_iterator<_Tp> crbegin();

    @CXXValue
    const_reverse_iterator<_Tp> crend();

    @CXXValue
    size_type<_Tp> size();

    @CXXValue
    size_type<_Tp> capacity();

    boolean empty();

    @CXXValue
    size_type<_Tp> max_size();

    void reserve(@CXXValue size_type<_Tp> __n);

    void shrink_to_fit();

    _Tp data();

    @FFINameAlias("data")
    _Tp data_1();

    void pop_back();

    @CXXValue
    iterator<_Tp> insert(@CXXValue const_iterator<_Tp> __position,
            @CXXValue initializer_list<_Tp> __il);

    @CXXValue
    iterator<_Tp> erase(@CXXValue const_iterator<_Tp> __position);

    @CXXValue
    iterator<_Tp> erase(@CXXValue const_iterator<_Tp> __first,
            @CXXValue const_iterator<_Tp> __last);

    void clear();

    void resize(@CXXValue size_type<_Tp> __sz);

    void swap(@CXXReference vector<_Tp> arg0);

    boolean __invariants();

    static <_Tp> vector<_Tp> cast(Class<_Tp> ___tp, final long __foreign_address) {
        try {
            Class<vector<_Tp>> clz = (Class<vector<_Tp>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(vector.class, ___tp), true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static <_Tp> vector<_Tp> cast(Class<_Tp> ___tp, final FFIPointer __foreign_pointer) {
        return vector.cast(___tp, __foreign_pointer.getAddress());
    }

    static <_Tp> Factory<_Tp> getFactory(Class<_Tp> ___tp) {
        return FFITypeFactory.getFactory(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(vector.class, ___tp), true));
    }

    static <_Tp> vector<_Tp> create(Class<_Tp> ___tp) {
        return vector.getFactory(___tp).create();
    }

    static <_Tp> vector<_Tp> create(Class<_Tp> ___tp, @CXXValue size_type<_Tp> __n) {
        return vector.getFactory(___tp).create(__n);
    }

    static <_Tp> vector<_Tp> create(Class<_Tp> ___tp, @CXXValue size_type<_Tp> __n,
            @CXXReference _Tp __x) {
        return vector.getFactory(___tp).create(__n, __x);
    }

    static <_Tp> vector<_Tp> create(Class<_Tp> ___tp, @CXXReference vector<_Tp> __x) {
        return vector.getFactory(___tp).create(__x);
    }

    static <_Tp> vector<_Tp> create(Class<_Tp> ___tp, @CXXValue initializer_list<_Tp> __il) {
        return vector.getFactory(___tp).create(__il);
    }

    @FFIFactory
    @CXXHead(
            system = "vector"
    )
    interface Factory<_Tp> {
        vector<_Tp> create();

        vector<_Tp> create(@CXXValue size_type<_Tp> __n);

        vector<_Tp> create(@CXXValue size_type<_Tp> __n, @CXXReference _Tp __x);

        vector<_Tp> create(@CXXReference vector<_Tp> __x);

        vector<_Tp> create(@CXXValue initializer_list<_Tp> __il);
    }

    @FFITypeAlias("std::vector<%s>::const_iterator")
    @FFIGen
    @CXXHead(
            system = "vector"
    )
    interface const_iterator<_Tp> extends CXXPointer {
        @FFIExpr("{0}")
        __wrap_iter<const_pointer<_Tp>> get();

        static <_Tp> const_iterator<_Tp> cast(Class<_Tp> ___tp, final long __foreign_address) {
            try {
                Class<const_iterator<_Tp>> clz = (Class<const_iterator<_Tp>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(const_iterator.class, ___tp), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_Tp> const_iterator<_Tp> cast(Class<_Tp> ___tp,
                final FFIPointer __foreign_pointer) {
            return const_iterator.cast(___tp, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("std::vector<%s>::__alloc_traits")
    @FFIGen
    @CXXHead(
            system = "vector"
    )
    interface __alloc_traits<_Tp> extends CXXPointer {
        static <_Tp> __alloc_traits<_Tp> cast(Class<_Tp> ___tp, final long __foreign_address) {
            try {
                Class<__alloc_traits<_Tp>> clz = (Class<__alloc_traits<_Tp>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(__alloc_traits.class, ___tp), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_Tp> __alloc_traits<_Tp> cast(Class<_Tp> ___tp,
                final FFIPointer __foreign_pointer) {
            return __alloc_traits.cast(___tp, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("std::vector<%s>::__self")
    @FFIGen
    interface __self<_Tp> extends CXXPointer {
        @FFIExpr("{0}")
        vector<_Tp> get();

        void assign(@CXXValue initializer_list<_Tp> __il);

        @CXXValue
        iterator<_Tp> begin();

        @CXXValue
        @FFINameAlias("begin")
        const_iterator<_Tp> begin_1();

        @CXXValue
        iterator<_Tp> end();

        @CXXValue
        @FFINameAlias("end")
        const_iterator<_Tp> end_1();

        @CXXValue
        reverse_iterator<_Tp> rbegin();

        @CXXValue
        @FFINameAlias("rbegin")
        const_reverse_iterator<_Tp> rbegin_1();

        @CXXValue
        reverse_iterator<_Tp> rend();

        @CXXValue
        @FFINameAlias("rend")
        const_reverse_iterator<_Tp> rend_1();

        @CXXValue
        const_iterator<_Tp> cbegin();

        @CXXValue
        const_iterator<_Tp> cend();

        @CXXValue
        const_reverse_iterator<_Tp> crbegin();

        @CXXValue
        const_reverse_iterator<_Tp> crend();

        @CXXValue
        size_type<_Tp> size();

        @CXXValue
        size_type<_Tp> capacity();

        boolean empty();

        @CXXValue
        size_type<_Tp> max_size();

        void reserve(@CXXValue size_type<_Tp> __n);

        void shrink_to_fit();

        _Tp data();

        @FFINameAlias("data")
        _Tp data_1();

        void pop_back();

        @CXXValue
        iterator<_Tp> insert(@CXXValue const_iterator<_Tp> __position,
                @CXXValue initializer_list<_Tp> __il);

        @CXXValue
        iterator<_Tp> erase(@CXXValue const_iterator<_Tp> __position);

        @CXXValue
        iterator<_Tp> erase(@CXXValue const_iterator<_Tp> __first,
                @CXXValue const_iterator<_Tp> __last);

        void clear();

        void resize(@CXXValue size_type<_Tp> __sz);

        void swap(@CXXReference vector<_Tp> arg0);

        boolean __invariants();

        static <_Tp> __self<_Tp> cast(Class<_Tp> ___tp, final long __foreign_address) {
            try {
                Class<__self<_Tp>> clz = (Class<__self<_Tp>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(__self.class, ___tp), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_Tp> __self<_Tp> cast(Class<_Tp> ___tp, final FFIPointer __foreign_pointer) {
            return __self.cast(___tp, __foreign_pointer.getAddress());
        }

        static <_Tp> Factory<_Tp> getFactory(Class<_Tp> ___tp) {
            return FFITypeFactory.getFactory(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(__self.class, ___tp), true));
        }

        static <_Tp> __self<_Tp> create(Class<_Tp> ___tp) {
            return __self.getFactory(___tp).create();
        }

        static <_Tp> __self<_Tp> create(Class<_Tp> ___tp, @CXXValue size_type<_Tp> __n) {
            return __self.getFactory(___tp).create(__n);
        }

        static <_Tp> __self<_Tp> create(Class<_Tp> ___tp, @CXXValue size_type<_Tp> __n,
                @CXXReference _Tp __x) {
            return __self.getFactory(___tp).create(__n, __x);
        }

        static <_Tp> __self<_Tp> create(Class<_Tp> ___tp, @CXXReference vector<_Tp> __x) {
            return __self.getFactory(___tp).create(__x);
        }

        static <_Tp> __self<_Tp> create(Class<_Tp> ___tp, @CXXValue initializer_list<_Tp> __il) {
            return __self.getFactory(___tp).create(__il);
        }

        @FFIFactory
        interface Factory<_Tp> {
            __self<_Tp> create();

            __self<_Tp> create(@CXXValue size_type<_Tp> __n);

            __self<_Tp> create(@CXXValue size_type<_Tp> __n, @CXXReference _Tp __x);

            __self<_Tp> create(@CXXReference vector<_Tp> __x);

            __self<_Tp> create(@CXXValue initializer_list<_Tp> __il);
        }
    }

    @FFITypeAlias("std::vector<%s>::const_pointer")
    @FFIGen
    @CXXHead(
            system = "vector"
    )
    interface const_pointer<_Tp> extends CXXPointer {
        static <_Tp> const_pointer<_Tp> cast(Class<_Tp> ___tp, final long __foreign_address) {
            try {
                Class<const_pointer<_Tp>> clz = (Class<const_pointer<_Tp>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(const_pointer.class, ___tp), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_Tp> const_pointer<_Tp> cast(Class<_Tp> ___tp, final FFIPointer __foreign_pointer) {
            return const_pointer.cast(___tp, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("std::vector<%s>::reverse_iterator")
    @FFIGen
    @CXXHead(
            system = "vector"
    )
    interface reverse_iterator<_Tp> extends CXXPointer {
        @FFIExpr("{0}")
        io.v6d.std.reverse_iterator<iterator<_Tp>> get();

        static <_Tp> reverse_iterator<_Tp> cast(Class<_Tp> ___tp, final long __foreign_address) {
            try {
                Class<reverse_iterator<_Tp>> clz = (Class<reverse_iterator<_Tp>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(reverse_iterator.class, ___tp), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_Tp> reverse_iterator<_Tp> cast(Class<_Tp> ___tp,
                final FFIPointer __foreign_pointer) {
            return reverse_iterator.cast(___tp, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("std::vector<%s>::value_type")
    @FFIGen
    interface value_type<_Tp> extends CXXPointer {
        @FFIExpr("{0}")
        _Tp get();

        static <_Tp> value_type<_Tp> cast(Class<_Tp> ___tp, final long __foreign_address) {
            try {
                Class<value_type<_Tp>> clz = (Class<value_type<_Tp>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(value_type.class, ___tp), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_Tp> value_type<_Tp> cast(Class<_Tp> ___tp, final FFIPointer __foreign_pointer) {
            return value_type.cast(___tp, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("std::vector<%s>::const_reverse_iterator")
    @FFIGen
    @CXXHead(
            system = "vector"
    )
    interface const_reverse_iterator<_Tp> extends CXXPointer {
        @FFIExpr("{0}")
        io.v6d.std.reverse_iterator<const_iterator<_Tp>> get();

        static <_Tp> const_reverse_iterator<_Tp> cast(Class<_Tp> ___tp,
                final long __foreign_address) {
            try {
                Class<const_reverse_iterator<_Tp>> clz = (Class<const_reverse_iterator<_Tp>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(const_reverse_iterator.class, ___tp), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_Tp> const_reverse_iterator<_Tp> cast(Class<_Tp> ___tp,
                final FFIPointer __foreign_pointer) {
            return const_reverse_iterator.cast(___tp, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("std::vector<%s>::size_type")
    @FFIGen
    @CXXHead(
            system = "vector"
    )
    interface size_type<_Tp> extends CXXPointer {
        static <_Tp> size_type<_Tp> cast(Class<_Tp> ___tp, final long __foreign_address) {
            try {
                Class<size_type<_Tp>> clz = (Class<size_type<_Tp>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(size_type.class, ___tp), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_Tp> size_type<_Tp> cast(Class<_Tp> ___tp, final FFIPointer __foreign_pointer) {
            return size_type.cast(___tp, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("std::vector<%s>::iterator")
    @FFIGen
    @CXXHead(
            system = "vector"
    )
    interface iterator<_Tp> extends CXXPointer {
        @FFIExpr("{0}")
        __wrap_iter<pointer<_Tp>> get();

        static <_Tp> iterator<_Tp> cast(Class<_Tp> ___tp, final long __foreign_address) {
            try {
                Class<iterator<_Tp>> clz = (Class<iterator<_Tp>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(iterator.class, ___tp), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_Tp> iterator<_Tp> cast(Class<_Tp> ___tp, final FFIPointer __foreign_pointer) {
            return iterator.cast(___tp, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("std::vector<%s>::pointer")
    @FFIGen
    @CXXHead(
            system = "vector"
    )
    interface pointer<_Tp> extends CXXPointer {
        static <_Tp> pointer<_Tp> cast(Class<_Tp> ___tp, final long __foreign_address) {
            try {
                Class<pointer<_Tp>> clz = (Class<pointer<_Tp>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(pointer.class, ___tp), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_Tp> pointer<_Tp> cast(Class<_Tp> ___tp, final FFIPointer __foreign_pointer) {
            return pointer.cast(___tp, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("std::vector<%s>::difference_type")
    @FFIGen
    @CXXHead(
            system = "vector"
    )
    interface difference_type<_Tp> extends CXXPointer {
        static <_Tp> difference_type<_Tp> cast(Class<_Tp> ___tp, final long __foreign_address) {
            try {
                Class<difference_type<_Tp>> clz = (Class<difference_type<_Tp>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(difference_type.class, ___tp), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_Tp> difference_type<_Tp> cast(Class<_Tp> ___tp,
                final FFIPointer __foreign_pointer) {
            return difference_type.cast(___tp, __foreign_pointer.getAddress());
        }
    }
}
