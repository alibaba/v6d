// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.std;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXPointer;
import com.alibaba.fastffi.CXXValue;
import com.alibaba.fastffi.FFIExpr;
import com.alibaba.fastffi.FFIFactory;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("std::allocator")
@FFIGen
@CXXHead(
        system = "__memory/allocator.h"
)
public interface allocator<_Tp> extends FFIPointer {
    _Tp allocate(long __n);

    void deallocate(_Tp __p, long __n);

    _Tp allocate(long __n, @FFITypeAlias("const void*") long arg1);

    long max_size();

    void destroy(@CXXValue pointer<_Tp> __p);

    static <_Tp> allocator<_Tp> cast(Class<_Tp> ___tp, final long __foreign_address) {
        try {
            Class<allocator<_Tp>> clz = (Class<allocator<_Tp>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(allocator.class, ___tp), true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static <_Tp> allocator<_Tp> cast(Class<_Tp> ___tp, final FFIPointer __foreign_pointer) {
        return allocator.cast(___tp, __foreign_pointer.getAddress());
    }

    @FFITypeAlias("std::allocator<%s>::value_type")
    @FFIGen
    interface value_type<_Tp> extends CXXPointer {
        @FFIExpr("{0}")
        _Tp get();

        static <_Tp> value_type<_Tp> cast(Class<_Tp> ___tp, final long __foreign_address) {
            try {
                Class<value_type<_Tp>> clz = (Class<value_type<_Tp>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(value_type.class, ___tp), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_Tp> value_type<_Tp> cast(Class<_Tp> ___tp, final FFIPointer __foreign_pointer) {
            return value_type.cast(___tp, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("std::allocator<%s>::size_type")
    @FFIGen
    interface size_type<_Tp> extends CXXPointer {
        @FFIExpr("(*{0})")
        long get();

        @FFIExpr("*{0} = (std::allocator<%s>::size_type){1}")
        void set(long __value);

        static <_Tp> size_type<_Tp> cast(Class<_Tp> ___tp, final long __foreign_address) {
            try {
                Class<size_type<_Tp>> clz = (Class<size_type<_Tp>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(size_type.class, ___tp), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_Tp> size_type<_Tp> cast(Class<_Tp> ___tp, final FFIPointer __foreign_pointer) {
            return size_type.cast(___tp, __foreign_pointer.getAddress());
        }

        static <_Tp> Factory<_Tp> getFactory(Class<_Tp> ___tp) {
            return FFITypeFactory.getFactory(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(size_type.class, ___tp), true));
        }

        static <_Tp> size_type<_Tp> create(Class<_Tp> ___tp) {
            return size_type.getFactory(___tp).create();
        }

        static <_Tp> size_type<_Tp> create(Class<_Tp> ___tp, long __value) {
            return size_type.getFactory(___tp).create(__value);
        }

        @FFIFactory
        interface Factory<_Tp> {
            size_type<_Tp> create();

            size_type<_Tp> create(long __value);
        }
    }

    @FFITypeAlias("std::allocator<%s>::rebind")
    @FFIGen
    @CXXHead(
            system = "__memory/allocator.h"
    )
    interface rebind<_Tp, _Up> extends FFIPointer {
        static <_Tp, _Up> rebind<_Tp, _Up> cast(Class<_Tp> ___tp, Class<_Up> ___up,
                final long __foreign_address) {
            try {
                Class<rebind<_Tp, _Up>> clz = (Class<rebind<_Tp, _Up>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(rebind.class, ___tp, ___up), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_Tp, _Up> rebind<_Tp, _Up> cast(Class<_Tp> ___tp, Class<_Up> ___up,
                final FFIPointer __foreign_pointer) {
            return rebind.cast(___tp, ___up, __foreign_pointer.getAddress());
        }

        @FFITypeAlias("std::allocator<%s>::rebind<%s>::other")
        @FFIGen
        @CXXHead(
                system = "__memory/allocator.h"
        )
        interface other<_Tp, _Up> extends CXXPointer {
            @FFIExpr("{0}")
            allocator<_Up> get();

            static <_Tp, _Up> other<_Tp, _Up> cast(Class<_Tp> ___tp, Class<_Up> ___up,
                    final long __foreign_address) {
                try {
                    Class<other<_Tp, _Up>> clz = (Class<other<_Tp, _Up>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(other.class, ___tp, ___up), true));
                    return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
                } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                    return null;
                }
            }

            static <_Tp, _Up> other<_Tp, _Up> cast(Class<_Tp> ___tp, Class<_Up> ___up,
                    final FFIPointer __foreign_pointer) {
                return other.cast(___tp, ___up, __foreign_pointer.getAddress());
            }
        }
    }

    @FFITypeAlias("std::allocator<%s>::propagate_on_container_move_assignment")
    @FFIGen
    @CXXHead(
            system = "__memory/allocator.h"
    )
    interface propagate_on_container_move_assignment<_Tp> extends CXXPointer {
        @FFIExpr("{0}")
        true_type get();

        static <_Tp> propagate_on_container_move_assignment<_Tp> cast(Class<_Tp> ___tp,
                final long __foreign_address) {
            try {
                Class<propagate_on_container_move_assignment<_Tp>> clz = (Class<propagate_on_container_move_assignment<_Tp>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(propagate_on_container_move_assignment.class, ___tp), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_Tp> propagate_on_container_move_assignment<_Tp> cast(Class<_Tp> ___tp,
                final FFIPointer __foreign_pointer) {
            return propagate_on_container_move_assignment.cast(___tp, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("std::allocator<%s>::difference_type")
    @FFIGen
    interface difference_type<_Tp> extends CXXPointer {
        @FFIExpr("(*{0})")
        long get();

        @FFIExpr("*{0} = (std::allocator<%s>::difference_type){1}")
        void set(long __value);

        static <_Tp> difference_type<_Tp> cast(Class<_Tp> ___tp, final long __foreign_address) {
            try {
                Class<difference_type<_Tp>> clz = (Class<difference_type<_Tp>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(difference_type.class, ___tp), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_Tp> difference_type<_Tp> cast(Class<_Tp> ___tp,
                final FFIPointer __foreign_pointer) {
            return difference_type.cast(___tp, __foreign_pointer.getAddress());
        }

        static <_Tp> Factory<_Tp> getFactory(Class<_Tp> ___tp) {
            return FFITypeFactory.getFactory(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(difference_type.class, ___tp), true));
        }

        static <_Tp> difference_type<_Tp> create(Class<_Tp> ___tp) {
            return difference_type.getFactory(___tp).create();
        }

        static <_Tp> difference_type<_Tp> create(Class<_Tp> ___tp, long __value) {
            return difference_type.getFactory(___tp).create(__value);
        }

        @FFIFactory
        interface Factory<_Tp> {
            difference_type<_Tp> create();

            difference_type<_Tp> create(long __value);
        }
    }

    @FFITypeAlias("std::allocator<%s>::is_always_equal")
    @FFIGen
    @CXXHead(
            system = "__memory/allocator.h"
    )
    interface is_always_equal<_Tp> extends CXXPointer {
        @FFIExpr("{0}")
        true_type get();

        static <_Tp> is_always_equal<_Tp> cast(Class<_Tp> ___tp, final long __foreign_address) {
            try {
                Class<is_always_equal<_Tp>> clz = (Class<is_always_equal<_Tp>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(is_always_equal.class, ___tp), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_Tp> is_always_equal<_Tp> cast(Class<_Tp> ___tp,
                final FFIPointer __foreign_pointer) {
            return is_always_equal.cast(___tp, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("std::allocator<%s>::pointer")
    @FFIGen
    @CXXHead(
            system = "__memory/allocator.h"
    )
    interface pointer<_Tp> extends CXXPointer {
        @FFIExpr("(*{0})")
        _Tp get();

        @FFIExpr("*{0} = (std::allocator<%s>::pointer){1}")
        void set(_Tp __value);

        static <_Tp> pointer<_Tp> cast(Class<_Tp> ___tp, final long __foreign_address) {
            try {
                Class<pointer<_Tp>> clz = (Class<pointer<_Tp>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(pointer.class, ___tp), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_Tp> pointer<_Tp> cast(Class<_Tp> ___tp, final FFIPointer __foreign_pointer) {
            return pointer.cast(___tp, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("std::allocator<%s>::const_pointer")
    @FFIGen
    @CXXHead(
            system = "__memory/allocator.h"
    )
    interface const_pointer<_Tp> extends CXXPointer {
        @FFIExpr("(*{0})")
        _Tp get();

        @FFIExpr("*{0} = (std::allocator<%s>::const_pointer){1}")
        void set(_Tp __value);

        static <_Tp> const_pointer<_Tp> cast(Class<_Tp> ___tp, final long __foreign_address) {
            try {
                Class<const_pointer<_Tp>> clz = (Class<const_pointer<_Tp>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(const_pointer.class, ___tp), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_Tp> const_pointer<_Tp> cast(Class<_Tp> ___tp, final FFIPointer __foreign_pointer) {
            return const_pointer.cast(___tp, __foreign_pointer.getAddress());
        }
    }
}
