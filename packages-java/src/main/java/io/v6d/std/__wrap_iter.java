// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.std;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXPointer;
import com.alibaba.fastffi.CXXValue;
import com.alibaba.fastffi.FFIExpr;
import com.alibaba.fastffi.FFIFactory;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("std::__wrap_iter")
@FFIGen
@CXXHead(
        system = "__iterator/wrap_iter.h"
)
public interface __wrap_iter<_Iter> extends FFIPointer {
    @CXXValue
    _Iter base();

    static <_Iter> __wrap_iter<_Iter> cast(Class<_Iter> ___iter, final long __foreign_address) {
        try {
            Class<__wrap_iter<_Iter>> clz = (Class<__wrap_iter<_Iter>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(__wrap_iter.class, ___iter), true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static <_Iter> __wrap_iter<_Iter> cast(Class<_Iter> ___iter,
            final FFIPointer __foreign_pointer) {
        return __wrap_iter.cast(___iter, __foreign_pointer.getAddress());
    }

    static <_Iter> Factory<_Iter> getFactory(Class<_Iter> ___iter) {
        return FFITypeFactory.getFactory(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(__wrap_iter.class, ___iter), true));
    }

    static <_Iter> __wrap_iter<_Iter> create(Class<_Iter> ___iter) {
        return __wrap_iter.getFactory(___iter).create();
    }

    @FFIFactory
    @CXXHead(
            system = "__iterator/wrap_iter.h"
    )
    interface Factory<_Iter> {
        __wrap_iter<_Iter> create();
    }

    @FFITypeAlias("std::__wrap_iter<%s>::value_type")
    @FFIGen
    @CXXHead(
            system = "__iterator/wrap_iter.h"
    )
    interface value_type<_Iter> extends CXXPointer {
        static <_Iter> value_type<_Iter> cast(Class<_Iter> ___iter, final long __foreign_address) {
            try {
                Class<value_type<_Iter>> clz = (Class<value_type<_Iter>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(value_type.class, ___iter), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_Iter> value_type<_Iter> cast(Class<_Iter> ___iter,
                final FFIPointer __foreign_pointer) {
            return value_type.cast(___iter, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("std::__wrap_iter<%s>::reference")
    @FFIGen
    @CXXHead(
            system = "__iterator/wrap_iter.h"
    )
    interface reference<_Iter> extends CXXPointer {
        static <_Iter> reference<_Iter> cast(Class<_Iter> ___iter, final long __foreign_address) {
            try {
                Class<reference<_Iter>> clz = (Class<reference<_Iter>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(reference.class, ___iter), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_Iter> reference<_Iter> cast(Class<_Iter> ___iter,
                final FFIPointer __foreign_pointer) {
            return reference.cast(___iter, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("std::__wrap_iter<%s>::iterator_category")
    @FFIGen
    @CXXHead(
            system = "__iterator/wrap_iter.h"
    )
    interface iterator_category<_Iter> extends CXXPointer {
        static <_Iter> iterator_category<_Iter> cast(Class<_Iter> ___iter,
                final long __foreign_address) {
            try {
                Class<iterator_category<_Iter>> clz = (Class<iterator_category<_Iter>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(iterator_category.class, ___iter), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_Iter> iterator_category<_Iter> cast(Class<_Iter> ___iter,
                final FFIPointer __foreign_pointer) {
            return iterator_category.cast(___iter, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("std::__wrap_iter<%s>::pointer")
    @FFIGen
    @CXXHead(
            system = "__iterator/wrap_iter.h"
    )
    interface pointer<_Iter> extends CXXPointer {
        static <_Iter> pointer<_Iter> cast(Class<_Iter> ___iter, final long __foreign_address) {
            try {
                Class<pointer<_Iter>> clz = (Class<pointer<_Iter>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(pointer.class, ___iter), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_Iter> pointer<_Iter> cast(Class<_Iter> ___iter,
                final FFIPointer __foreign_pointer) {
            return pointer.cast(___iter, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("std::__wrap_iter<%s>::iterator_type")
    @FFIGen
    interface iterator_type<_Iter> extends CXXPointer {
        @FFIExpr("{0}")
        _Iter get();

        static <_Iter> iterator_type<_Iter> cast(Class<_Iter> ___iter,
                final long __foreign_address) {
            try {
                Class<iterator_type<_Iter>> clz = (Class<iterator_type<_Iter>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(iterator_type.class, ___iter), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_Iter> iterator_type<_Iter> cast(Class<_Iter> ___iter,
                final FFIPointer __foreign_pointer) {
            return iterator_type.cast(___iter, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("std::__wrap_iter<%s>::difference_type")
    @FFIGen
    @CXXHead(
            system = "__iterator/wrap_iter.h"
    )
    interface difference_type<_Iter> extends CXXPointer {
        static <_Iter> difference_type<_Iter> cast(Class<_Iter> ___iter,
                final long __foreign_address) {
            try {
                Class<difference_type<_Iter>> clz = (Class<difference_type<_Iter>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(difference_type.class, ___iter), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_Iter> difference_type<_Iter> cast(Class<_Iter> ___iter,
                final FFIPointer __foreign_pointer) {
            return difference_type.cast(___iter, __foreign_pointer.getAddress());
        }
    }
}
