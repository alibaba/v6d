// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.std;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXPointer;
import com.alibaba.fastffi.CXXReference;
import com.alibaba.fastffi.FFIExpr;
import com.alibaba.fastffi.FFIFactory;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("std::shared_ptr")
@FFIGen
@CXXHead(
        system = "__memory/shared_ptr.h"
)
@CXXHead(
        system = "memory"
)
public interface shared_ptr<_Tp> extends CXXPointer {
    void swap(@CXXReference shared_ptr<_Tp> __r);

    void reset();

    _Tp get();

    long use_count();

    boolean unique();

    boolean __owner_equivalent(@CXXReference shared_ptr<_Tp> __p);

    static <_Tp> shared_ptr<_Tp> cast(Class<_Tp> ___tp, final long __foreign_address) {
        try {
            Class<shared_ptr<_Tp>> clz = (Class<shared_ptr<_Tp>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(shared_ptr.class, ___tp), true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static <_Tp> shared_ptr<_Tp> cast(Class<_Tp> ___tp, final FFIPointer __foreign_pointer) {
        return shared_ptr.cast(___tp, __foreign_pointer.getAddress());
    }

    static <_Tp> Factory<_Tp> getFactory(Class<_Tp> ___tp) {
        return FFITypeFactory.getFactory(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(shared_ptr.class, ___tp), true));
    }

    static <_Tp> shared_ptr<_Tp> create(Class<_Tp> ___tp) {
        return shared_ptr.getFactory(___tp).create();
    }

    static <_Tp> shared_ptr<_Tp> create(Class<_Tp> ___tp, @CXXReference shared_ptr<_Tp> __r) {
        return shared_ptr.getFactory(___tp).create(__r);
    }

    @FFIFactory
    @CXXHead(
            system = "__memory/shared_ptr.h"
    )
    @CXXHead(
            system = "memory"
    )
    interface Factory<_Tp> {
        shared_ptr<_Tp> create();

        shared_ptr<_Tp> create(@CXXReference shared_ptr<_Tp> __r);
    }

    @FFITypeAlias("std::shared_ptr<%s>::element_type")
    @FFIGen
    interface element_type<_Tp> extends CXXPointer {
        @FFIExpr("{0}")
        _Tp get();

        static <_Tp> element_type<_Tp> cast(Class<_Tp> ___tp, final long __foreign_address) {
            try {
                Class<element_type<_Tp>> clz = (Class<element_type<_Tp>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(element_type.class, ___tp), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_Tp> element_type<_Tp> cast(Class<_Tp> ___tp, final FFIPointer __foreign_pointer) {
            return element_type.cast(___tp, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("std::shared_ptr<%s>::__shared_ptr_default_allocator")
    @FFIGen
    @CXXHead(
            system = "__memory/shared_ptr.h"
    )
    interface __shared_ptr_default_allocator<_Tp, _Yp> extends FFIPointer {
        static <_Tp, _Yp> __shared_ptr_default_allocator<_Tp, _Yp> cast(Class<_Tp> ___tp,
                Class<_Yp> ___yp, final long __foreign_address) {
            try {
                Class<__shared_ptr_default_allocator<_Tp, _Yp>> clz = (Class<__shared_ptr_default_allocator<_Tp, _Yp>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(__shared_ptr_default_allocator.class, ___tp, ___yp), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_Tp, _Yp> __shared_ptr_default_allocator<_Tp, _Yp> cast(Class<_Tp> ___tp,
                Class<_Yp> ___yp, final FFIPointer __foreign_pointer) {
            return __shared_ptr_default_allocator.cast(___tp, ___yp, __foreign_pointer.getAddress());
        }

        @FFITypeAlias("std::shared_ptr<%s>::__shared_ptr_default_allocator<%s>::type")
        @FFIGen
        @CXXHead(
                system = "__memory/shared_ptr.h"
        )
        interface type<_Tp, _Yp> extends CXXPointer {
            @FFIExpr("{0}")
            allocator<_Yp> get();

            static <_Tp, _Yp> type<_Tp, _Yp> cast(Class<_Tp> ___tp, Class<_Yp> ___yp,
                    final long __foreign_address) {
                try {
                    Class<type<_Tp, _Yp>> clz = (Class<type<_Tp, _Yp>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(type.class, ___tp, ___yp), true));
                    return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
                } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                    return null;
                }
            }

            static <_Tp, _Yp> type<_Tp, _Yp> cast(Class<_Tp> ___tp, Class<_Yp> ___yp,
                    final FFIPointer __foreign_pointer) {
                return type.cast(___tp, ___yp, __foreign_pointer.getAddress());
            }
        }
    }
}
