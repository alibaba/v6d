// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.std;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXPointer;
import com.alibaba.fastffi.FFIExpr;
import com.alibaba.fastffi.FFIFactory;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("std::initializer_list")
@FFIGen
@CXXHead(
        system = "initializer_list"
)
public interface initializer_list<_Ep> extends FFIPointer {
    long size();

    _Ep begin();

    _Ep end();

    static <_Ep> initializer_list<_Ep> cast(Class<_Ep> ___ep, final long __foreign_address) {
        try {
            Class<initializer_list<_Ep>> clz = (Class<initializer_list<_Ep>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(initializer_list.class, ___ep), true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static <_Ep> initializer_list<_Ep> cast(Class<_Ep> ___ep, final FFIPointer __foreign_pointer) {
        return initializer_list.cast(___ep, __foreign_pointer.getAddress());
    }

    static <_Ep> Factory<_Ep> getFactory(Class<_Ep> ___ep) {
        return FFITypeFactory.getFactory(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(initializer_list.class, ___ep), true));
    }

    static <_Ep> initializer_list<_Ep> create(Class<_Ep> ___ep) {
        return initializer_list.getFactory(___ep).create();
    }

    @FFIFactory
    @CXXHead(
            system = "initializer_list"
    )
    interface Factory<_Ep> {
        initializer_list<_Ep> create();
    }

    @FFITypeAlias("std::initializer_list<%s>::reference")
    @FFIGen
    @CXXHead(
            system = "initializer_list"
    )
    interface reference<_Ep> extends CXXPointer {
        @FFIExpr("(*{0})")
        _Ep get();

        @FFIExpr("*{0} = (std::initializer_list<%s>::reference){1}")
        void set(_Ep __value);

        static <_Ep> reference<_Ep> cast(Class<_Ep> ___ep, final long __foreign_address) {
            try {
                Class<reference<_Ep>> clz = (Class<reference<_Ep>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(reference.class, ___ep), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_Ep> reference<_Ep> cast(Class<_Ep> ___ep, final FFIPointer __foreign_pointer) {
            return reference.cast(___ep, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("std::initializer_list<%s>::size_type")
    @FFIGen
    interface size_type<_Ep> extends CXXPointer {
        @FFIExpr("(*{0})")
        long get();

        @FFIExpr("*{0} = (std::initializer_list<%s>::size_type){1}")
        void set(long __value);

        static <_Ep> size_type<_Ep> cast(Class<_Ep> ___ep, final long __foreign_address) {
            try {
                Class<size_type<_Ep>> clz = (Class<size_type<_Ep>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(size_type.class, ___ep), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_Ep> size_type<_Ep> cast(Class<_Ep> ___ep, final FFIPointer __foreign_pointer) {
            return size_type.cast(___ep, __foreign_pointer.getAddress());
        }

        static <_Ep> Factory<_Ep> getFactory(Class<_Ep> ___ep) {
            return FFITypeFactory.getFactory(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(size_type.class, ___ep), true));
        }

        static <_Ep> size_type<_Ep> create(Class<_Ep> ___ep) {
            return size_type.getFactory(___ep).create();
        }

        static <_Ep> size_type<_Ep> create(Class<_Ep> ___ep, long __value) {
            return size_type.getFactory(___ep).create(__value);
        }

        @FFIFactory
        interface Factory<_Ep> {
            size_type<_Ep> create();

            size_type<_Ep> create(long __value);
        }
    }

    @FFITypeAlias("std::initializer_list<%s>::const_iterator")
    @FFIGen
    @CXXHead(
            system = "initializer_list"
    )
    interface const_iterator<_Ep> extends CXXPointer {
        @FFIExpr("(*{0})")
        _Ep get();

        @FFIExpr("*{0} = (std::initializer_list<%s>::const_iterator){1}")
        void set(_Ep __value);

        static <_Ep> const_iterator<_Ep> cast(Class<_Ep> ___ep, final long __foreign_address) {
            try {
                Class<const_iterator<_Ep>> clz = (Class<const_iterator<_Ep>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(const_iterator.class, ___ep), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_Ep> const_iterator<_Ep> cast(Class<_Ep> ___ep,
                final FFIPointer __foreign_pointer) {
            return const_iterator.cast(___ep, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("std::initializer_list<%s>::value_type")
    @FFIGen
    interface value_type<_Ep> extends CXXPointer {
        @FFIExpr("{0}")
        _Ep get();

        static <_Ep> value_type<_Ep> cast(Class<_Ep> ___ep, final long __foreign_address) {
            try {
                Class<value_type<_Ep>> clz = (Class<value_type<_Ep>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(value_type.class, ___ep), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_Ep> value_type<_Ep> cast(Class<_Ep> ___ep, final FFIPointer __foreign_pointer) {
            return value_type.cast(___ep, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("std::initializer_list<%s>::iterator")
    @FFIGen
    @CXXHead(
            system = "initializer_list"
    )
    interface iterator<_Ep> extends CXXPointer {
        @FFIExpr("(*{0})")
        _Ep get();

        @FFIExpr("*{0} = (std::initializer_list<%s>::iterator){1}")
        void set(_Ep __value);

        static <_Ep> iterator<_Ep> cast(Class<_Ep> ___ep, final long __foreign_address) {
            try {
                Class<iterator<_Ep>> clz = (Class<iterator<_Ep>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(iterator.class, ___ep), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_Ep> iterator<_Ep> cast(Class<_Ep> ___ep, final FFIPointer __foreign_pointer) {
            return iterator.cast(___ep, __foreign_pointer.getAddress());
        }
    }

    @FFITypeAlias("std::initializer_list<%s>::const_reference")
    @FFIGen
    @CXXHead(
            system = "initializer_list"
    )
    interface const_reference<_Ep> extends CXXPointer {
        @FFIExpr("(*{0})")
        _Ep get();

        @FFIExpr("*{0} = (std::initializer_list<%s>::const_reference){1}")
        void set(_Ep __value);

        static <_Ep> const_reference<_Ep> cast(Class<_Ep> ___ep, final long __foreign_address) {
            try {
                Class<const_reference<_Ep>> clz = (Class<const_reference<_Ep>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(const_reference.class, ___ep), true));
                return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
                return null;
            }
        }

        static <_Ep> const_reference<_Ep> cast(Class<_Ep> ___ep,
                final FFIPointer __foreign_pointer) {
            return const_reference.cast(___ep, __foreign_pointer.getAddress());
        }
    }
}
