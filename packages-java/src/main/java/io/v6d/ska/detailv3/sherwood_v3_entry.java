// Code generated by alibaba/fastFFI. DO NOT EDIT.
//
package io.v6d.ska.detailv3;

import com.alibaba.fastffi.CXXHead;
import com.alibaba.fastffi.CXXPointer;
import com.alibaba.fastffi.FFIFactory;
import com.alibaba.fastffi.FFIGen;
import com.alibaba.fastffi.FFIGetter;
import com.alibaba.fastffi.FFIPointer;
import com.alibaba.fastffi.FFITypeAlias;
import com.alibaba.fastffi.FFITypeFactory;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;
import java.lang.Long;
import java.lang.NoSuchMethodException;
import java.lang.reflect.InvocationTargetException;

@FFITypeAlias("ska::detailv3::sherwood_v3_entry")
@FFIGen
@CXXHead(
        system = "flat_hash_map/flat_hash_map.hpp"
)
public interface sherwood_v3_entry<T> extends CXXPointer {
    @FFIGetter
    byte distance_from_desired();

    boolean has_value();

    boolean is_empty();

    boolean is_at_desired_position();

    void destroy_value();

    static <T> sherwood_v3_entry<T> cast(Class<T> __t, final long __foreign_address) {
        try {
            Class<sherwood_v3_entry<T>> clz = (Class<sherwood_v3_entry<T>>) FFITypeFactory.getType(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(sherwood_v3_entry.class, __t), true));
            return clz.getConstructor(Long.TYPE).newInstance(__foreign_address);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | InstantiationException | IllegalAccessException e) {
            return null;
        }
    }

    static <T> sherwood_v3_entry<T> cast(Class<T> __t, final FFIPointer __foreign_pointer) {
        return sherwood_v3_entry.cast(__t, __foreign_pointer.getAddress());
    }

    static <T> Factory<T> getFactory(Class<T> __t) {
        return FFITypeFactory.getFactory(FFITypeFactory.getFFITypeName(FFITypeFactory.makeParameterizedType(sherwood_v3_entry.class, __t), true));
    }

    static <T> sherwood_v3_entry<T> create(Class<T> __t) {
        return sherwood_v3_entry.getFactory(__t).create();
    }

    static <T> sherwood_v3_entry<T> create(Class<T> __t, byte distance_from_desired) {
        return sherwood_v3_entry.getFactory(__t).create(distance_from_desired);
    }

    @FFIFactory
    @CXXHead(
            system = "flat_hash_map/flat_hash_map.hpp"
    )
    interface Factory<T> {
        sherwood_v3_entry<T> create();

        sherwood_v3_entry<T> create(byte distance_from_desired);
    }
}
