<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>io.v6d.modules</groupId>
    <artifactId>vineyard-modules</artifactId>
    <version>0.1-SNAPSHOT</version>
  </parent>

  <artifactId>vineyard-foreign-resolver</artifactId>

  <name>vineyard-foreign-resolver</name>
  <url>https://v6d.io</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>1.8</maven.compiler.source>
    <maven.compiler.target>1.8</maven.compiler.target>
  </properties>

  <dependencies>
    <dependency>
        <groupId>com.github.jnr</groupId>
        <artifactId>jnr-posix</artifactId>
    </dependency>

    <dependency>
        <groupId>com.github.jnr</groupId>
        <artifactId>jnr-unixsocket</artifactId>
    </dependency>

    <dependency>
      <groupId>org.scijava</groupId>
      <artifactId>native-lib-loader</artifactId>
    </dependency>

    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>io.v6d.core</groupId>
      <artifactId>vineyard-core</artifactId>
    </dependency>

    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <!-- clean lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#clean_Lifecycle -->
      <plugin>
        <artifactId>maven-clean-plugin</artifactId>
      </plugin>
      <!-- default lifecycle, jar packaging: see https://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging -->
      <plugin>
        <artifactId>maven-resources-plugin</artifactId>
      </plugin>
      <plugin>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <compilerArgs>
            <arg>-h</arg>
            <arg>${project.build.directory}/jni/javah-include</arg>
          </compilerArgs>
        </configuration>
      </plugin>
      <plugin>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <argLine>-Djava.library.path=${project.build.directory}/classes/${native.library.path}</argLine>
        </configuration>
      </plugin>
      <plugin>
        <artifactId>maven-jar-plugin</artifactId>
      </plugin>
      <plugin>
        <artifactId>maven-install-plugin</artifactId>
      </plugin>
      <plugin>
        <artifactId>maven-deploy-plugin</artifactId>
      </plugin>
      <!-- site lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#site_Lifecycle -->
      <plugin>
        <artifactId>maven-site-plugin</artifactId>
      </plugin>
      <plugin>
        <artifactId>maven-project-info-reports-plugin</artifactId>
      </plugin>
      <plugin>
        <artifactId>maven-assembly-plugin</artifactId>
        <configuration>
          <descriptorRefs>
            <descriptorRef>jar-with-dependencies</descriptorRef>
          </descriptorRefs>
        </configuration>
      </plugin>
      <plugin>
        <artifactId>maven-antrun-plugin</artifactId>
        <executions>
          <execution>
            <id>generate-sources</id>
            <phase>generate-sources</phase>
            <configuration>
              <target>
                <mkdir dir="${project.build.directory}/classes/${native.library.path}"/>
              </target>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>native-maven-plugin</artifactId>
        <version>1.0-alpha-11</version>
        <extensions>true</extensions>
        <executions>
          <execution>
            <phase>compile</phase>
            <goals>
              <goal>compile</goal>
              <goal>link</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <compilerProvider>generic-classic</compilerProvider>
          <compilerExecutable>/usr/local/opt/llvm/bin/clang++</compilerExecutable>
          <linkerExecutable>/usr/local/opt/llvm/bin/clang++</linkerExecutable>
          <sources>
            <source>
              <directory>${project.basedir}/src/main/cpp/ffi</directory>
              <fileNames>
                <fileName>object_meta.cc</fileName>
              </fileNames>
            </source>
            <source>
              <directory>${project.build.directory}/jni/javah-include</directory>
            </source>
          </sources>
          <compilerStartOptions>
            <compilerStartOption>-I ${JAVA_HOME}/include</compilerStartOption>
            <compilerStartOption>-I ${JAVA_HOME}/include/linux</compilerStartOption>
            <compilerStartOption>-I ${JAVA_HOME}/include/darwin</compilerStartOption>
            <compilerStartOption>-I /usr/local/include</compilerStartOption>
            <compilerStartOption>-I /usr/local/include/vineyard</compilerStartOption>
            <compilerStartOption>-I ${project.build.directory}/jni/javah-include</compilerStartOption>
          </compilerStartOptions>
          <compilerEndOptions>
            <compilerEndOption>-fPIC</compilerEndOption>
            <compilerEndOption>-std=c++14</compilerEndOption>
            <compilerEndOption>-O2</compilerEndOption>
            <compilerEndOption>-g</compilerEndOption>
            <compilerEndOption>-ggdb</compilerEndOption>
            <compilerEndOption>-Wno-deprecated-declarations</compilerEndOption>
          </compilerEndOptions>
          <linkerStartOptions>
            <linkerStartOption>-L ${JAVA_HOME}/lib/</linkerStartOption>
            <linkerStartOption>-L /usr/lib/</linkerStartOption>
            <linkerStartOption>-L /usr/local/lib/</linkerStartOption>
          </linkerStartOptions>
          <linkerEndOptions>
            <linkerEndOption>-lvineyard_client</linkerEndOption>
            <linkerEndOption>-lglog</linkerEndOption>
            <linkerEndOption>-shared</linkerEndOption>
            <linkerEndOption>-fPIC</linkerEndOption>
          </linkerEndOptions>
          <linkerOutputDirectory>${project.build.directory}/classes/${native.library.path}</linkerOutputDirectory>
          <linkerFinalName>lib${project.build.finalName}</linkerFinalName>
          <linkerFinalNameExt>${native.library.ext}</linkerFinalNameExt>
        </configuration>
      </plugin>
    </plugins>
  </build>
</project>
